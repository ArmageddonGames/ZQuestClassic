Compiling 'prime.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Generating object code
Pass 6: Assembling
Success!
Compile finished with exit code '0' (success)

PUSHR d0; void run(int) Params
PUSHR REFFFC; void run(int) Body Start
PUSHR d2
SETR d4,SP
SETV d2,2; for() #3444 setup AND while(true) #3442 Body [Opt:AlwaysOn]
STORED d2,0
LOADD d2,0; for() #3444 LoopTest
PUSHR d2
LOADD d2,2
POP d3
COMPARER d3,d2
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 43; for() #3444 TestFail?
LOADD d2,2; if() #3447 Test AND for() #3444 Body
PUSHR d2
LOADD d2,0
POP d3
MODR d3,d2
SETR d2,d3
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 26; Test 'if'
GOTO 37; continue #3446 AND if() #3447 Body
PUSHR d4; if() #3448 Test
PUSHV 0.0031; UsrFunc[bool is_prime(int)] Return Addr
LOADD d2,0; UsrFunc[bool is_prime(int)] Params
PUSHR d2
GOTO 47; UsrFunc[bool is_prime(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 37; Test 'if'
LOADD d2,0; InlineFunc[void Trace(untyped)] Params AND if() #3448 Body
SETR d3,d2
TRACER d3; InlineFunc[void Trace(untyped)] Body
LOADD d2,0; for() #3444 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 7; for() #3444 End
WAITFRAME; InlineFunc[void Waitframe()] Body
GOTO 5; while() #3442 End
POPARGS d5,0.0003
QUIT; void run(int) Body End
PUSHR d2; Func[bool is_prime(int)] Body Start
SETR d4,SP
SETV d2,2; for() #3436 setup
STORED d2,0
LOADD d2,0; for() #3436 LoopTest
PUSHR d2
LOADD d2,1
DIVV d2,2
POP d3
COMPARER d3,d2
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 78; for() #3436 TestFail?
LOADD d2,1; if() #3439 Test AND for() #3436 Body
PUSHR d2
LOADD d2,0
POP d3
MODR d3,d2
SETR d2,d3
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 72; Test 'if'
SETV d2,0; if() #3439 Body
GOTO 80; return #3435
LOADD d2,0; for() #3436 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 51; for() #3436 End
SETV d2,1
GOTO 80; return #3435
POPARGS d5,0.0002
RETURN; Func[bool is_prime(int)] Body End


QUIT; void run() Body

