Compiling 'matrix_password.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

PUSHR d0; void run(int, int, int) Params
PUSHR d1
PUSHR d2
PUSHR REFFFC; void run(int, int, int) Body Start
PUSHARGSV 0,0.0003
SETR d4,SP
SETV d2,13; if() #558 Test
PUSHR d2
POP d0
SETR d2,SCREENSTATED
COMPAREV d2,0
GOTOCMP 14,==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #558 Body
PUSHARGSR d4,0.0002; UsrFunc[int ComboAt(int, int)] Params Start
LOADD d2,3; UsrFunc[int CenterX(FFC)] Params Start
PUSHR d2; UsrFunc[int CenterX(FFC)] Params End
CALLFUNC 0.0401; UsrFunc[int CenterX(FFC)] Call
POP d4
PUSHR d2
PUSHR d4
LOADD d2,3; UsrFunc[int CenterY(FFC)] Params Start
PUSHR d2; UsrFunc[int CenterY(FFC)] Params End
CALLFUNC 0.0424; UsrFunc[int CenterY(FFC)] Call
POP d4
PUSHR d2; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0458; UsrFunc[int ComboAt(int, int)] Call
POP d4
STORED d2,2
ALLOCATEMEMV d2,176
STORED d2,1
LOADD d2,0; for() #187 LoopTest
COMPAREV d2,176
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 206,==; for() #187 TestFail?
PUSHR d4; if() #559 Test AND for() #187 Body Start
LOADD d2,0; UsrFunc[bool ComboFI(int, int)] Params Start
PUSHR d2
PUSHV 67; UsrFunc[bool ComboFI(int, int)] Params End
CALLFUNC 0.0508; UsrFunc[bool ComboFI(int, int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 54,==; Test 'if'
SETV d2,-1; if() #559 Body Start
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
GOTO 202; continue 1; AND if() #559 Body End
PUSHR d4; if() #560 Test
LOADD d2,0; UsrFunc[int ComboX(int)] Params Start
PUSHR d2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 0.0447; UsrFunc[int ComboX(int)] Call
POP d4
PUSHR d2
PUSHR d4
LOADD d2,2; UsrFunc[int ComboX(int)] Params Start
PUSHR d2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 0.0447; UsrFunc[int ComboX(int)] Call
POP d4
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 80,==; Test 'if'
SETV d2,-1; if() #560 Body Start
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
GOTO 202; continue 1; AND if() #560 Body End
PUSHR d4; if() #561 Test
LOADD d2,0; UsrFunc[int ComboX(int)] Params Start
PUSHR d2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 0.0447; UsrFunc[int ComboX(int)] Call
POP d4
PUSHR d2
PUSHR d4
LOADD d2,2; UsrFunc[int ComboX(int)] Params Start
PUSHR d2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 0.0447; UsrFunc[int ComboX(int)] Call
POP d4
PUSHR d2
LOADD d2,5
MULTV d2,16
SETV d2,16
PUSHR d2
LOADD d2,5
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
POP d3
COMPARER d3,d2
SETCMP d2,I>=
COMPAREV d2,0
GOTOCMP 116,==; Test 'if'
SETV d2,-1; if() #561 Body Start
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
GOTO 202; continue 1; AND if() #561 Body End
PUSHR d4; if() #562 Test
LOADD d2,0; UsrFunc[int ComboY(int)] Params Start
PUSHR d2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 0.0453; UsrFunc[int ComboY(int)] Call
POP d4
PUSHR d2
PUSHR d4
LOADD d2,2; UsrFunc[int ComboY(int)] Params Start
PUSHR d2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 0.0453; UsrFunc[int ComboY(int)] Call
POP d4
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 142,==; Test 'if'
SETV d2,-1; if() #562 Body Start
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
GOTO 202; continue 1; AND if() #562 Body End
PUSHR d4; if() #563 Test
LOADD d2,0; UsrFunc[int ComboY(int)] Params Start
PUSHR d2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 0.0453; UsrFunc[int ComboY(int)] Call
POP d4
PUSHR d2
PUSHR d4
LOADD d2,2; UsrFunc[int ComboY(int)] Params Start
PUSHR d2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 0.0453; UsrFunc[int ComboY(int)] Call
POP d4
PUSHR d2
LOADD d2,4
MULTV d2,16
SETV d2,16
PUSHR d2
LOADD d2,4
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
POP d3
COMPARER d3,d2
SETCMP d2,I>=
COMPAREV d2,0
GOTOCMP 178,==; Test 'if'
SETV d2,-1; if() #563 Body Start
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
GOTO 202; continue 1; AND if() #563 Body End
LOADD d2,0
PUSHR d2
POP d0
SETR d2,COMBODD
PUSHR d2
LOADD d2,6
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,6
PUSHR d2
LOADD d2,0
PUSHR d2
POP d0
POP d2
SETR COMBODD,d2; for() #187 Body End
LOADD d2,0; for() #187 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 31; for() #187 End
PUSHARGSR d4,0.0002; if(true) #564 [Opt:AlwaysOn] AND while(true) #8 Body [Opt:AlwaysOn] Start AND UsrFunc[int ComboAt(int, int)] Params Start
CALLFUNC 0.0393; UsrFunc[int CenterLinkX()] Call
POP d4
PUSHR d2
PUSHR d4
CALLFUNC 0.0397; UsrFunc[int CenterLinkY()] Call
POP d4
PUSHR d2; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0458; UsrFunc[int ComboAt(int, int)] Call
POP d4
STORED d2,0
LOADD d2,1; if() #565 Test
PUSHR d2
LOADD d2,0
POP d0
READPODARRAYR d2,d2
COMPAREV d2,0
GOTOCMP 234,<
PUSHR d4
LOADD d2,0; UsrFunc[bool ComboFI(int, int)] Params Start
PUSHR d2
PUSHV 98; UsrFunc[bool ComboFI(int, int)] Params End
CALLFUNC 0.0508; UsrFunc[bool ComboFI(int, int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 234,!=
SETV d2,1
GOTO 235
SETV d2,0
COMPAREV d2,0
GOTOCMP 261,==; Test 'if'
SETR d2,INPUTPRESSA; if() #566 Test AND if() #565 Body Start
COMPAREV d2,0
GOTOCMP 245,!=
SETR d2,INPUTPRESSEX1
COMPAREV d2,0
GOTOCMP 245,!=
SETV d2,0
GOTO 246
SETV d2,1
COMPAREV d2,0
GOTOCMP 261,==; Test 'if'
SETV d2,16; InlineFunc[void Game->PlaySound(int)] Params AND if() #566 Body Start
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
LOADD d2,0
PUSHR d2
POP d0
SETR d2,COMBODD
ADDV d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
POP d0
POP d2
SETR COMBODD,d2; if() #566 Body End
PUSHR d4; if() #565 Body End AND if() #567 Test
PUSHV 53; UsrFunc[bool UsingItem(int)] Params
CALLFUNC 0.0544; UsrFunc[bool UsingItem(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 327,==; Test 'if'
STOREDV 0,0; for() #188 setup AND if() #567 Body Start
LOADD d2,0; for() #188 LoopTest
COMPAREV d2,176
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 327,==; for() #188 TestFail?
PUSHR d4; if() #568 Test AND for() #188 Body Start
LOADD d2,0; UsrFunc[bool ComboFI(int, int)] Params Start
PUSHR d2
PUSHV 14; UsrFunc[bool ComboFI(int, int)] Params End
CALLFUNC 0.0508; UsrFunc[bool ComboFI(int, int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 290,==
LOADD d2,1
PUSHR d2
LOADD d2,0
POP d0
READPODARRAYR d2,d2
COMPAREV d2,0
GOTOCMP 290,<
SETV d2,1
GOTO 291
SETV d2,0
COMPAREV d2,0
GOTOCMP 323,==; Test 'if'
PUSHV 4; InlineFunc[void Screen->FastCombo(int, int, int, int, int, int)] Params Start AND if() #568 Body Start
PUSHR d4
LOADD d2,0; UsrFunc[int ComboX(int)] Params Start
PUSHR d2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 0.0447; UsrFunc[int ComboX(int)] Call
POP d4
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int ComboY(int)] Params Start
PUSHR d2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 0.0453; UsrFunc[int ComboY(int)] Call
POP d4
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
POP d0
READPODARRAYR d2,d2
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,2
PUSHR d2
POP d0
PUSHR COMBOCD
PUSHV 128; InlineFunc[void Screen->FastCombo(int, int, int, int, int, int)] Params End
FASTCOMBO; InlineFunc[void Screen->FastCombo(int, int, int, int, int, int)] Body Start
POPARGS d5,0.0006; InlineFunc[void Screen->FastCombo(int, int, int, int, int, int)] Body End AND if() #568 Body End
LOADD d2,0; for() #188 Body End AND for() #188 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 268; for() #188 End
STOREDV 0,0; if() #567 Body End AND for() #189 setup
LOADD d2,0; for() #189 LoopTest
COMPAREV d2,176
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 389,==; for() #189 TestFail?
PUSHR d4; if() #569 Test AND for() #189 Body Start
LOADD d2,0; UsrFunc[bool ComboFI(int, int)] Params Start
PUSHR d2
PUSHV 67; UsrFunc[bool ComboFI(int, int)] Params End
CALLFUNC 0.0508; UsrFunc[bool ComboFI(int, int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 385,!=; Test 'if' AND continue 1; AND if() #569 Body
LOADD d2,1; if() #570 Test
PUSHR d2
LOADD d2,0
POP d0
READPODARRAYR d2,d2
COMPAREV d2,0
SETCMP d2,I>=
COMPAREV d2,0
GOTOCMP 369,==; Test 'if'
LOADD d2,0; if() #571 Test AND if() #570 Body Start
PUSHR d2
POP d0
SETR d2,COMBODD
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
POP d3
COMPARER d3,d2
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 389,!=; Test 'if' AND break 1; AND if() #571 Body
LOADD d2,0; if() #570 Body End AND if() #572 Test
COMPAREV d2,175
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 385,==; Test 'if'
SETV d2,27; InlineFunc[void Game->PlaySound(int)] Params AND if() #572 Body Start
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SECRETS; InlineFunc[void Screen->TriggerSecrets()] Body
SETV d2,1
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP d2
SETR SCREENSTATED,d2
QUIT; InlineFunc[void Quit()] Body AND if() #572 Body End
LOADD d2,0; for() #189 Body End AND for() #189 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 328; for() #189 End
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #8 Body [Opt:AlwaysOn] End
GOTO 206; while() #8 End
LOADD d3,1
DEALLOCATEMEMR d3; [Opt:NeverRet] AND void run(int, int, int) Body End
SETR d4,SP; Func[int CenterLinkX()] Body Start
SETR d2,LINKX; return Start
ADDV d2,8
RETURNFUNC; return End AND Func[int CenterLinkX()] Body End
SETR d4,SP; Func[int CenterLinkY()] Body Start
SETR d2,LINKY; return Start
ADDV d2,8
RETURNFUNC; return End AND Func[int CenterLinkY()] Body End
SETR d4,SP; Func[int CenterX(FFC)] Body Start
LOADD d2,0; return Start
PUSHR d2
POP REFFFC
SETR d2,X
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
POP d5; return End
RETURNFUNC; Func[int CenterX(FFC)] Body End
SETR d4,SP; Func[int CenterY(FFC)] Body Start
LOADD d2,0; return Start
PUSHR d2
POP REFFFC
SETR d2,Y
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
POP d5; return End
RETURNFUNC; Func[int CenterY(FFC)] Body End
SETR d4,SP; Func[int ComboX(int)] Body Start
LOADD d2,0; return Start
MODV d2,16
MULTV d2,16
POP d5; return End
RETURNFUNC; Func[int ComboX(int)] Body End
SETR d4,SP; Func[int ComboY(int)] Body Start
LOADD d2,0; return Start
ANDV d2,240
POP d5; return End
RETURNFUNC; Func[int ComboY(int)] Body End
SETR d4,SP; Func[int ComboAt(int, int)] Body Start
PUSHR d4
LOADD d2,1; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR d2
PUSHV 255
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0483; UsrFunc[int VBound(int, int, int)] Call
POP d4
STORED d2,1
PUSHR d4
LOADD d2,0; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR d2
PUSHV 175
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0483; UsrFunc[int VBound(int, int, int)] Call
POP d4
STORED d2,0; return Start
ANDV d2,240
PUSHR d2
LOADD d2,1
RSHIFTV d2,4
POP d3
ADDR d2,d3
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int ComboAt(int, int)] Body End
SETR d4,SP; Func[int VBound(int, int, int)] Body Start
LOADD d2,2; if() #133 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 495,==; Test 'if'
LOADD d2,0; if() #133 Body Start
STORED d2,2
GOTO 505; if() #133 Body End
LOADD d2,2; if() #355 Test AND if() #133 Else Start
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 505,==; Test 'if'
LOADD d2,1; if() #355 Body Start
STORED d2,2; if() #355 Body End
LOADD d2,2; if() #133 Else End AND return Start
POPARGS d5,0.0003; return End
RETURNFUNC; Func[int VBound(int, int, int)] Body End
SETR d4,SP; Func[bool ComboFI(int, int)] Body Start
LOADD d2,1; return Start
PUSHR d2
POP d0
SETR d2,COMBOFD
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
GOTOCMP 529,==
LOADD d2,1
PUSHR d2
POP d0
SETR d2,COMBOID
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
GOTOCMP 529,==
SETV d2,0
GOTO 530
SETV d2,1
POPARGS d5,0.0002; return End
RETURNFUNC; Func[bool ComboFI(int, int)] Body End
SETR d4,SP; Func[int GetEquipmentA()] Body Start
SETR d2,LINKITEMA; return Start
RETURNFUNC; return End AND Func[int GetEquipmentA()] Body End
SETR d4,SP; Func[int GetEquipmentB()] Body Start
SETR d2,LINKITEMB; return Start
RETURNFUNC; return End AND Func[int GetEquipmentB()] Body End
SETR d4,SP; Func[int GetEquipmentX()] Body Start
SETR d2,LINKITEMX; return Start
RETURNFUNC; return End AND Func[int GetEquipmentX()] Body End
SETR d4,SP; Func[int GetEquipmentY()] Body Start
SETR d2,LINKITEMY; return Start
RETURNFUNC; return End AND Func[int GetEquipmentY()] Body End
SETR d4,SP; Func[bool UsingItem(int)] Body Start
PUSHR d4; return Start
CALLFUNC 0.0532; UsrFunc[int GetEquipmentA()] Call
POP d4
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
GOTOCMP 556,!=
SETR d2,INPUTA
COMPAREV d2,0
GOTOCMP 591,!=
PUSHR d4
CALLFUNC 0.0535; UsrFunc[int GetEquipmentB()] Call
POP d4
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
GOTOCMP 567,!=
SETR d2,INPUTB
COMPAREV d2,0
GOTOCMP 591,!=
PUSHR d4
CALLFUNC 0.0538; UsrFunc[int GetEquipmentX()] Call
POP d4
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
GOTOCMP 578,!=
SETR d2,INPUTEX1
COMPAREV d2,0
GOTOCMP 591,!=
PUSHR d4
CALLFUNC 0.0541; UsrFunc[int GetEquipmentY()] Call
POP d4
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
GOTOCMP 589,!=
SETR d2,INPUTEX2
COMPAREV d2,0
GOTOCMP 591,!=
SETV d2,0
GOTO 592
SETV d2,1
POP d5; return End
RETURNFUNC; Func[bool UsingItem(int)] Body End


ALLOCATEGMEMV d2,4096; void run() Body Start
SETR gd1,d2
QUIT; void run() Body End