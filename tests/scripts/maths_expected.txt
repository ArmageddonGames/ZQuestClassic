Compiling 'maths.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
ZQ_BUFFER Line 12 @ Columns 40-48 - Warning C020: Constant 10000000 is too long and has been truncated.
ZQ_BUFFER Line 12 @ Columns 40-48 - Warning C020: Constant 10000000 is too long and has been truncated.
ZQ_BUFFER Line 12 @ Columns 40-48 - Warning C020: Constant 10000000 is too long and has been truncated.
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

PUSHR REFFFC; void run() Body Start
PUSHARGSV 0,0.0002
SETR D4,SP
STOREDV 1,1
STOREDV -10,0; for() #1 setup AND while(true) #1 Body [Opt:AlwaysOn] Start
LOADD D2,0; for() #1 LoopTest
COMPAREV D2,10
SETCMP D2,I<=
COMPAREV D2,0
GOTOCMP 36,==; for() #1 TestFail?
PUSHR D4; for() #1 Body Start
LOADD D2,1; UsrFunc[void doMaths(bool, int)] Params Start
PUSHR D2
LOADD D2,0
PUSHR D2; UsrFunc[void doMaths(bool, int)] Params End
CALLFUNC 0.0040; UsrFunc[void doMaths(bool, int)] Call
PEEK D4
LOADD D2,1; UsrFunc[void doMaths(bool, int)] Params Start
PUSHR D2
LOADD D2,0
MULTV D2,10000
PUSHR D2; UsrFunc[void doMaths(bool, int)] Params End
CALLFUNC 0.0040; UsrFunc[void doMaths(bool, int)] Call
PEEK D4
LOADD D2,1; UsrFunc[void doMaths(bool, int)] Params Start
PUSHR D2
LOADD D2,0
MULTV D2,100000
PUSHR D2; UsrFunc[void doMaths(bool, int)] Params End
CALLFUNC 0.0040; UsrFunc[void doMaths(bool, int)] Call
POP D4; for() #1 Body End
LOADD D2,0; for() #1 LoopIncrement
ADDV D2,1
STORED D2,0
GOTO 6; for() #1 End
WAITFRAME; InlineFunc[void Waitframe()] Body
SETV D2,0
STORED D2,1; while(true) #1 Body [Opt:AlwaysOn] End
GOTO 5; while() #1 End AND [Opt:NeverRet] AND void run() Body End
PUSHARGSV 0,0.0020; Func[void doMaths(bool, int)] Body Start
SETR D4,SP
ALLOCATEMEMV D2,15
STORED D2,19
WRITEPODSTRING D2,"maths for: %d\n"
PUSHR D4
LOADD D2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR D2
LOADD D2,19
PUSHR D2
LOADD D2,20
PUSHR D2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP D4
LOADD D3,19
DEALLOCATEMEMR D3
ALLOCATEMEMV D2,12
STORED D2,18
WRITEPODSTRING D2,"10 / i = %d"
PUSHR D4
LOADD D2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR D2
LOADD D2,18
PUSHR D2
LOADD D2,20
DIVV2 10,D2
SETV D2,10
PUSHR D2
LOADD D2,20
POP D3
DIVR D3,D2
PUSHR D3; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP D4
LOADD D3,18
DEALLOCATEMEMR D3
ALLOCATEMEMV D2,13
STORED D2,17
WRITEPODSTRING D2,"10 %% i = %d"
PUSHR D4
LOADD D2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR D2
LOADD D2,17
PUSHR D2
LOADD D2,20
MODV2 10,D2
SETV D2,10
PUSHR D2
LOADD D2,20
POP D3
MODR D3,D2
PUSHR D3; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP D4
LOADD D3,17
DEALLOCATEMEMR D3
ALLOCATEMEMV D2,12
STORED D2,16
WRITEPODSTRING D2,"i / 10 = %d"
PUSHR D4
LOADD D2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR D2
LOADD D2,16
PUSHR D2
LOADD D2,20
DIVV D2,10
PUSHR D2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP D4
LOADD D3,16
DEALLOCATEMEMR D3
ALLOCATEMEMV D2,13
STORED D2,15
WRITEPODSTRING D2,"i %% 10 = %d"
PUSHR D4
LOADD D2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR D2
LOADD D2,15
PUSHR D2
LOADD D2,20
MODV D2,10
PUSHR D2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP D4
LOADD D3,15
DEALLOCATEMEMR D3
ALLOCATEMEMV D2,12
STORED D2,14
WRITEPODSTRING D2,"i + i = %d\n"
PUSHR D4
LOADD D2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR D2
LOADD D2,14
PUSHR D2
LOADD D2,20
PUSHR D2
LOADD D2,20
POP D3
ADDR D2,D3
PUSHR D2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP D4
LOADD D3,14
DEALLOCATEMEMR D3
ALLOCATEMEMV D2,12
STORED D2,13
WRITEPODSTRING D2,"i - i = %d\n"
PUSHR D4
LOADD D2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR D2
LOADD D2,13
PUSHR D2
LOADD D2,20
PUSHR D2
LOADD D2,20
POP D3
SUBR D3,D2
PUSHR D3; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP D4
LOADD D3,13
DEALLOCATEMEMR D3
ALLOCATEMEMV D2,12
STORED D2,12
WRITEPODSTRING D2,"i * i = %d\n"
PUSHR D4
LOADD D2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR D2
LOADD D2,12
PUSHR D2
LOADD D2,20
PUSHR D2
LOADD D2,20
POP D3
MULTR D2,D3
PUSHR D2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP D4
LOADD D3,12
DEALLOCATEMEMR D3
ALLOCATEMEMV D2,13
STORED D2,11
WRITEPODSTRING D2,"i * -i = %d\n"
PUSHR D4
LOADD D2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR D2
LOADD D2,11
PUSHR D2
LOADD D2,20
PUSHR D2
LOADD D2,20
SUBV2 0,D2
POP D3
MULTR D2,D3
PUSHR D2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP D4
LOADD D3,11
DEALLOCATEMEMR D3
ALLOCATEMEMV D2,12
STORED D2,10
WRITEPODSTRING D2,"i / i = %d\n"
PUSHR D4
LOADD D2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR D2
LOADD D2,10
PUSHR D2
LOADD D2,20
PUSHR D2
LOADD D2,20
POP D3
DIVR D3,D2
PUSHR D3; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP D4
LOADD D3,10
DEALLOCATEMEMR D3
ALLOCATEMEMV D2,13
STORED D2,9
WRITEPODSTRING D2,"i / -i = %d\n"
PUSHR D4
LOADD D2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR D2
LOADD D2,9
PUSHR D2
LOADD D2,20
PUSHR D2
LOADD D2,20
SUBV2 0,D2
POP D3
DIVR D3,D2
PUSHR D3; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP D4
LOADD D3,9
DEALLOCATEMEMR D3
ALLOCATEMEMV D2,20
STORED D2,8
WRITEPODSTRING D2,"i %% (i - 50) = %d\n"
PUSHR D4
LOADD D2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR D2
LOADD D2,8
PUSHR D2
LOADD D2,20
PUSHR D2
LOADD D2,20
SUBV D2,50
POP D3
MODR D3,D2
PUSHR D3; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP D4
LOADD D3,8
DEALLOCATEMEMR D3
ALLOCATEMEMV D2,17
STORED D2,7
WRITEPODSTRING D2,"i + 100000 = %d\n"
PUSHR D4
LOADD D2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR D2
LOADD D2,7
PUSHR D2
LOADD D2,20
ADDV D2,100000
PUSHR D2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP D4
LOADD D3,7
DEALLOCATEMEMR D3
ALLOCATEMEMV D2,17
STORED D2,6
WRITEPODSTRING D2,"i - 100000 = %d\n"
PUSHR D4
LOADD D2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR D2
LOADD D2,6
PUSHR D2
LOADD D2,20
SUBV D2,100000
PUSHR D2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP D4
LOADD D3,6
DEALLOCATEMEMR D3
ALLOCATEMEMV D2,17
STORED D2,5
WRITEPODSTRING D2,"i * 100000 = %d\n"
PUSHR D4
LOADD D2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR D2
LOADD D2,5
PUSHR D2
LOADD D2,20
MULTV D2,100000
PUSHR D2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP D4
LOADD D3,5
DEALLOCATEMEMR D3
ALLOCATEMEMV D2,18
STORED D2,4
WRITEPODSTRING D2,"i * -100000 = %d\n"
PUSHR D4
LOADD D2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR D2
LOADD D2,4
PUSHR D2
LOADD D2,20
MULTV D2,-100000
PUSHR D2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP D4
LOADD D3,4
DEALLOCATEMEMR D3
ALLOCATEMEMV D2,17
STORED D2,3
WRITEPODSTRING D2,"i / 100000 = %d\n"
PUSHR D4
LOADD D2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR D2
LOADD D2,3
PUSHR D2
LOADD D2,20
DIVV D2,100000
PUSHR D2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP D4
LOADD D3,3
DEALLOCATEMEMR D3
ALLOCATEMEMV D2,18
STORED D2,2
WRITEPODSTRING D2,"i / -100000 = %d\n"
PUSHR D4
LOADD D2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR D2
LOADD D2,2
PUSHR D2
LOADD D2,20
DIVV D2,-100000
PUSHR D2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP D4
LOADD D3,2
DEALLOCATEMEMR D3
ALLOCATEMEMV D2,14
STORED D2,1
WRITEPODSTRING D2,"i %% 50 = %d\n"
PUSHR D4
LOADD D2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR D2
LOADD D2,1
PUSHR D2
LOADD D2,20
MODV D2,50
PUSHR D2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP D4
LOADD D3,1
DEALLOCATEMEMR D3
ALLOCATEMEMV D2,15
STORED D2,0
WRITEPODSTRING D2,"i %% -50 = %d\n"
PUSHR D4
LOADD D2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR D2
LOADD D2,0
PUSHR D2
LOADD D2,20
MODV D2,-50
PUSHR D2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP D4
LOADD D3,0
DEALLOCATEMEMR D3
POPARGS D5,0.0022
RETURNFUNC; Func[void doMaths(bool, int)] Body End
SETR D4,SP; Func[void maybePrint(bool, int, int)] Body Start
LOADD D2,2; if() #1 Test
COMPAREV D2,0
GOTOCMP 387,==; Test 'if'
LOADD D2,1; InlineFunc[void printf(char32)] Params Start AND if() #1 Body Start
PUSHR D2
LOADD D2,0
PUSHVARGR D2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP D5; InlineFunc[void printf(char32)] Body End AND if() #1 Body End
POPARGS D5,0.0003
RETURNFUNC; Func[void maybePrint(bool, int, int)] Body End


QUIT; void run() Body