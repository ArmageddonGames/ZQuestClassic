stderr:

Compiling 'sprites.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Debug: could not resolve symbol "player->ScriptCSet"
Debug: could not resolve symbol "fcc"
Debug: could not resolve symbol "fcc"
Success!
Compile finished with exit code '0' (success)

stdout:

{
  "success": true,
  "diagnostics": [],
  "metadata": {
    "currentFileSymbols": 43,
    "symbols": 103,
    "identifiers": 382,
    "elided": true
  }
}

zasm:

PUSHARGSV 0 0.0006; void run() Body Start
SETR D4 SP2
ALLOCATEMEMV D2 100 0
STORE D2 0.0004
LOAD D2 0.0004; InlineFunc[void Game::GetSaveName(char32[])] Params
GETSAVENAME D2; InlineFunc[void Game::GetSaveName(char32[])] Body
ALLOCATEMEMV D2 19 0
STORE D2 0.0003
WRITEPODSTRING D2 "[Test] Running %s\n"
LOAD D2 0.0003; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D2 0.0004; InlineFunc[int Game::GetGenericScript(char32[])] Params
GETGENERICSCRIPT D2; InlineFunc[int Game::GetGenericScript(char32[])] Body
STORE D2 0.0002
LOAD D2 0.0002; if() #448 Test
COMPAREV D2 -1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36 ==; Test 'if'
ALLOCATEMEMV D2 53 0; if() #448 Body Start
STORE D2 0.0001
WRITEPODSTRING D2 "[Test] failed to start - could not find test script\n"
LOAD D2 0.0001; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0001
DEALLOCATEMEMR D3
GAMEEXIT; InlineFunc[void Game::Exit()] Body AND if() #448 Body End
LOAD D2 0.0002; InlineFunc[genericdata Game::LoadGenericData(int)] Params
LOADGENERICDATA D2; InlineFunc[genericdata Game::LoadGenericData(int)] Body Start
SETR D2 REFGENERICDATA; InlineFunc[genericdata Game::LoadGenericData(int)] Body End
STORE D2 0.0001
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFGENERICDATA
SETR GENDATARUNNING D2
LOAD D2 0.0001; while() #2 Test
PUSHR D2
POP REFGENERICDATA
SETR D2 GENDATARUNNING
COMPAREV D2 0
GOTOCMP 58 ==; Test 'while'
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #2 Body
GOTO 50; while() #2 End
ALLOCATEMEMV D2 13 0
STORE D2 0
WRITEPODSTRING D2 "[Test] done\n"
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3
GAMEEXIT; InlineFunc[void Game::Exit()] Body
LOAD D3 0.0004
DEALLOCATEMEMR D3; [Opt:NeverRet] AND void run() Body End


PUSHR REFGENERICDATA; void run() Body Start
PUSHARGSV 0 0.0021
SETR D4 SP2
PUSHR D4
PUSHV 5; UsrFunc[void Init(int, int)] Params Start
PUSHV 15; UsrFunc[void Init(int, int)] Params End
CALLFUNC 0.0971; UsrFunc[void Init(int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body
SETV D2 28; InlineFunc[itemsprite screendata::CreateItem(int)] Params
CREATEITEMR D2; InlineFunc[itemsprite screendata::CreateItem(int)] Body Start
SETR D2 REFITEM; InlineFunc[itemsprite screendata::CreateItem(int)] Body End
STORE D2 0.0020
ALLOCATEMEMV D2 12 0
STORE D2 0.0019
WRITEPODSTRING D2 "item not ok"
PUSHR D4
LOAD D2 0.0020; UsrFunc[void Assert(itemsprite, char32[])] Params Start
PUSHR D2
LOAD D2 0.0019
PUSHR D2; UsrFunc[void Assert(itemsprite, char32[])] Params End
CALLFUNC 0.1283; UsrFunc[void Assert(itemsprite, char32[])] Call
POP D4
LOAD D3 0.0019
DEALLOCATEMEMR D3
LOAD D2 0.0020
STORE D2 0.0018
ALLOCATEMEMV D2 16 0
STORE D2 0.0017
WRITEPODSTRING D2 "a_sprite not ok"
PUSHR D4
LOAD D2 0.0018; UsrFunc[void Assert(sprite, char32[])] Params Start
PUSHR D2
LOAD D2 0.0017
PUSHR D2; UsrFunc[void Assert(sprite, char32[])] Params End
CALLFUNC 0.1292; UsrFunc[void Assert(sprite, char32[])] Call
POP D4
LOAD D3 0.0017
DEALLOCATEMEMR D3
PUSHR D4
LOAD D2 0.0020; UsrFunc[void AssertEqual(sprite, sprite)] Params Start
PUSHR D2
LOAD D2 0.0018
PUSHR D2; UsrFunc[void AssertEqual(sprite, sprite)] Params End
CALLFUNC 0.1301; UsrFunc[void AssertEqual(sprite, sprite)] Call
PEEK D4
LOAD D2 0.0020; UsrFunc[void print_it(itemsprite)] Params Start
PUSHR D2; UsrFunc[void print_it(itemsprite)] Params End
CALLFUNC 0.1258; UsrFunc[void print_it(itemsprite)] Call
PEEK D4
LOAD D2 0.0018; UsrFunc[void print_it(sprite)] Params Start
PUSHR D2; UsrFunc[void print_it(sprite)] Params End
CALLFUNC 0.1237; UsrFunc[void print_it(sprite)] Call
PEEK D4
PUSHV 0.0001; UsrFunc[void print_it(sprite)] Params
CALLFUNC 0.1237; UsrFunc[void print_it(sprite)] Call
POP D4
SETV D2 1; InlineFunc[ffc screendata::LoadFFC(int)] Params
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0016
SETV D2 161
PUSHR D2
LOAD D2 0.0016
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
SETV D2 31; InlineFunc[lweapon screendata::CreateLWeapon(int)] Params
CREATELWEAPONR D2; InlineFunc[lweapon screendata::CreateLWeapon(int)] Body Start
SETR D2 REFLWPN; InlineFunc[lweapon screendata::CreateLWeapon(int)] Body End
STORE D2 0.0015
SETV D2 65
PUSHR D2
LOAD D2 0.0015
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_SCRIPT_TILE D2
SETV D2 31; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0.0014
SETV D2 65
PUSHR D2
LOAD D2 0.0014
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_SCRIPT_TILE D2
SETV D2 37; InlineFunc[npc screendata::CreateNPC(int)] Params
CREATENPCR D2; InlineFunc[npc screendata::CreateNPC(int)] Body Start
SETR D2 REFNPC; InlineFunc[npc screendata::CreateNPC(int)] Body End
STORE D2 0.0013
SETV D2 0
PUSHR D2
LOAD D2 0.0013
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCSTEP D2
ALLOCATEMEMV D2 6 0
PUSHR D2
WRITEPODARRAY D2 {0,0,0.0001,0,0,0}
SETR D0 D2
PUSHR D0
LOAD D2 0.0020
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
LOAD D2 0.0016
POP D0
WRITEPODARRAYVR 1 D2
PUSHR D0
LOAD D2 0.0015
POP D0
WRITEPODARRAYVR 3 D2
PUSHR D0
LOAD D2 0.0014
POP D0
WRITEPODARRAYVR 4 D2
PUSHR D0
LOAD D2 0.0013
POP D0
WRITEPODARRAYVR 5 D2
POP D2
STORE D2 0.0011
PUSHR D4
LOAD D2 0.0020; UsrFunc[void AssertEqual(sprite, sprite)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[void AssertEqual(sprite, sprite)] Params End
CALLFUNC 0.1301; UsrFunc[void AssertEqual(sprite, sprite)] Call
PEEK D4
LOAD D2 0.0016; UsrFunc[void AssertEqual(sprite, sprite)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2; UsrFunc[void AssertEqual(sprite, sprite)] Params End
CALLFUNC 0.1301; UsrFunc[void AssertEqual(sprite, sprite)] Call
PEEK D4
PUSHV 0.0001; UsrFunc[void AssertEqual(sprite, sprite)] Params Start
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2; UsrFunc[void AssertEqual(sprite, sprite)] Params End
CALLFUNC 0.1301; UsrFunc[void AssertEqual(sprite, sprite)] Call
PEEK D4
LOAD D2 0.0015; UsrFunc[void AssertEqual(sprite, sprite)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 3
PUSHR D2; UsrFunc[void AssertEqual(sprite, sprite)] Params End
CALLFUNC 0.1301; UsrFunc[void AssertEqual(sprite, sprite)] Call
PEEK D4
LOAD D2 0.0014; UsrFunc[void AssertEqual(sprite, sprite)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 4
PUSHR D2; UsrFunc[void AssertEqual(sprite, sprite)] Params End
CALLFUNC 0.1301; UsrFunc[void AssertEqual(sprite, sprite)] Call
PEEK D4
LOAD D2 0.0013; UsrFunc[void AssertEqual(sprite, sprite)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 5
PUSHR D2; UsrFunc[void AssertEqual(sprite, sprite)] Params End
CALLFUNC 0.1301; UsrFunc[void AssertEqual(sprite, sprite)] Call
POP D4
LOAD D2 0.0011; InlineFunc[int SizeOfArray(sprite[])] Params
ARRAYSIZE D2; InlineFunc[int SizeOfArray(sprite[])] Body
STORE D2 0.0010
STOREV 0 0.0009; for() #156 setup
LOAD D2 0.0009; for() #156 LoopTest
PUSHR D2
LOAD D2 0.0010
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 237 ==; for() #156 TestFail?
LOAD D2 0.0011; for() #156 Body Start
PUSHR D2
LOAD D2 0.0009
POP D0
READPODARRAYR D2 D2
STORE D2 0.0008
LOAD D2 0.0009
MULTV D2 230
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0008
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0009
MULTV D2 16
ADDV D2 32
PUSHR D2
LOAD D2 0.0008
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2; for() #156 Body End
LOAD D2 0.0009; for() #156 LoopIncrement
ADDV D2 1
STORE D2 0.0009
GOTO 193; for() #156 End
ALLOCATEMEMV D2 6 0
PUSHR D2
SETR D0 D2
PUSHR D0
LOAD D2 0.0020
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
LOAD D2 0.0016
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
POP D0
WRITEPODARRAYVR 1 D2
PUSHR D0
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
POP D0
WRITEPODARRAYVR 2 D2
PUSHR D0
LOAD D2 0.0015
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
POP D0
WRITEPODARRAYVR 3 D2
PUSHR D0
LOAD D2 0.0014
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
POP D0
WRITEPODARRAYVR 4 D2
PUSHR D0
LOAD D2 0.0013
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
POP D0
WRITEPODARRAYVR 5 D2
POP D2
STORE D2 0.0008
ALLOCATEMEMV D2 6 0
PUSHR D2
SETR D0 D2
PUSHR D0
LOAD D2 0.0020
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
LOAD D2 0.0016
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
POP D0
WRITEPODARRAYVR 1 D2
PUSHR D0
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
POP D0
WRITEPODARRAYVR 2 D2
PUSHR D0
LOAD D2 0.0015
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
POP D0
WRITEPODARRAYVR 3 D2
PUSHR D0
LOAD D2 0.0014
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
POP D0
WRITEPODARRAYVR 4 D2
PUSHR D0
LOAD D2 0.0013
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
POP D0
WRITEPODARRAYVR 5 D2
POP D2
STORE D2 0.0006
ALLOCATEMEMV D2 6 0
PUSHR D2
SETR D0 D2
PUSHR D0
LOAD D2 0.0020
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
LOAD D2 0.0016
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
POP D0
WRITEPODARRAYVR 1 D2
PUSHR D0
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
POP D0
WRITEPODARRAYVR 2 D2
PUSHR D0
LOAD D2 0.0015
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
POP D0
WRITEPODARRAYVR 3 D2
PUSHR D0
LOAD D2 0.0014
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
POP D0
WRITEPODARRAYVR 4 D2
PUSHR D0
LOAD D2 0.0013
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
POP D0
WRITEPODARRAYVR 5 D2
POP D2
STORE D2 0.0004
STOREV 0 0.0003
LOAD D2 0.0003; while() #3 Test
COMPAREV D2 300
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 464 ==; Test 'while'
ALLOCATEMEMV D2 24 0; while() #3 Body Start
STORE D2 0.0002
WRITEPODSTRING D2 "x y rotation cset scale"
PUSHARGSV 0 0.0002; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHV 10
PUSHV 9
PUSHV 0
PUSHV 1
PUSHV 0
LOAD D2 0.0002
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D3 0.0002
DEALLOCATEMEMR D3
STOREV 0 0.0001; for() #157 setup
LOAD D2 0.0001; for() #157 LoopTest
PUSHR D2
LOAD D2 0.0010
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 459 ==; for() #157 TestFail?
LOAD D2 0.0011; for() #157 Body Start
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
STORE D2 0
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
PUSHR D4
LOAD D2 0; UsrFunc[void modify_sprite(sprite, int, int)] Params Start
PUSHR D2
PUSHV 16
LOAD D2 0.0003
PUSHR D2; UsrFunc[void modify_sprite(sprite, int, int)] Params End
CALLFUNC 0.1156; UsrFunc[void modify_sprite(sprite, int, int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void drawText(int, sprite)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[void drawText(int, sprite)] Params End
CALLFUNC 0.1004; UsrFunc[void drawText(int, sprite)] Call
POP D4; for() #157 Body End
LOAD D2 0.0001; for() #157 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 401; for() #157 End
LOAD D2 0.0003
ADDV D2 1
STORE D2 0.0003
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #3 Body End
GOTO 379; while() #3 End
STOREV 0 0.0002; for() #158 setup
LOAD D2 0.0002; for() #158 LoopTest
PUSHR D2
LOAD D2 0.0010
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 540 ==; for() #158 TestFail?
LOAD D2 0.0011; for() #158 Body Start
PUSHR D2
LOAD D2 0.0002
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0002
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_ROTATION D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_SCALE D2; for() #158 Body End
LOAD D2 0.0002; for() #158 LoopIncrement
ADDV D2 1
STORE D2 0.0002
GOTO 465; for() #158 End
SETV D2 0
STORE D2 0.0003
LOAD D2 0.0003; while() #4 Test
COMPAREV D2 300
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 623 ==; Test 'while'
ALLOCATEMEMV D2 24 0; while() #4 Body Start
STORE D2 0.0002
WRITEPODSTRING D2 "DrawXOffset DrawYOffset"
PUSHARGSV 0 0.0002; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHV 10
PUSHV 9
PUSHV 0
PUSHV 1
PUSHV 0
LOAD D2 0.0002
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D3 0.0002
DEALLOCATEMEMR D3
STOREV 0 0.0001; for() #159 setup
LOAD D2 0.0001; for() #159 LoopTest
PUSHR D2
LOAD D2 0.0010
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 618 ==; for() #159 TestFail?
LOAD D2 0.0011; for() #159 Body Start
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
STORE D2 0
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_SCALE D2
LOAD D2 0.0003
DIVV D2 20
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0.0003
DIVV D2 20
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void drawText(int, sprite)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[void drawText(int, sprite)] Params End
CALLFUNC 0.1004; UsrFunc[void drawText(int, sprite)] Call
POP D4; for() #159 Body End
LOAD D2 0.0001; for() #159 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 564; for() #159 End
LOAD D2 0.0003
ADDV D2 1
STORE D2 0.0003
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #4 Body End
GOTO 542; while() #4 End
STOREV 0 0.0002; for() #160 setup
LOAD D2 0.0002; for() #160 LoopTest
PUSHR D2
LOAD D2 0.0010
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 660 ==; for() #160 TestFail?
LOAD D2 0.0011; for() #160 Body Start
PUSHR D2
LOAD D2 0.0002
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2; for() #160 Body End
LOAD D2 0.0002; for() #160 LoopIncrement
ADDV D2 1
STORE D2 0.0002
GOTO 624; for() #160 End
SETV D2 0
STORE D2 0.0003
LOAD D2 0.0003; while() #5 Test
COMPAREV D2 300
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 744 ==; Test 'while'
ALLOCATEMEMV D2 22 0; while() #5 Body Start
STORE D2 0.0002
WRITEPODSTRING D2 "ScriptTile ScriptFlip"
PUSHARGSV 0 0.0002; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHV 10
PUSHV 9
PUSHV 0
PUSHV 1
PUSHV 0
LOAD D2 0.0002
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D3 0.0002
DEALLOCATEMEMR D3
STOREV 0 0.0001; for() #161 setup
LOAD D2 0.0001; for() #161 LoopTest
PUSHR D2
LOAD D2 0.0010
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 739 ==; for() #161 TestFail?
LOAD D2 0.0011; for() #161 Body Start
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
STORE D2 0
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_SCALE D2
LOAD D2 0.0003
DIVV D2 30
ADDV D2 100
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_SCRIPT_TILE D2
LOAD D2 0.0003
DIVV D2 30
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_SCRIPT_FLIP D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void drawText(int, sprite)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[void drawText(int, sprite)] Params End
CALLFUNC 0.1004; UsrFunc[void drawText(int, sprite)] Call
POP D4; for() #161 Body End
LOAD D2 0.0001; for() #161 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 684; for() #161 End
LOAD D2 0.0003
ADDV D2 1
STORE D2 0.0003
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #5 Body End
GOTO 662; while() #5 End
STOREV 0 0.0002; for() #162 setup
LOAD D2 0.0002; for() #162 LoopTest
PUSHR D2
LOAD D2 0.0010
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 781 ==; for() #162 TestFail?
LOAD D2 0.0011; for() #162 Body Start
PUSHR D2
LOAD D2 0.0002
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
SETV D2 -1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_SCRIPT_TILE D2
SETV D2 -1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_SCRIPT_FLIP D2; for() #162 Body End
LOAD D2 0.0002; for() #162 LoopIncrement
ADDV D2 1
STORE D2 0.0002
GOTO 745; for() #162 End
SETV D2 0
STORE D2 0.0003
LOAD D2 0.0003; while() #6 Test
COMPAREV D2 300
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 875 ==; Test 'while'
ALLOCATEMEMV D2 21 0; while() #6 Body Start
STORE D2 0.0002
WRITEPODSTRING D2 "TileWidth TileHeight"
PUSHARGSV 0 0.0002; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHV 10
PUSHV 9
PUSHV 0
PUSHV 1
PUSHV 0
LOAD D2 0.0002
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D3 0.0002
DEALLOCATEMEMR D3
STOREV 0 0.0001; for() #163 setup
LOAD D2 0.0001; for() #163 LoopTest
PUSHR D2
LOAD D2 0.0010
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 870 ==; for() #163 TestFail?
LOAD D2 0.0011; for() #163 Body Start
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
STORE D2 0
SETV D2 26780
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_SCRIPT_TILE D2
SETV D2 3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_EXTEND D2
LOAD D2 0.0003
DIVV D2 30
ADDV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
LOAD D2 0.0003
DIVV D2 30
ADDV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void drawText(int, sprite)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[void drawText(int, sprite)] Params End
CALLFUNC 0.1004; UsrFunc[void drawText(int, sprite)] Call
POP D4; for() #163 Body End
LOAD D2 0.0001; for() #163 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 805; for() #163 End
LOAD D2 0.0003
ADDV D2 1
STORE D2 0.0003
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #6 Body End
GOTO 783; while() #6 End
STOREV 0 0.0002; for() #164 setup
LOAD D2 0.0002; for() #164 LoopTest
PUSHR D2
LOAD D2 0.0010
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 930 ==; for() #164 TestFail?
LOAD D2 0.0011; for() #164 Body Start
PUSHR D2
LOAD D2 0.0002
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_EXTEND D2
SETV D2 -1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_SCRIPT_TILE D2
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2; for() #164 Body End
LOAD D2 0.0002; for() #164 LoopIncrement
ADDV D2 1
STORE D2 0.0002
GOTO 876; for() #164 End
LOAD D3 0.0004
DEALLOCATEMEMR D3
LOAD D3 0.0006
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
LOAD D3 0.0011
DEALLOCATEMEMR D3
POPARGS D5 0.0022
QUIT; void run() Body End
PUSHV 0; Func[void Fail(char32[])] Body Start
SETR D4 SP2
LOAD D2 0.0001; InlineFunc[int strlen(char32[])] Params Start AND if() #160 Test
SETR D3 D2; InlineFunc[int strlen(char32[])] Params End
STRINGLENGTH D2 D3; InlineFunc[int strlen(char32[])] Body
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 961 ==; Test 'if'
ALLOCATEMEMV D2 24 0; if() #160 Body Start
STORE D2 0
WRITEPODSTRING D2 "[Test] failed test: %s\n"
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 970; if() #160 Body End
ALLOCATEMEMV D2 20 0; if() #160 Else Start
STORE D2 0
WRITEPODSTRING D2 "[Test] failed test\n"
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3; if() #160 Else End
GAMEEXIT; InlineFunc[void Game::Exit()] Body AND [Opt:NeverRet] AND Func[void Fail(char32[])] Body End
PUSHV 0; Func[void Init(int, int)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 35 0
STORE D2 0
WRITEPODSTRING D2 "[Test] started: dmap %d screen %d\n"
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHVARGR D2
LOAD D2 0.0001
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D2 0.0002; if() #447 Test
COMPAREV D2 5
GOTOCMP 994 !=
LOAD D2 0.0001
COMPAREV D2 15
GOTOCMP 994 !=
SETV D2 0
GOTO 995
SETV D2 1
COMPAREV D2 0
GOTOCMP 1002 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[void player::Warp(int, int)] Params Start AND if() #447 Body Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[void player::Warp(int, int)] Params End
POP D3; InlineFunc[void player::Warp(int, int)] Body Start
WARPR D3 D2; InlineFunc[void player::Warp(int, int)] Body End AND if() #447 Body End
POPARGS D5 0.0003
RETURNFUNC; Func[void Init(int, int)] Body End
SETR D4 SP2; Func[void drawText(int, sprite)] Body Start
LOAD D2 0.0001; if() #161 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1030 ==; Test 'if'
PUSHV 0; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start AND if() #161 Body Start
LOAD D2 0
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
SUBV D2 10
PUSHR D2
PUSHV 9
PUSHV 0
PUSHV 1
PUSHV 0
PUSHR GD1
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
GOTO 1154; if() #161 Body End
LOAD D2 0.0001; if() #162 Test AND if() #161 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1055 ==; Test 'if'
PUSHV 0; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start AND if() #162 Body Start
LOAD D2 0
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
SUBV D2 10
PUSHR D2
PUSHV 9
PUSHV 0
PUSHV 1
PUSHV 0
PUSHR GD2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
GOTO 1154; if() #162 Body End
LOAD D2 0.0001; if() #163 Test AND if() #162 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1080 ==; Test 'if'
PUSHV 0; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start AND if() #163 Body Start
LOAD D2 0
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
SUBV D2 10
PUSHR D2
PUSHV 9
PUSHV 0
PUSHV 1
PUSHV 0
PUSHR GD3
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
GOTO 1154; if() #163 Body End
LOAD D2 0.0001; if() #164 Test AND if() #163 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1105 ==; Test 'if'
PUSHV 0; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start AND if() #164 Body Start
LOAD D2 0
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
SUBV D2 10
PUSHR D2
PUSHV 9
PUSHV 0
PUSHV 1
PUSHV 0
PUSHR GD4
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
GOTO 1154; if() #164 Body End
LOAD D2 0.0001; if() #165 Test AND if() #164 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1130 ==; Test 'if'
PUSHV 0; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start AND if() #165 Body Start
LOAD D2 0
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
SUBV D2 10
PUSHR D2
PUSHV 9
PUSHV 0
PUSHV 1
PUSHV 0
PUSHR GD5
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
GOTO 1154; if() #165 Body End
LOAD D2 0.0001; if() #449 Test AND if() #165 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1154 ==; Test 'if'
PUSHV 0; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start AND if() #449 Body Start
LOAD D2 0
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
SUBV D2 10
PUSHR D2
PUSHV 9
PUSHV 0
PUSHV 1
PUSHV 0
PUSHR GD6
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End AND if() #449 Body End
POPARGS D5 0.0002; if() #165 Else End AND if() #164 Else End AND if() #163 Else End AND if() #162 Else End AND if() #161 Else End
RETURNFUNC; Func[void drawText(int, sprite)] Body End
PUSHV 0; Func[void modify_sprite(sprite, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0001
MULTV D2 3
STORE D2 0
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0; InlineFunc[int Cos(int)] Params Start
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0; InlineFunc[int Sin(int)] Params Start
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_ROTATION D2
LOAD D2 0.0001
DIVV D2 10
MODV D2 16
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
LOAD D2 0.0001
DIVV D2 60
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_SCALE D2
POPARGS D5 0.0004
RETURNFUNC; Func[void modify_sprite(sprite, int, int)] Body End
PUSHV 0; Func[void print_it(sprite)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 15 0
STORE D2 0
WRITEPODSTRING D2 "sprite: %d %d\n"
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHVARGR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHVARGR SPRITE_Y; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3
POPARGS D5 0.0002
RETURNFUNC; Func[void print_it(sprite)] Body End
PUSHV 0; Func[void print_it(itemsprite)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 22 0
STORE D2 0
WRITEPODSTRING D2 "itemsprite: %d %d %d\n"
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFITEM
PUSHVARGR ITEMID
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHVARGR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHVARGR SPRITE_Y; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3
POPARGS D5 0.0002
RETURNFUNC; Func[void print_it(itemsprite)] Body End
SETR D4 SP2; Func[void Assert(itemsprite, char32[])] Body Start
LOAD D2 0.0001; unless() #450 Test
COMPAREV D2 0
GOTOCMP 1290 !=; Test 'unless'
LOAD D2 0; UsrFunc[void Fail(char32[])] Params Start AND unless() #450 Body Start
PUSHR D2; UsrFunc[void Fail(char32[])] Params End
CALLFUNC 0.0940; UsrFunc[void Fail(char32[])] Call AND [Opt:NeverRet] AND unless() #450 Body End
POPARGS D5 0.0002
RETURNFUNC; Func[void Assert(itemsprite, char32[])] Body End
SETR D4 SP2; Func[void Assert(sprite, char32[])] Body Start
LOAD D2 0.0001; unless() #451 Test
COMPAREV D2 0
GOTOCMP 1299 !=; Test 'unless'
LOAD D2 0; UsrFunc[void Fail(char32[])] Params Start AND unless() #451 Body Start
PUSHR D2; UsrFunc[void Fail(char32[])] Params End
CALLFUNC 0.0940; UsrFunc[void Fail(char32[])] Call AND [Opt:NeverRet] AND unless() #451 Body End
POPARGS D5 0.0002
RETURNFUNC; Func[void Assert(sprite, char32[])] Body End
PUSHV 0; Func[void AssertEqual(sprite, sprite)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #452 Test
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1325 ==; Test 'if'
ALLOCATEMEMV D2 49 0; if() #452 Body Start
STORE D2 0
WRITEPODSTRING D2 "[Test] failed assertion: expected %d but got %d\n"
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHVARGR D2
LOAD D2 0.0002
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3
GAMEEXIT; InlineFunc[void Game::Exit()] Body AND if() #452 Body End
POPARGS D5 0.0003
RETURNFUNC; Func[void AssertEqual(sprite, sprite)] Body End


ALLOCATEGMEMV D2 5 0; void run() Body Start
WRITEPODSTRING D2 "ewpn"
SETR GD5 D2
ALLOCATEGMEMV D2 4 0
WRITEPODSTRING D2 "ffc"
SETR GD2 D2
ALLOCATEGMEMV D2 5 0
WRITEPODSTRING D2 "item"
SETR GD1 D2
ALLOCATEGMEMV D2 5 0
WRITEPODSTRING D2 "lwpn"
SETR GD4 D2
ALLOCATEGMEMV D2 4 0
WRITEPODSTRING D2 "npc"
SETR GD6 D2
ALLOCATEGMEMV D2 7 0
WRITEPODSTRING D2 "player"
SETR GD3 D2
ALLOCATEGMEMV D2 5 0
WRITEPODSTRING D2 "item"
ALLOCATEGMEMV D2 4 0
WRITEPODSTRING D2 "ffc"
ALLOCATEGMEMV D2 7 0
WRITEPODSTRING D2 "player"
ALLOCATEGMEMV D2 5 0
WRITEPODSTRING D2 "lwpn"
ALLOCATEGMEMV D2 5 0
WRITEPODSTRING D2 "ewpn"
ALLOCATEGMEMV D2 4 0
WRITEPODSTRING D2 "npc"
QUIT; void run() Body End
