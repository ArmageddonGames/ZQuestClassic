Compiling 'armos.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Generating object code
Pass 6: Assembling
Success!
Compile finished with exit code '0' (success)

PUSHR d0; void run(int) Params
PUSHR REFFFC; void run(int) Body Start
PUSHARGSR d2,0.0003
SETR d4,SP
SETV d2,0
STORED d2,2
SETV d2,0
STORED d2,1
SETV d2,0
STORED d2,0
PUSHR d4
PUSHV 0.0018; UsrFunc[NPC Ghost_InitAutoGhost(FFC, int)] Return Addr
LOADD d2,3; UsrFunc[NPC Ghost_InitAutoGhost(FFC, int)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[NPC Ghost_InitAutoGhost(FFC, int)] Params End
GOTO 4497; UsrFunc[NPC Ghost_InitAutoGhost(FFC, int)] Call
POP d4
STORED d2,2
PUSHR d4
PUSHV 0.0024; UsrFunc[void Ghost_SetFlag(int)] Return Addr
PUSHV 89; UsrFunc[void Ghost_SetFlag(int)] Params
GOTO 3369; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK d4
PUSHV 0.0028; UsrFunc[void Ghost_SetFlag(int)] Return Addr
PUSHV 3; UsrFunc[void Ghost_SetFlag(int)] Params
GOTO 3369; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK d4
PUSHV 0.0032; UsrFunc[void Ghost_SetFlag(int)] Return Addr
PUSHV 16384; UsrFunc[void Ghost_SetFlag(int)] Params
GOTO 3369; UsrFunc[void Ghost_SetFlag(int)] Call
POP d4
LOADD d2,2; InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
PUSHR d4
PUSHV 0.0048; UsrFunc[void SpawnAnimation(FFC, NPC)] Return Addr
LOADD d2,3; UsrFunc[void SpawnAnimation(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[void SpawnAnimation(FFC, NPC)] Params End
GOTO 6087; UsrFunc[void SpawnAnimation(FFC, NPC)] Call
POP d4
LOADD d2,2
PUSHR d2
POP REFNPC
SETR d2,NPCSTEP
DIVV d2,100
STORED d2,1
LOADD d2,2
PUSHR d2
SETV d2,1
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
STORED d2,0
SETR d2,gd4; if() #12291 Test AND while(true) #12289 Body [Opt:AlwaysOn] Start
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 72
SETR d2,gd6
COMPAREV d2,0
SETLESSI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 80; Test 'if'
SETV d2,1.5000; if() #12291 Body Start
SETR gd6,d2
LOADD d2,0; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body AND if() #12291 Body End
PUSHR d4
PUSHV 0.0086; UsrFunc[void Ghost_MoveTowardLink(int, int)] Return Addr
LOADD d2,1; UsrFunc[void Ghost_MoveTowardLink(int, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void Ghost_MoveTowardLink(int, int)] Params End
GOTO 4671; UsrFunc[void Ghost_MoveTowardLink(int, int)] Call
PEEK d4
PUSHV 0.0094; UsrFunc[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Return Addr
LOADD d2,3; UsrFunc[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
PUSHARGSV 1,0.0002; UsrFunc[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Params End
GOTO 4744; UsrFunc[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Call
POP d4; while(true) #12289 Body [Opt:AlwaysOn] End
GOTO 63; while() #12289 End
POPARGS d5,0.0005
QUIT; void run(int) Body End
SETR d4,SP; Func[int Angle(int, int, int, int)] Body Start
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR d2
LOADD d2,3
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
SETR d3,d2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
GOTO 116; return End
POPARGS d5,0.0004
RETURN; Func[int Angle(int, int, int, int)] Body End
SETR d4,SP; Func[int AngleDir8(int)] Body Start
LOADD d2,0; if() #3586 Test
COMPAREV d2,157.5000
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 130
LOADD d2,0
COMPAREV d2,112.5000
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 136; Test 'if'
SETV d2,6; return Start AND if() #3586 Body Start
GOTO 240; return End AND if() #3586 Body End
LOADD d2,0; if() #3589 Test AND if() #3586 Else Start
COMPAREV d2,112.5000
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 147
LOADD d2,0
COMPAREV d2,67.5000
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 153; Test 'if'
SETV d2,1; return Start AND if() #3589 Body Start
GOTO 240; return End AND if() #3589 Body End
LOADD d2,0; if() #3592 Test AND if() #3589 Else Start
COMPAREV d2,67.5000
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 164
LOADD d2,0
COMPAREV d2,22.5000
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 170; Test 'if'
SETV d2,7; return Start AND if() #3592 Body Start
GOTO 240; return End AND if() #3592 Body End
LOADD d2,0; if() #3595 Test AND if() #3592 Else Start
COMPAREV d2,22.5000
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 181
LOADD d2,0
COMPAREV d2,-22.5000
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 187; Test 'if'
SETV d2,3; return Start AND if() #3595 Body Start
GOTO 240; return End AND if() #3595 Body End
LOADD d2,0; if() #3598 Test AND if() #3595 Else Start
COMPAREV d2,-22.5000
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 198
LOADD d2,0
COMPAREV d2,-67.5000
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 204; Test 'if'
SETV d2,5; return Start AND if() #3598 Body Start
GOTO 240; return End AND if() #3598 Body End
LOADD d2,0; if() #3601 Test AND if() #3598 Else Start
COMPAREV d2,-67.5000
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 215
LOADD d2,0
COMPAREV d2,-112.5000
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 221; Test 'if'
SETV d2,0; return Start AND if() #3601 Body Start
GOTO 240; return End AND if() #3601 Body End
LOADD d2,0; if() #3604 Test AND if() #3601 Else Start
COMPAREV d2,-112.5000
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 232
LOADD d2,0
COMPAREV d2,-157.5000
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 238; Test 'if'
SETV d2,4; return Start AND if() #3604 Body Start
GOTO 240; return End AND if() #3604 Body End
SETV d2,2; return Start AND if() #3604 Else Start
GOTO 240; return End AND if() #3604 Else End
POPARGS d5,0.0001; if() #3601 Else End AND if() #3598 Else End AND if() #3595 Else End AND if() #3592 Else End AND if() #3589 Else End AND if() #3586 Else End
RETURN; Func[int AngleDir8(int)] Body End
SETR d4,SP; Func[int Clamp(int, int, int)] Body Start
LOADD d2,2; if() #3915 Test
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 256; Test 'if'
LOADD d2,1; if() #3915 Body Start
STORED d2,2
GOTO 268; if() #3915 Body End
LOADD d2,2; if() #3917 Test AND if() #3915 Else Start
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 268; Test 'if'
LOADD d2,0; if() #3917 Body Start
STORED d2,2; if() #3917 Body End
LOADD d2,2; if() #3915 Else End AND return Start
GOTO 270; return End
POPARGS d5,0.0003
RETURN; Func[int Clamp(int, int, int)] Body End
SETR d4,SP; Func[bool ClockIsActive()] Body Start
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,6
COMPAREV d2,0
SETFALSEI d2
RETURN; Func[bool ClockIsActive()] Body End
SETR d4,SP; Func[int ComboAt(int, int)] Body Start
PUSHR d4
PUSHV 0.0288; UsrFunc[int VBound(int, int, int)] Return Addr
LOADD d2,1; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR d2
PUSHV 255
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
GOTO 309; UsrFunc[int VBound(int, int, int)] Call
POP d4
STORED d2,1
PUSHR d4
PUSHV 0.0297; UsrFunc[int VBound(int, int, int)] Return Addr
LOADD d2,0; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR d2
PUSHV 175
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
GOTO 309; UsrFunc[int VBound(int, int, int)] Call
POP d4
STORED d2,0
LOADD d2,0; return Start
ANDV d2,240
PUSHR d2
LOADD d2,1
RSHIFTV d2,4
POP d3
ADDR d2,d3
GOTO 307; return End
POPARGS d5,0.0002
RETURN; Func[int ComboAt(int, int)] Body End
SETR d4,SP; Func[int VBound(int, int, int)] Body Start
LOADD d2,2; if() #9596 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 323; Test 'if'
LOADD d2,0; if() #9596 Body Start
STORED d2,2
GOTO 335; if() #9596 Body End
LOADD d2,2; if() #9598 Test AND if() #9596 Else Start
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 335; Test 'if'
LOADD d2,1; if() #9598 Body Start
STORED d2,2; if() #9598 Body End
LOADD d2,2; if() #9596 Else End AND return Start
GOTO 337; return End
POPARGS d5,0.0003
RETURN; Func[int VBound(int, int, int)] Body End
PUSHR d2; Func[bool IsWater(int)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
POP d0
SETR d2,COMBOTD
STORED d2,0
LOADD d2,0; if() #6757 Test
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 353; Test 'if'
SETV d2,1; return Start AND if() #6757 Body Start
GOTO 384; return End AND if() #6757 Body End
LOADD d2,0; if() #6758 Test
COMPAREV d2,18
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 360; Test 'if'
SETV d2,1; return Start AND if() #6758 Body Start
GOTO 384; return End AND if() #6758 Body End
LOADD d2,0; if() #6759 Test
COMPAREV d2,19
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 367; Test 'if'
SETV d2,1; return Start AND if() #6759 Body Start
GOTO 384; return End AND if() #6759 Body End
LOADD d2,0; if() #6760 Test
COMPAREV d2,86
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 376
LOADD d2,0
COMPAREV d2,91
SETLESSI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 382; Test 'if'
SETV d2,1; return Start AND if() #6760 Body Start
GOTO 384; return End AND if() #6760 Body End
SETV d2,0; return Start
GOTO 384; return End
POPARGS d5,0.0002
RETURN; Func[bool IsWater(int)] Body End
SETR d4,SP; Func[bool __IsPit(int)] Body Start
PUSHR d4; return Start
PUSHV 0.0392; UsrFunc[bool IsPit(int)] Return Addr
LOADD d2,0; UsrFunc[bool IsPit(int)] Params Start
PUSHR d2; UsrFunc[bool IsPit(int)] Params End
GOTO 6031; UsrFunc[bool IsPit(int)] Call
POP d4
GOTO 394; return End
POPARGS d5,0.0001
RETURN; Func[bool __IsPit(int)] Body End
SETR d4,SP; Func[bool Ghost_CanMove(int, int, int)] Body Start
PUSHR d4; return Start
PUSHV 0.0412; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Return Addr
LOADD d2,2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
SETR d2,gd4
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
GOTO 416; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
GOTO 414; return End
POPARGS d5,0.0003
RETURN; Func[bool Ghost_CanMove(int, int, int)] Body End
SETR d4,SP; Func[bool Ghost_CanMove(int, int, int, bool)] Body Start
LOADD d2,2; if() #5589 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 424; Test 'if'
SETV d2,1; return Start AND if() #5589 Body Start
GOTO 480; return End AND if() #5589 Body End
LOADD d2,3; if() #5590 Test
COMPAREV d2,4
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 432; Test 'if'
LOADD d2,2; if() #5590 Body Start
MULTV d2,0.7071
STORED d2,2; if() #5590 Body End
PUSHR d4
PUSHV 0.0437; UsrFunc[int __NormalizeDir(int)] Return Addr
LOADD d2,3; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2; UsrFunc[int __NormalizeDir(int)] Params End
GOTO 482; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,3
LOADD d2,2; while() #5593 Test
COMPAREV d2,8
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 467; Test 'while'
PUSHR d4; unless() #5595 Test AND while() #5593 Body Start
PUSHV 0.0458; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Return Addr
LOADD d2,3; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
SUBV d2,8
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
GOTO 558; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 463; Test 'unless'
SETV d2,0; return Start AND unless() #5595 Body Start
GOTO 480; return End AND unless() #5595 Body End
LOADD d2,2
SUBV d2,8
STORED d2,2; while() #5593 Body End
GOTO 439; while() #5593 End
PUSHR d4; return Start
PUSHV 0.0478; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Return Addr
LOADD d2,3; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
GOTO 558; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP d4
GOTO 480; return End
POPARGS d5,0.0004
RETURN; Func[bool Ghost_CanMove(int, int, int, bool)] Body End
SETR d4,SP; Func[int __NormalizeDir(int)] Body Start
LOADD d2,0; if() #10206 Test
COMPAREV d2,0
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 492
LOADD d2,0
COMPAREV d2,7
SETLESSI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 498; Test 'if'
LOADD d2,0; return Start AND if() #10206 Body Start
GOTO 556; return End AND if() #10206 Body End
LOADD d2,0; if() #10208 Test
COMPAREV d2,8
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 505; Test 'if'
SETV d2,0; return Start AND if() #10208 Body Start
GOTO 556; return End AND if() #10208 Body End
LOADD d2,0; if() #10209 Test
COMPAREV d2,9
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 512; Test 'if'
SETV d2,5; return Start AND if() #10209 Body Start
GOTO 556; return End AND if() #10209 Body End
LOADD d2,0; if() #10210 Test
COMPAREV d2,10
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 519; Test 'if'
SETV d2,3; return Start AND if() #10210 Body Start
GOTO 556; return End AND if() #10210 Body End
LOADD d2,0; if() #10211 Test
COMPAREV d2,11
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 526; Test 'if'
SETV d2,7; return Start AND if() #10211 Body Start
GOTO 556; return End AND if() #10211 Body End
LOADD d2,0; if() #10212 Test
COMPAREV d2,12
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 533; Test 'if'
SETV d2,1; return Start AND if() #10212 Body Start
GOTO 556; return End AND if() #10212 Body End
LOADD d2,0; if() #10213 Test
COMPAREV d2,13
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 540; Test 'if'
SETV d2,6; return Start AND if() #10213 Body Start
GOTO 556; return End AND if() #10213 Body End
LOADD d2,0; if() #10214 Test
COMPAREV d2,14
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 547; Test 'if'
SETV d2,2; return Start AND if() #10214 Body Start
GOTO 556; return End AND if() #10214 Body End
LOADD d2,0; if() #10215 Test
COMPAREV d2,15
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 554; Test 'if'
SETV d2,4; return Start AND if() #10215 Body Start
GOTO 556; return End AND if() #10215 Body End
SETV d2,0; return Start
GOTO 556; return End
POPARGS d5,0.0001
RETURN; Func[int __NormalizeDir(int)] Body End
PUSHARGSR d2,0.0006; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,5
SETV d2,0
STORED d2,4
SETV d2,0
STORED d2,3
SETV d2,0
STORED d2,2
SETV d2,0
STORED d2,1
LOADD d2,9; if() #9891 Test
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 697; Test 'if'
SETR d2,gd14; if() #9891 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
SETR d2,gd2
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,4
SETR d2,gd3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,3
DIVV d2,8
SUBV d2,1
STORED d2,1
SETV d2,1; for() #9893 setup
STORED d2,5
LOADD d2,5; for() #9893 LoopTest
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 653; for() #9893 TestFail?
PUSHR d4; unless() #9896 Test AND for() #9893 Body Start
PUSHV 0.0642; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Return Addr
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,5
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
GOTO 1380; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 647; Test 'unless'
SETV d2,0; return Start AND unless() #9896 Body Start
GOTO 1378; return End AND unless() #9896 Body End
LOADD d2,5; for() #9893 Body End AND for() #9893 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,5
POP d2
GOTO 620; for() #9893 End
PUSHR d4; unless() #9898 Test
PUSHV 0.0666; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Return Addr
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,7
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
GOTO 1380; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 671; Test 'unless'
SETV d2,0; return Start AND unless() #9898 Body Start
GOTO 1378; return End AND unless() #9898 Body End
PUSHR d4; unless() #9900 Test
PUSHV 0.0690; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Return Addr
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
GOTO 1380; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 695; Test 'unless'
SETV d2,0; return Start AND unless() #9900 Body Start
GOTO 1378; return End AND unless() #9900 Body End
SETV d2,1; return Start
GOTO 1378; return End AND if() #9891 Body End
LOADD d2,9; if() #9902 Test AND if() #9891 Else Start
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 835; Test 'if'
SETR d2,gd14; if() #9902 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
SETR d2,gd2
PUSHR d2
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
STORED d2,4
SETR d2,gd3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,3
DIVV d2,8
SUBV d2,1
STORED d2,1
SETV d2,1; for() #9904 setup
STORED d2,5
LOADD d2,5; for() #9904 LoopTest
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 791; for() #9904 TestFail?
PUSHR d4; unless() #9907 Test AND for() #9904 Body Start
PUSHV 0.0780; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Return Addr
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,5
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
GOTO 1380; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 785; Test 'unless'
SETV d2,0; return Start AND unless() #9907 Body Start
GOTO 1378; return End AND unless() #9907 Body End
LOADD d2,5; for() #9904 Body End AND for() #9904 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,5
POP d2
GOTO 758; for() #9904 End
PUSHR d4; unless() #9909 Test
PUSHV 0.0804; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Return Addr
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,7
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
GOTO 1380; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 809; Test 'unless'
SETV d2,0; return Start AND unless() #9909 Body Start
GOTO 1378; return End AND unless() #9909 Body End
PUSHR d4; unless() #9911 Test
PUSHV 0.0828; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Return Addr
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
GOTO 1380; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 833; Test 'unless'
SETV d2,0; return Start AND unless() #9911 Body Start
GOTO 1378; return End AND unless() #9911 Body End
SETV d2,1; return Start
GOTO 1378; return End AND if() #9902 Body End
LOADD d2,9; if() #9913 Test AND if() #9902 Else Start
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 982; Test 'if'
PUSHR d4; if() #9915 Test AND if() #9913 Body Start
PUSHV 0.0843; UsrFunc[bool IsSideview()] Return Addr
GOTO 4724; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOTRUE 854
PUSHR d4
PUSHV 0.0850; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 860; Test 'if'
SETV d2,0; return Start AND if() #9915 Body Start
GOTO 1378; return End AND if() #9915 Body End
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,4
SETR d2,gd2
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,3
DIVV d2,8
SUBV d2,1
STORED d2,1
SETV d2,1; for() #9919 setup
STORED d2,5
LOADD d2,5; for() #9919 LoopTest
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 938; for() #9919 TestFail?
PUSHR d4; unless() #9922 Test AND for() #9919 Body Start
PUSHV 0.0927; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Return Addr
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,5
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
GOTO 1380; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 932; Test 'unless'
SETV d2,0; return Start AND unless() #9922 Body Start
GOTO 1378; return End AND unless() #9922 Body End
LOADD d2,5; for() #9919 Body End AND for() #9919 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,5
POP d2
GOTO 905; for() #9919 End
PUSHR d4; unless() #9924 Test
PUSHV 0.0951; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Return Addr
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,7
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
GOTO 1380; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 956; Test 'unless'
SETV d2,0; return Start AND unless() #9924 Body Start
GOTO 1378; return End AND unless() #9924 Body End
PUSHR d4; unless() #9926 Test
PUSHV 0.0975; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Return Addr
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
GOTO 1380; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 980; Test 'unless'
SETV d2,0; return Start AND unless() #9926 Body Start
GOTO 1378; return End AND unless() #9926 Body End
SETV d2,1; return Start
GOTO 1378; return End AND if() #9913 Body End
LOADD d2,9; if() #9928 Test AND if() #9913 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1120; Test 'if'
SETR d2,gd13; if() #9928 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
SETR d2,gd14
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
STORED d2,4
SETR d2,gd2
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,3
DIVV d2,8
SUBV d2,1
STORED d2,1
SETV d2,1; for() #9930 setup
STORED d2,5
LOADD d2,5; for() #9930 LoopTest
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 1076; for() #9930 TestFail?
PUSHR d4; unless() #9933 Test AND for() #9930 Body Start
PUSHV 0.1065; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Return Addr
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,5
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
GOTO 1380; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1070; Test 'unless'
SETV d2,0; return Start AND unless() #9933 Body Start
GOTO 1378; return End AND unless() #9933 Body End
LOADD d2,5; for() #9930 Body End AND for() #9930 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,5
POP d2
GOTO 1043; for() #9930 End
PUSHR d4; unless() #9935 Test
PUSHV 0.1089; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Return Addr
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,7
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
GOTO 1380; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1094; Test 'unless'
SETV d2,0; return Start AND unless() #9935 Body Start
GOTO 1378; return End AND unless() #9935 Body End
PUSHR d4; unless() #9937 Test
PUSHV 0.1113; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Return Addr
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
GOTO 1380; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1118; Test 'unless'
SETV d2,0; return Start AND unless() #9937 Body Start
GOTO 1378; return End AND unless() #9937 Body End
SETV d2,1; return Start
GOTO 1378; return End AND if() #9928 Body End
LOADD d2,9; if() #9939 Test AND if() #9928 Else Start
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1184; Test 'if'
SETV d2,0; if() #9939 Body Start
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 0.1144; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Return Addr
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
GOTO 416; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd2,d2
LOADD d2,0; unless() #9942 Test
COMPAREV d2,0
GOTOFALSE 1157; Test 'unless'
SETV d2,0; return Start AND unless() #9942 Body Start
GOTO 1378; return End AND unless() #9942 Body End
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 0.1174; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Return Addr
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
GOTO 416; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd3,d2
LOADD d2,0; return Start
GOTO 1378; return End AND if() #9939 Body End
LOADD d2,9; if() #9944 Test AND if() #9939 Else Start
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1248; Test 'if'
SETV d2,0; if() #9944 Body Start
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 0.1207; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Return Addr
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
GOTO 416; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
LOADD d2,0; unless() #9947 Test
COMPAREV d2,0
GOTOFALSE 1221; Test 'unless'
SETV d2,0; return Start AND unless() #9947 Body Start
GOTO 1378; return End AND unless() #9947 Body End
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 0.1238; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Return Addr
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
GOTO 416; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd3,d2
LOADD d2,0; return Start
GOTO 1378; return End AND if() #9944 Body End
LOADD d2,9; if() #9949 Test AND if() #9944 Else Start
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1312; Test 'if'
SETV d2,0; if() #9949 Body Start
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 0.1272; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Return Addr
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
GOTO 416; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd2,d2
LOADD d2,0; unless() #9952 Test
COMPAREV d2,0
GOTOFALSE 1285; Test 'unless'
SETV d2,0; return Start AND unless() #9952 Body Start
GOTO 1378; return End AND unless() #9952 Body End
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 0.1301; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Return Addr
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
GOTO 416; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
LOADD d2,0; return Start
GOTO 1378; return End AND if() #9949 Body End
LOADD d2,9; if() #9954 Test AND if() #9949 Else Start
COMPAREV d2,7
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1376; Test 'if'
SETV d2,0; if() #9954 Body Start
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 0.1335; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Return Addr
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
GOTO 416; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
LOADD d2,0; unless() #9957 Test
COMPAREV d2,0
GOTOFALSE 1349; Test 'unless'
SETV d2,0; return Start AND unless() #9957 Body Start
GOTO 1378; return End AND unless() #9957 Body End
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 0.1365; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Return Addr
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
GOTO 416; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
LOADD d2,0; return Start
GOTO 1378; return End AND if() #9954 Body End
SETV d2,0; return Start AND if() #9954 Else Start
GOTO 1378; return End AND if() #9954 Else End
POPARGS d5,0.0010; if() #9949 Else End AND if() #9944 Else End AND if() #9939 Else End AND if() #9928 Else End AND if() #9913 Else End AND if() #9902 Else End AND if() #9891 Else End
RETURN; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body End
PUSHR d2; Func[bool Ghost_CanMovePixel(int, int, bool)] Body Start
SETR d4,SP
LOADD d2,3; if() #5604 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1396
LOADD d2,3
COMPAREV d2,255
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1406
LOADD d2,2
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1416
LOADD d2,2
COMPAREV d2,175
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1425; Test 'if'
PUSHR d4; return Start AND if() #5604 Body Start
PUSHV 0.1423; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1634; return End AND if() #5604 Body End
PUSHR d4
PUSHV 0.1432; UsrFunc[int ComboAt(int, int)] Return Addr
LOADD d2,3; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[int ComboAt(int, int)] Params End
GOTO 280; UsrFunc[int ComboAt(int, int)] Call
POP d4
STORED d2,0
PUSHR d4; unless() #5611 Test
PUSHV 0.1438; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 65537; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1533; Test 'unless'
LOADD d2,0; if() #5613 Test AND unless() #5611 Body Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,110
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1451; Test 'if'
SETV d2,0; return Start AND if() #5613 Body Start
GOTO 1634; return End AND if() #5613 Body End
LOADD d2,0; if() #5614 Test
PUSHR d2
POP d0
SETR d2,COMBOFD
COMPAREV d2,96
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1461; Test 'if'
SETV d2,0; return Start AND if() #5614 Body Start
GOTO 1634; return End AND if() #5614 Body End
LOADD d2,0; if() #5615 Test
PUSHR d2
POP d0
SETR d2,COMBOID
COMPAREV d2,96
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1471; Test 'if'
SETV d2,0; return Start AND if() #5615 Body Start
GOTO 1634; return End AND if() #5615 Body End
PUSHR d4; if() #5616 Test
PUSHV 0.1475; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 65536; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1489; Test 'if'
LOADD d2,0; if() #5619 Test AND if() #5616 Body Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,44
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1488; Test 'if'
SETV d2,0; return Start AND if() #5619 Body Start
GOTO 1634; return End AND if() #5619 Body End
GOTO 1533; if() #5616 Body End
LOADD d2,1; if() #5620 Test AND if() #5616 Else Start
COMPAREV d2,0
GOTOTRUE 1503; Test 'if'
LOADD d2,0; if() #5622 Test AND if() #5620 Body Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,54
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1502; Test 'if'
SETV d2,0; return Start AND if() #5622 Body Start
GOTO 1634; return End AND if() #5622 Body End
GOTO 1533; if() #5620 Body End
LOADD d2,0; if() #5623 Test AND if() #5620 Else Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,128
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1513; Test 'if'
SETV d2,0; return Start AND if() #5623 Body Start
GOTO 1634; return End AND if() #5623 Body End
LOADD d2,0; if() #5624 Test
PUSHR d2
POP d0
SETR d2,COMBOFD
COMPAREV d2,97
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1523; Test 'if'
SETV d2,0; return Start AND if() #5624 Body Start
GOTO 1634; return End AND if() #5624 Body End
LOADD d2,0; if() #5625 Test
PUSHR d2
POP d0
SETR d2,COMBOID
COMPAREV d2,97
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1533; Test 'if'
SETV d2,0; return Start AND if() #5625 Body Start
GOTO 1634; return End AND if() #5625 Body End
PUSHR d4; if() #5620 Else End AND if() #5616 Else End AND unless() #5611 Body End AND if() #5626 Test
PUSHV 0.1537; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 65539; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1547; Test 'if'
PUSHR d4; return Start AND if() #5626 Body Start
PUSHV 0.1545; UsrFunc[bool IsWater(int)] Return Addr
LOADD d2,0; UsrFunc[bool IsWater(int)] Params Start
PUSHR d2; UsrFunc[bool IsWater(int)] Params End
GOTO 339; UsrFunc[bool IsWater(int)] Call
POP d4
GOTO 1634; return End AND if() #5626 Body End
PUSHR d4; if() #5629 Test
PUSHV 0.1551; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 65538; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1572; Test 'if'
PUSHR d4; return Start AND if() #5629 Body Start
PUSHV 0.1559; UsrFunc[bool IsWater(int)] Return Addr
LOADD d2,0; UsrFunc[bool IsWater(int)] Params Start
PUSHR d2; UsrFunc[bool IsWater(int)] Params End
GOTO 339; UsrFunc[bool IsWater(int)] Call
POP d4
COMPAREV d2,0.0001
GOTOMORE 1570
LOADD d2,0
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,58
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
GOTO 1634; return End AND if() #5629 Body End
PUSHR d4; if() #5633 Test
PUSHV 0.1577; UsrFunc[bool IsWater(int)] Return Addr
LOADD d2,0; UsrFunc[bool IsWater(int)] Params Start
PUSHR d2; UsrFunc[bool IsWater(int)] Params End
GOTO 339; UsrFunc[bool IsWater(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1586; Test 'if'
PUSHR d4; return Start AND if() #5633 Body Start
PUSHV 0.1584; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 2048; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1634; return End AND if() #5633 Body End
PUSHR d4; if() #5636 Test
PUSHV 0.1591; UsrFunc[bool __IsPit(int)] Return Addr
LOADD d2,0; UsrFunc[bool __IsPit(int)] Params Start
PUSHR d2; UsrFunc[bool __IsPit(int)] Params End
GOTO 386; UsrFunc[bool __IsPit(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1600; Test 'if'
PUSHR d4; return Start AND if() #5636 Body Start
PUSHV 0.1598; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 4096; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1634; return End AND if() #5636 Body End
PUSHR d4; if() #5639 Test
PUSHV 0.1604; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 1024; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1609; Test 'if'
SETV d2,1; return Start AND if() #5639 Body Start
GOTO 1634; return End AND if() #5639 Body End
PUSHR d4; if() #5642 Test AND if() #5639 Else Start
PUSHV 0.1613; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 32768; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1625; Test 'if'
PUSHR d4; return Start AND if() #5642 Body Start
PUSHV 0.1623; UsrFunc[bool __FullTileWalkable(int, int)] Return Addr
LOADD d2,3; UsrFunc[bool __FullTileWalkable(int, int)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[bool __FullTileWalkable(int, int)] Params End
GOTO 1668; UsrFunc[bool __FullTileWalkable(int, int)] Call
POP d4
GOTO 1634; return End AND if() #5642 Body End
LOADD d2,3; InlineFunc[bool Screen->isSolid(int, int)] Params Start AND return Start AND if() #5642 Else Start
PUSHR d2
LOADD d2,2
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
SETTRUEI d2
GOTO 1634; return End AND if() #5642 Else End
POPARGS d5,0.0004; if() #5639 Else End
RETURN; Func[bool Ghost_CanMovePixel(int, int, bool)] Body End
SETR d4,SP; Func[bool Ghost_FlagIsSet(int)] Body Start
LOADD d2,0; if() #5845 Test
ANDV d2,65536
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1655; Test 'if'
SETR d2,gd17; return Start AND if() #5845 Body Start
PUSHR d2
LOADD d2,0
ANDV d2,65535
SETV d3,1
LSHIFTR d3,d2
SETR d2,d3
POP d3
ANDR d2,d3
COMPAREV d2,0
SETFALSEI d2
GOTO 1666; return End AND if() #5845 Body End
SETR d2,gd16; return Start AND if() #5845 Else Start
PUSHR d2
LOADD d2,0
POP d3
ANDR d2,d3
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETTRUEI d2
GOTO 1666; return End AND if() #5845 Else End
POPARGS d5,0.0001
RETURN; Func[bool Ghost_FlagIsSet(int)] Body End
SETR d4,SP; Func[bool __FullTileWalkable(int, int)] Body Start
LOADD d2,1; if() #9857 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1683
LOADD d2,0
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1691
LOADD d2,1
COMPAREV d2,256
SETMOREI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1699
LOADD d2,0
COMPAREV d2,176
SETMOREI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1708; Test 'if'
PUSHR d4; return Start AND if() #9857 Body Start
PUSHV 0.1706; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1773; return End AND if() #9857 Body End
LOADD d2,1
PUSHR d2
LOADD d2,1
MODV d2,16
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,1
LOADD d2,0
PUSHR d2
LOADD d2,0
MODV d2,16
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,0
LOADD d2,1; InlineFunc[bool Screen->isSolid(int, int)] Params Start AND if() #9862 Test
PUSHR d2
LOADD d2,0
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0.0001
GOTOMORE 1741
LOADD d2,1; InlineFunc[bool Screen->isSolid(int, int)] Params Start
ADDV d2,8
PUSHR d2
LOADD d2,0
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1753
LOADD d2,1; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,0
ADDV d2,8
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1766
LOADD d2,1; InlineFunc[bool Screen->isSolid(int, int)] Params Start
ADDV d2,8
PUSHR d2
LOADD d2,0
ADDV d2,8
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1771; Test 'if'
SETV d2,0; return Start AND if() #9862 Body Start
GOTO 1773; return End AND if() #9862 Body End
SETV d2,1; return Start
GOTO 1773; return End
POPARGS d5,0.0002
RETURN; Func[bool __FullTileWalkable(int, int)] Body End
PUSHARGSR d2,0.0004; Func[bool Ghost_CheckFreeze(FFC, NPC)] Body Start
SETR d4,SP
PUSHR d4; if() #5649 Test
PUSHV 0.1781; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1789
PUSHR d4
PUSHV 0.1787; UsrFunc[bool ClockIsActive()] Return Addr
GOTO 272; UsrFunc[bool ClockIsActive()] Call
POP d4
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1813
PUSHR d4
PUSHV 0.1797; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1809
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCSTUN
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2062; Test 'if'
LOADD d2,5; if() #5649 Body Start
PUSHR d2
POP REFFFC
SETR d2,XD
STORED d2,3
LOADD d2,5
PUSHR d2
POP REFFFC
SETR d2,YD
STORED d2,2
LOADD d2,5
PUSHR d2
POP REFFFC
SETR d2,XD2
STORED d2,1
LOADD d2,5
PUSHR d2
POP REFFFC
SETR d2,YD2
STORED d2,0
SETV d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
SETV d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
SETV d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
SETV d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2
SETR d2,gd18
ORV d2,2
SETR gd18,d2
PUSHR d4; while() #5656 Test
PUSHV 0.1879; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1887
PUSHR d4
PUSHV 0.1885; UsrFunc[bool ClockIsActive()] Return Addr
GOTO 272; UsrFunc[bool ClockIsActive()] Call
POP d4
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1911
PUSHR d4
PUSHV 0.1895; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1907
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCSTUN
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2026; Test 'while'
PUSHR d4; while() #5656 Body Start
PUSHV 0.1921; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Return Addr
LOADD d2,5; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params End
GOTO 2066; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Call
PEEK d4
PUSHV 0.1926; UsrFunc[void __Ghost_DrawShadow(NPC)] Return Addr
LOADD d2,4; UsrFunc[void __Ghost_DrawShadow(NPC)] Params Start
PUSHR d2; UsrFunc[void __Ghost_DrawShadow(NPC)] Params End
GOTO 2154; UsrFunc[void __Ghost_DrawShadow(NPC)] Call
PEEK d4
PUSHV 0.1933; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Return Addr
LOADD d2,5; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
GOTO 2341; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
LOADD d2,4; InlineFunc[bool NPC->isValid()] Params AND unless() #5670 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOFALSE 1941; Test 'unless'
SETV d2,0; return Start AND unless() #5670 Body Start
GOTO 2064; return End
GOTO 1951; unless() #5670 Body End
LOADD d2,4; if() #5672 Test AND unless() #5670 Else Start
PUSHR d2
POP REFNPC
SETR d2,NPCHP
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 1951; Test 'if'
SETV d2,0; return Start AND if() #5672 Body Start
GOTO 2064; return End AND if() #5672 Body End
PUSHR d4; unless() #5670 Else End
PUSHV 0.1958; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Return Addr
LOADD d2,5; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
GOTO 2761; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
PUSHV 0.1962; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1983; Test 'if'
SETR d2,gd11; if() #5675 Body Start
PUSHR d2
PUSHR d4
PUSHV 0.1971; UsrFunc[int __NormalizeDir(int)] Return Addr
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
GOTO 482; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
GOTO 2017; if() #5675 Body End
PUSHR d4; if() #5679 Test AND if() #5675 Else Start
PUSHV 0.1987; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 2008; Test 'if'
SETR d2,gd11; if() #5679 Body Start
PUSHR d2
PUSHR d4
PUSHV 0.1996; UsrFunc[int __NormalizeDir(int)] Return Addr
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
GOTO 482; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
GOTO 2017; if() #5679 Body End
SETR d2,gd11; if() #5679 Else Start
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #5679 Else End
PUSHR d4; if() #5675 Else End
PUSHV 0.2024; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Return Addr
LOADD d2,5; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params End
GOTO 2897; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Call
POP d4; while() #5656 Body End
GOTO 1875; while() #5656 End
LOADD d2,3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
LOADD d2,2
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
LOADD d2,1
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
LOADD d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2; if() #5649 Body End
SETV d2,1; return Start
GOTO 2064; return End
POPARGS d5,0.0006
RETURN; Func[bool Ghost_CheckFreeze(FFC, NPC)] Body End
PUSHR d2; Func[void __Ghost_UpdateFlashing(FFC, NPC)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,0
SETR d2,gd21; if() #10119 Test
COMPAREV d2,1
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2087; Test 'if'
SETR d2,gd21; if() #10119 Body Start
PUSHR d2
SUBV d2,1
SETR gd21,d2
POP d2
SETR d2,gd21; if() #10120 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2087; Test 'if'
SETV d2,1; if() #10120 Body Start
STORED d2,0; if() #10120 Body End
SETR d2,gd18; if() #10119 Body End AND if() #10121 Test
ANDV d2,8
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2152; Test 'if'
SETR d2,gd21; if() #10122 Test AND if() #10121 Body Start
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLI d2
COMPAREV d2,0
GOTOTRUE 2116; Test 'if'
SETR d2,gd27; if() #10122 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,1
RSHIFTV d2,1
SUBV2 9,d2
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
GOTO 2152; if() #10122 Body End
LOADD d2,1; if() #10124 Test AND if() #10122 Else Start
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,64
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 2140; Test 'if'
SETR d2,gd27; if() #10124 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,1
ANDV d2,3
ADDV d2,6
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
GOTO 2152; if() #10124 Body End
LOADD d2,0; if() #10126 Test AND if() #10124 Else Start
COMPAREV d2,0
GOTOTRUE 2152; Test 'if'
SETR d2,gd12; if() #10126 Body Start
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2; if() #10126 Body End
POPARGS d5,0.0003; if() #10124 Else End AND if() #10122 Else End AND if() #10121 Body End
RETURN; Func[void __Ghost_UpdateFlashing(FFC, NPC)] Body End
PUSHARGSR d2,0.0004; Func[void __Ghost_DrawShadow(NPC)] Body Start
SETR d4,SP
SETR d2,gd4; if() #9960 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2162; Test 'if'
GOTO 2339; return (Void) AND if() #9960 Body
PUSHR d4; unless() #9961 Test
PUSHV 0.2166; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
CASTBOOLI d2
COMPAREV d2,0.0001
GOTOMORE 2178
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCEXTEND
COMPAREV d2,4
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 2189
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCTYPE
COMPAREV d2,40
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOFALSE 2193; Test 'unless'
GOTO 2339; return (Void) AND unless() #9961 Body
SETV d2,0
STORED d2,3
SETV d2,0
STORED d2,2
SETV d2,0
STORED d2,1
SETV d2,0
STORED d2,0
SETR d2,gd13; if() #9966 Test
COMPAREV d2,3
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 2215
SETR d2,gd14
COMPAREV d2,3
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
CASTBOOLI d2
COMPAREV d2,0
GOTOTRUE 2266; Test 'if'
SETR d2,gd2; if() #9966 Body Start
PUSHR d2
SETR d2,gd13
SUBV d2,1
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd13
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
SETR d2,gd14
SUBV d2,1
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,2
SETV d2,1
STORED d2,0
PUSHR d4; if() #9969 Test
PUSHV 0.2253; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 2259; Test 'if'
SETV d2,27400; if() #9969 Body Start
STORED d2,1
GOTO 2265; if() #9969 Body End
SETR d2,gd27; if() #9969 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,2
ADDV d2,27400
STORED d2,1; if() #9969 Else End
GOTO 2321; if() #9966 Body End
SETR d2,gd2; if() #9966 Else Start
PUSHR d2
SETR d2,gd13
SUBV d2,2
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd13
SUBV d2,2
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
SETR d2,gd14
SUBV d2,2
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
SUBV d2,2
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,2
SETV d2,2
STORED d2,0
PUSHR d4; if() #9972 Test
PUSHV 0.2300; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 2306; Test 'if'
SETV d2,27392; if() #9972 Body Start
STORED d2,1
GOTO 2321; if() #9972 Body End
SETR d2,gd27; if() #9972 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,4
MULTV d2,2
SETV d2,2
PUSHR d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,4
POP d3
MULTR d2,d3
ADDV d2,27392
STORED d2,1; if() #9972 Else End
PUSHV 1; if() #9966 Else End AND InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #9975 [Opt:AlwaysOn]
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 7
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0004
PUSHV 1
PUSHV 64; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS d5,0.0005
RETURN; Func[void __Ghost_DrawShadow(NPC)] Body End
PUSHARGSR d2,0.0004; Func[void Ghost_WaitframeLight(FFC, NPC)] Body Start
SETR d4,SP
ALLOCATEMEMV d2,24
STORED d2,2
SETR d0,d2
PUSHR d0
SETR d2,gd2
POP d0
WRITEPODARRAYVR 0,d2
PUSHR d0
SETR d2,gd3
POP d0
WRITEPODARRAYVR 1,d2
PUSHR d0
SETR d2,gd4
POP d0
WRITEPODARRAYVR 2,d2
PUSHR d0
SETR d2,gd6
POP d0
WRITEPODARRAYVR 3,d2
PUSHR d0
SETR d2,gd7
POP d0
WRITEPODARRAYVR 4,d2
PUSHR d0
SETR d2,gd8
POP d0
WRITEPODARRAYVR 5,d2
PUSHR d0
SETR d2,gd9
POP d0
WRITEPODARRAYVR 6,d2
PUSHR d0
SETR d2,gd10
POP d0
WRITEPODARRAYVR 7,d2
PUSHR d0
SETR d2,gd19
POP d0
WRITEPODARRAYVR 8,d2
PUSHR d0
SETR d2,gd20
POP d0
WRITEPODARRAYVR 9,d2
PUSHR d0
SETR d2,gd12
POP d0
WRITEPODARRAYVR 10,d2
PUSHR d0
SETR d2,gd5
POP d0
WRITEPODARRAYVR 11,d2
PUSHR d0
SETR d2,gd11
POP d0
WRITEPODARRAYVR 12,d2
PUSHR d0
SETR d2,gd13
POP d0
WRITEPODARRAYVR 13,d2
PUSHR d0
SETR d2,gd14
POP d0
WRITEPODARRAYVR 14,d2
PUSHR d0
SETR d2,gd16
POP d0
WRITEPODARRAYVR 15,d2
PUSHR d0
SETR d2,gd17
POP d0
WRITEPODARRAYVR 16,d2
PUSHR d0
SETR d2,gd18
POP d0
WRITEPODARRAYVR 17,d2
PUSHR d0
SETR d2,gd21
POP d0
WRITEPODARRAYVR 18,d2
PUSHR d0
SETR d2,gd22
POP d0
WRITEPODARRAYVR 19,d2
PUSHR d0
SETR d2,gd15
POP d0
WRITEPODARRAYVR 20,d2
PUSHR d0
SETR d2,gd23
POP d0
WRITEPODARRAYVR 21,d2
PUSHR d0
SETR d2,gd24
POP d0
WRITEPODARRAYVR 22,d2
ALLOCATEMEMV d2,21
STORED d2,1
SETR d2,gd26; if() #6300 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2478; Test 'if'
SETV d2,0; for() #6301 setup AND if() #6300 Body Start
STORED d2,0
LOADD d2,0; for() #6301 LoopTest
COMPAREV d2,21
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2478; for() #6301 TestFail?
SETR d2,gd26; for() #6301 Body Start
PUSHR d2
LOADD d2,0
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2; for() #6301 Body End
LOADD d2,0; for() #6301 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 2452; for() #6301 End
LOADD d2,4; if() #6300 Body End AND InlineFunc[bool NPC->isValid()] Params AND if() #6304 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOTRUE 2495; Test 'if'
LOADD d2,2; if() #6304 Body Start
ORV d2,65536
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2; if() #6304 Body End
LOADD d2,4; InlineFunc[bool NPC->isValid()] Params AND if() #6308 Test AND do-while() #6305 Body Start
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOTRUE 2563; Test 'if'
SETR d2,gd26; if() #6311 Test AND if(true) #6310 [Opt:AlwaysOn] AND if() #6308 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2536; Test 'if'
ALLOCATEMEMV d2,34; if() #6311 Body Start
STORED d2,0
PUSHR d4
PUSHV 0.2520; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Return Addr
LOADD d2,5; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params End
GOTO 5713; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Call
POP d4
LOADD d2,0
PUSHR d2
LOADD d2,2
SETR d0,d2
POP d2
WRITEPODARRAYVR 23,d2
PUSHR d4
PUSHV 0.2532; UsrFunc[void __HideFFCAndWait(FFC)] Return Addr
LOADD d2,5; UsrFunc[void __HideFFCAndWait(FFC)] Params Start
PUSHR d2; UsrFunc[void __HideFFCAndWait(FFC)] Params End
GOTO 6003; UsrFunc[void __HideFFCAndWait(FFC)] Call
POP d4
LOADD d3,0
DEALLOCATEMEMR d3
GOTO 2562; if() #6311 Body End
ALLOCATEMEMV d2,10; if() #6311 Else Start
STORED d2,0
PUSHR d4
PUSHV 0.2547; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Return Addr
LOADD d2,5; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params End
GOTO 5713; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Call
POP d4
LOADD d2,0
PUSHR d2
LOADD d2,2
SETR d0,d2
POP d2
WRITEPODARRAYVR 23,d2
PUSHR d4
PUSHV 0.2559; UsrFunc[void __HideFFCAndWait(FFC)] Return Addr
LOADD d2,5; UsrFunc[void __HideFFCAndWait(FFC)] Params Start
PUSHR d2; UsrFunc[void __HideFFCAndWait(FFC)] Params End
GOTO 6003; UsrFunc[void __HideFFCAndWait(FFC)] Call
POP d4
LOADD d3,0
DEALLOCATEMEMR d3; if() #6311 Else End
GOTO 2569; if() #6308 Body End
PUSHR d4; if() #6308 Else Start
PUSHV 0.2568; UsrFunc[void __HideFFCAndWait(FFC)] Return Addr
LOADD d2,5; UsrFunc[void __HideFFCAndWait(FFC)] Params Start
PUSHR d2; UsrFunc[void __HideFFCAndWait(FFC)] Params End
GOTO 6003; UsrFunc[void __HideFFCAndWait(FFC)] Call
POP d4; if() #6308 Else End
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,0
SETR gd2,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,1
SETR gd3,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,2
SETR gd4,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,3
SETR gd6,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,4
SETR gd7,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,5
SETR gd8,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,6
SETR gd9,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,7
SETR gd10,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,8
SETR gd19,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,9
SETR gd20,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,10
SETR gd12,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,11
SETR gd5,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,12
SETR gd11,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,13
SETR gd13,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,14
SETR gd14,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,15
SETR gd16,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,16
SETR gd17,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,17
SETR gd18,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,18
SETR gd21,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,19
SETR gd22,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,20
SETR gd15,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,21
SETR gd23,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,22
SETR gd24,d2
LOADD d2,1; if() #6320 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2723; Test 'if'
SETV d2,0; for() #6322 setup AND if() #6320 Body Start
STORED d2,0
LOADD d2,0; for() #6322 LoopTest
COMPAREV d2,21
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2722; for() #6322 TestFail?
LOADD d2,1; for() #6322 Body Start
PUSHR d2
LOADD d2,0
POP d0
READPODARRAYR d2,d2
PUSHR d2
SETR d2,gd26
PUSHR d2
LOADD d2,0
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2; for() #6322 Body End
LOADD d2,0; for() #6322 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 2696; for() #6322 End
GOTO 2729; if() #6320 Body End
SETV d2,0; if() #6320 Else Start
PUSHR d2
SETR d2,gd26
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2; if() #6320 Else End
SETR d2,gd27; do-while() #6305 Body End AND do-while() #6305 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 2739; Test 'while'
GOTO 2495
LOADD d2,4; InlineFunc[bool NPC->isValid()] Params AND if() #6325 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOTRUE 2755; Test 'if'
SETV d2,65536; if() #6325 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2; if() #6325 Body End
LOADD d3,1
DEALLOCATEMEMR d3
LOADD d3,2
DEALLOCATEMEMR d3
POPARGS d5,0.0006
RETURN; Func[void Ghost_WaitframeLight(FFC, NPC)] Body End
SETR d4,SP; Func[void Ghost_SetPosition(FFC, NPC)] Body Start
LOADD d2,0; InlineFunc[bool NPC->isValid()] Params AND unless() #6145 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOFALSE 2767; Test 'unless'
GOTO 2895; return (Void) AND unless() #6145 Body
PUSHR d4; if() #6146 Test
PUSHV 0.2771; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
SETTRUEI d2
CASTBOOLI d2
COMPAREV d2,0
GOTOTRUE 2805; Test 'if'
SETR d2,gd2; if() #6146 Body Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETR d2,gd3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETR d2,gd4
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2
GOTO 2837; if() #6146 Body End
SETR d2,gd2; if() #6146 Else Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETR d2,gd3
PUSHR d2
SETR d2,gd4
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2; if() #6146 Else End
PUSHR d4
PUSHV 0.2851; UsrFunc[int Clamp(int, int, int)] Return Addr
SETR d2,gd2; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFNPC
SETR d2,NPCXOFS
POP d3
ADDR d2,d3
PUSHR d2
PUSHV -64
PUSHV 256; UsrFunc[int Clamp(int, int, int)] Params End
GOTO 242; UsrFunc[int Clamp(int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
PUSHR d4
PUSHV 0.2886; UsrFunc[int Clamp(int, int, int)] Return Addr
SETR d2,gd3; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR d2
SETR d2,gd4
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFNPC
SETR d2,NPCYOFS
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFNPC
SETR d2,NPCZOFS
POP d3
SUBR d3,d2
PUSHR d3
PUSHV -64
PUSHV 176; UsrFunc[int Clamp(int, int, int)] Params End
GOTO 242; UsrFunc[int Clamp(int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
POPARGS d5,0.0002
RETURN; Func[void Ghost_SetPosition(FFC, NPC)] Body End
PUSHARGSR d2,0.0005; Func[void Ghost_CheckHit(FFC, NPC)] Body Start
SETR d4,SP
LOADD d2,5; if() #5686 Test
PUSHR d2
POP REFNPC
SETR d2,NPCHP
PUSHR d2
SETR d2,gd15
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3117; Test 'if'
SETR d2,gd18; if() #5686 Body Start
ORV d2,1
SETR gd18,d2
LOADD d2,5
PUSHR d2
POP REFNPC
SETR d2,NPCHP
SETR gd15,d2
SETR d2,gd21; if() #5687 Test
COMPAREV d2,32
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2929; Test 'if'
SETV d2,32; if() #5687 Body Start
SETR gd21,d2; if() #5687 Body End
PUSHR d4; if() #5688 Test
PUSHV 0.2933; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 1; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3117; Test 'if'
SETR d2,LINKX; if() #5688 Body Start
PUSHR d2
SETR d2,gd2
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,4
SETR d2,LINKY
PUSHR d2
SETR d2,gd3
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
LOADD d2,4; InlineFunc[int Abs(int)] Params AND if() #5690 Test
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
SETR d2,gd13
ADDV d2,1
MULTV d2,16
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2975
LOADD d2,3; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
SETR d2,gd14
ADDV d2,1
MULTV d2,16
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3014; Test 'if'
SETR d2,LINKDIR; if() #5693 Test AND if() #5690 Body Start
ANDV d2,2
PUSHR d2
SETR d2,gd5
ANDV d2,2
POP d3
COMPARER d3,d2
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 2996
SETR d2,gd5
COMPAREV d2,3
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 3006
PUSHR d4
PUSHV 0.3003; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3013; Test 'if'
SETR d2,LINKDIR; if() #5693 Body Start
LSHIFTV d2,12
ORV d2,16
SETR gd22,d2; if() #5693 Body End
GOTO 3117; if() #5690 Body End
LOADD d2,4; InlineFunc[int Abs(int)] Params AND if() #5697 Test AND if() #5690 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOADD d2,3; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3072; Test 'if'
SETR d2,gd5; if() #5699 Test AND if() #5697 Body Start
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 3036
SETR d2,gd5
COMPAREV d2,1
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 3046
SETR d2,gd5
COMPAREV d2,3
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 3056
PUSHR d4
PUSHV 0.3053; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3071; Test 'if'
LOADD d2,3; if() #5704 Test AND if() #5699 Body Start
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3069; Test 'if'
SETV d2,16; if() #5704 Body Start
SETR gd22,d2
GOTO 3071; if() #5704 Body End
SETV d2,4112; if() #5704 Else Start
SETR gd22,d2; if() #5704 Else End
GOTO 3117; if() #5699 Body End AND if() #5697 Body End
SETR d2,gd5; if() #5706 Test AND if() #5697 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 3082
SETR d2,gd5
COMPAREV d2,3
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 3092
SETR d2,gd5
COMPAREV d2,3
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 3102
PUSHR d4
PUSHV 0.3099; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3117; Test 'if'
LOADD d2,4; if() #5711 Test AND if() #5706 Body Start
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3115; Test 'if'
SETV d2,8208; if() #5711 Body Start
SETR gd22,d2
GOTO 3117; if() #5711 Body End
SETV d2,12304; if() #5711 Else Start
SETR gd22,d2; if() #5711 Else End
SETR d2,gd22; if() #5706 Body End AND if() #5697 Else End AND if() #5690 Else End AND if() #5688 Body End AND if() #5686 Body End AND if() #5713 Test
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3359; Test 'if'
SETR d2,gd22; if() #5713 Body Start
RSHIFTV d2,12
STORED d2,4
SETR d2,gd22
ANDV d2,4095
STORED d2,3
SETV d2,4
STORED d2,2
PUSHR d4; if() #5714 Test
PUSHV 0.3134; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 5; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3140; Test 'if'
LOADD d2,2; if() #5714 Body Start
DIVV d2,2
STORED d2,2; if() #5714 Body End
PUSHR d4; if() #5716 Test
PUSHV 0.3148; UsrFunc[bool Ghost_CanMove(int, int, int)] Return Addr
LOADD d2,4; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
GOTO 396; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3257; Test 'if'
SETV d2,0; if() #5716 Body Start
STORED d2,1
SETV d2,0
STORED d2,0
LOADD d2,3
PUSHR d2
SUBV d2,1
STORED d2,3
POP d2
LOADD d2,3; if() #5719 Test
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3175; Test 'if'
LOADD d2,4; if() #5719 Body Start
LSHIFTV d2,12
PUSHR d2
LOADD d2,3
POP d3
ORR d2,d3
SETR gd22,d2
GOTO 3177; if() #5719 Body End
SETV d2,0; if() #5719 Else Start
SETR gd22,d2; if() #5719 Else End
LOADD d2,4; if() #5721 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3186; Test 'if'
LOADD d2,2; if() #5721 Body Start
SUBV2 0,d2
STORED d2,0
GOTO 3205; if() #5721 Body End
LOADD d2,4; if() #5723 Test AND if() #5721 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3194; Test 'if'
LOADD d2,2; if() #5723 Body Start
STORED d2,0
GOTO 3205; if() #5723 Body End
LOADD d2,4; if() #5725 Test AND if() #5723 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3203; Test 'if'
LOADD d2,2; if() #5725 Body Start
SUBV2 0,d2
STORED d2,1
GOTO 3205; if() #5725 Body End
LOADD d2,2; if() #5725 Else Start
STORED d2,1; if() #5725 Else End
LOADD d2,1; if() #5723 Else End AND if() #5721 Else End AND if() #5727 Test
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3231; Test 'if'
SETR d2,gd2; if() #5727 Body Start
PUSHR d2
LOADD d2,1
POP d3
ADDR d2,d3
SETR gd2,d2
SETR d2,gd19
PUSHR d2
LOADD d2,1
POP d3
ADDR d2,d3
SETR gd19,d2
PUSHR d4
PUSHV 0.3229; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Return Addr
LOADD d2,6; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
GOTO 2761; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
GOTO 3256; if() #5727 Body End
LOADD d2,0; if() #5730 Test AND if() #5727 Else Start
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3256; Test 'if'
SETR d2,gd3; if() #5730 Body Start
PUSHR d2
LOADD d2,0
POP d3
ADDR d2,d3
SETR gd3,d2
SETR d2,gd20
PUSHR d2
LOADD d2,0
POP d3
ADDR d2,d3
SETR gd20,d2
PUSHR d4
PUSHV 0.3255; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Return Addr
LOADD d2,6; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
GOTO 2761; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4; if() #5730 Body End
GOTO 3359; if() #5727 Else End AND if() #5716 Body End
SETV d2,-1; if() #5716 Else Start
STORED d2,1
SETV d2,-1
STORED d2,0
SETV d2,0
SETR gd22,d2
SETR d2,gd18
ORV d2,16
SETR gd18,d2
LOADD d2,4; if() #5732 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3277; Test 'if'
SETR d2,gd3; InlineFunc[untyped Floor(untyped)] Params Start AND if() #5732 Body Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
MULTV d2,8
STORED d2,0
GOTO 3306; if() #5732 Body End
LOADD d2,4; if() #5734 Test AND if() #5732 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3289; Test 'if'
SETR d2,gd3; InlineFunc[untyped Ceiling(untyped)] Params Start AND if() #5734 Body Start
LSHIFTV d2,0
DIVV d2,8; InlineFunc[untyped Ceiling(untyped)] Params End
CEILING d2; InlineFunc[untyped Ceiling(untyped)] Body
MULTV d2,8
STORED d2,0
GOTO 3306; if() #5734 Body End
LOADD d2,4; if() #5736 Test AND if() #5734 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3300; Test 'if'
SETR d2,gd2; InlineFunc[untyped Floor(untyped)] Params Start AND if() #5736 Body Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
MULTV d2,8
STORED d2,1
GOTO 3306; if() #5736 Body End
SETR d2,gd2; InlineFunc[untyped Ceiling(untyped)] Params Start AND if() #5736 Else Start
LSHIFTV d2,0
DIVV d2,8; InlineFunc[untyped Ceiling(untyped)] Params End
CEILING d2; InlineFunc[untyped Ceiling(untyped)] Body
MULTV d2,8
STORED d2,1; if() #5736 Else End
LOADD d2,1; if() #5734 Else End AND if() #5732 Else End AND if() #5738 Test
COMPAREV d2,-1
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3333; Test 'if'
SETR d2,gd19; if() #5738 Body Start
PUSHR d2
LOADD d2,1
PUSHR d2
SETR d2,gd2
POP d3
SUBR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
SETR gd19,d2
LOADD d2,1
SETR gd2,d2
PUSHR d4
PUSHV 0.3331; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Return Addr
LOADD d2,6; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
GOTO 2761; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
GOTO 3359; if() #5738 Body End
LOADD d2,0; if() #5741 Test AND if() #5738 Else Start
COMPAREV d2,-1
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3359; Test 'if'
SETR d2,gd20; if() #5741 Body Start
PUSHR d2
LOADD d2,0
PUSHR d2
SETR d2,gd3
POP d3
SUBR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
SETR gd20,d2
LOADD d2,0
SETR gd3,d2
PUSHR d4
PUSHV 0.3358; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Return Addr
LOADD d2,6; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
GOTO 2761; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4; if() #5741 Body End
POPARGS d5,0.0007; if() #5738 Else End AND if() #5716 Else End AND if() #5713 Body End
RETURN; Func[void Ghost_CheckHit(FFC, NPC)] Body End
SETR d4,SP; Func[void Ghost_ClearCombos()] Body Start
SETV d2,0
PUSHR d2
SETR d2,gd26
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
RETURN; Func[void Ghost_ClearCombos()] Body End
SETR d4,SP; Func[void Ghost_SetFlag(int)] Body Start
LOADD d2,0; if() #6122 Test
ANDV d2,65536
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3387; Test 'if'
SETR d2,gd17; if() #6122 Body Start
PUSHR d2
LOADD d2,0
ANDV d2,65535
SETV d3,1
LSHIFTR d3,d2
SETR d2,d3
POP d3
ORR d2,d3
SETR gd17,d2
GOTO 3393; if() #6122 Body End
SETR d2,gd16; if() #6122 Else Start
PUSHR d2
LOADD d2,0
POP d3
ORR d2,d3
SETR gd16,d2; if() #6122 Else End
POPARGS d5,0.0001
RETURN; Func[void Ghost_SetFlag(int)] Body End
SETR d4,SP; Func[void Ghost_UnsetFlag(int)] Body Start
LOADD d2,0; if() #6215 Test
ANDV d2,65536
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3413; Test 'if'
SETR d2,gd17; if() #6215 Body Start
PUSHR d2
LOADD d2,0
ANDV d2,65535
SETV d3,-2
LSHIFTR d3,d2
SETR d2,d3
POP d3
ANDR d2,d3
SETR gd17,d2
GOTO 3420; if() #6215 Body End
SETR d2,gd16; if() #6215 Else Start
PUSHR d2
LOADD d2,0
BITNOT d2
POP d3
ANDR d2,d3
SETR gd16,d2; if() #6215 Else End
POPARGS d5,0.0001
RETURN; Func[void Ghost_UnsetFlag(int)] Body End
PUSHARGSR d2,0.0004; Func[void Ghost_MoveXY(int, int, int)] Body Start
SETR d4,SP
LOADD d2,5; if() #6049 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3436
PUSHR d4
PUSHV 0.3434; UsrFunc[bool IsSideview()] Return Addr
GOTO 4724; UsrFunc[bool IsSideview()] Call
POP d4
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3448
PUSHR d4
PUSHV 0.3444; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3454; Test 'if'
SETV d2,0; if() #6049 Body Start
STORED d2,5; if() #6049 Body End
LOADD d2,6; while() #6055 Test AND InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,8
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 3470
LOADD d2,5; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,8
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3545; Test 'while'
LOADD d2,6; InlineFunc[int Abs(int)] Params AND if() #6058 Test AND while() #6055 Body Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOADD d2,5; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3514; Test 'if'
LOADD d2,6; if() #6060 Test AND if() #6058 Body Start
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3502; Test 'if'
PUSHR d4; if() #6060 Body Start
PUSHV 0.3497; UsrFunc[void Ghost_MoveXY(int, int, int)] Return Addr
PUSHV 8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
GOTO 3422; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOADD d2,6
SUBV d2,8
STORED d2,6
GOTO 3513; if() #6060 Body End
PUSHR d4; if() #6060 Else Start
PUSHV 0.3509; UsrFunc[void Ghost_MoveXY(int, int, int)] Return Addr
PUSHV -8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
GOTO 3422; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOADD d2,6
ADDV d2,8
STORED d2,6; if() #6060 Else End
GOTO 3544; if() #6058 Body End
LOADD d2,5; if() #6064 Test AND if() #6058 Else Start
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3533; Test 'if'
PUSHR d4; if() #6064 Body Start
PUSHV 0.3528; UsrFunc[void Ghost_MoveXY(int, int, int)] Return Addr
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 8
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
GOTO 3422; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOADD d2,5
SUBV d2,8
STORED d2,5
GOTO 3544; if() #6064 Body End
PUSHR d4; if() #6064 Else Start
PUSHV 0.3540; UsrFunc[void Ghost_MoveXY(int, int, int)] Return Addr
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV -8
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
GOTO 3422; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOADD d2,5
ADDV d2,8
STORED d2,5; if() #6064 Else End
GOTO 3454; if() #6058 Else End AND while() #6055 Body End AND while() #6055 End
SETV d2,0
STORED d2,3
SETV d2,0
STORED d2,2
SETV d2,0
STORED d2,1
SETV d2,0
STORED d2,0
LOADD d2,6; if() #6068 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3627; Test 'if'
SETR d2,gd23; if() #6068 Body Start
RSHIFTV d2,8
STORED d2,2
SETR d2,gd2
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
STORED d2,3
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,1
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,0
LOADD d2,1; if() #6070 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3596; Test 'if'
LOADD d2,3; if() #6070 Body Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3619; if() #6070 Body End
PUSHR d4; if() #6072 Test AND if() #6070 Else Start
PUSHV 0.3605; UsrFunc[bool Ghost_CanMove(int, int, int)] Return Addr
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOADD d2,6
SUBV2 0,d2
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
GOTO 396; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3615; Test 'if'
LOADD d2,3; if() #6072 Body Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3619; if() #6072 Body End
LOADD d2,3; if() #6072 Else Start
RSHIFTV d2,3
LSHIFTV d2,3
STORED d2,3; if() #6072 Else End
LOADD d2,3; if() #6070 Else End
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
GOTO 3713; if() #6068 Body End
LOADD d2,6; if() #6075 Test AND if() #6068 Else Start
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3713; Test 'if'
SETR d2,gd13; if() #6075 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
STORED d2,2
SETR d2,gd2
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
STORED d2,3
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,1
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,0
LOADD d2,1; if() #6076 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3682; Test 'if'
LOADD d2,3; if() #6076 Body Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3706; if() #6076 Body End
PUSHR d4; if() #6078 Test AND if() #6076 Else Start
PUSHV 0.3690; UsrFunc[bool Ghost_CanMove(int, int, int)] Return Addr
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOADD d2,6
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
GOTO 396; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3700; Test 'if'
LOADD d2,3; if() #6078 Body Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3706; if() #6078 Body End
LOADD d2,3; if() #6078 Else Start
ADDV d2,7
RSHIFTV d2,3
LSHIFTV d2,3
SUBV d2,1
STORED d2,3; if() #6078 Else End
LOADD d2,3; if() #6076 Else End
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2; if() #6075 Body End
LOADD d2,5; if() #6068 Else End AND if() #6081 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3787; Test 'if'
SETR d2,gd24; if() #6081 Body Start
RSHIFTV d2,8
STORED d2,2
SETR d2,gd3
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
STORED d2,3
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,1
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,0
LOADD d2,1; if() #6083 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3756; Test 'if'
LOADD d2,3; if() #6083 Body Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3779; if() #6083 Body End
PUSHR d4; if() #6085 Test AND if() #6083 Else Start
PUSHV 0.3765; UsrFunc[bool Ghost_CanMove(int, int, int)] Return Addr
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOADD d2,5
SUBV2 0,d2
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
GOTO 396; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3775; Test 'if'
LOADD d2,3; if() #6085 Body Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3779; if() #6085 Body End
LOADD d2,3; if() #6085 Else Start
RSHIFTV d2,3
LSHIFTV d2,3
STORED d2,3; if() #6085 Else End
LOADD d2,3; if() #6083 Else End
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
GOTO 3873; if() #6081 Body End
LOADD d2,5; if() #6088 Test AND if() #6081 Else Start
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3873; Test 'if'
SETR d2,gd14; if() #6088 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
STORED d2,2
SETR d2,gd3
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
STORED d2,3
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,1
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,0
LOADD d2,1; if() #6089 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3842; Test 'if'
LOADD d2,3; if() #6089 Body Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3866; if() #6089 Body End
PUSHR d4; if() #6091 Test AND if() #6089 Else Start
PUSHV 0.3850; UsrFunc[bool Ghost_CanMove(int, int, int)] Return Addr
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOADD d2,5
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
GOTO 396; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3860; Test 'if'
LOADD d2,3; if() #6091 Body Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3866; if() #6091 Body End
LOADD d2,3; if() #6091 Else Start
ADDV d2,7
RSHIFTV d2,3
LSHIFTV d2,3
SUBV d2,1
STORED d2,3; if() #6091 Else End
LOADD d2,3; if() #6089 Else End
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2; if() #6088 Body End
PUSHR d4; if() #6081 Else End AND if() #6094 Test
PUSHV 0.3877; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3885
SETR d2,gd18
ANDV d2,4
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3952; Test 'if'
PUSHR d4; if() #6097 Test AND if() #6094 Body Start
PUSHV 0.3893; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3911; Test 'if'
PUSHR d4; if() #6097 Body Start
PUSHV 0.3908; UsrFunc[int AngleDir8(int)] Return Addr
LOADD d2,6; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapAngle(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR d2
LOADD d2,5
SETR d1,d2; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapAngle(int)] Params End
WRAPRADIANS d2; InlineFunc[int WrapAngle(int)] Body
MULTV d2,57.2958
PUSHR d2; UsrFunc[int AngleDir8(int)] Params End
GOTO 118; UsrFunc[int AngleDir8(int)] Call
POP d4
SETR gd5,d2
GOTO 3948; if() #6097 Body End
LOADD d2,6; InlineFunc[int Abs(int)] Params AND if() #6101 Test AND if() #6097 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOADD d2,5; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3936; Test 'if'
LOADD d2,5; if() #6103 Test AND if() #6101 Body Start
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3933; Test 'if'
SETV d2,0; if() #6103 Body Start
SETR gd5,d2
GOTO 3935; if() #6103 Body End
SETV d2,1; if() #6103 Else Start
SETR gd5,d2; if() #6103 Else End
GOTO 3948; if() #6101 Body End
LOADD d2,6; if() #6105 Test AND if() #6101 Else Start
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3946; Test 'if'
SETV d2,2; if() #6105 Body Start
SETR gd5,d2
GOTO 3948; if() #6105 Body End
SETV d2,3; if() #6105 Else Start
SETR gd5,d2; if() #6105 Else End
SETR d2,gd2; if() #6101 Else End AND if() #6097 Else End
SETR gd19,d2
SETR d2,gd3
SETR gd20,d2; if() #6094 Body End
POPARGS d5,0.0007
RETURN; Func[void Ghost_MoveXY(int, int, int)] Body End
PUSHR d2; Func[void __GhCleanUp(FFC)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2
SETV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTWIDTH,d2
SETV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTHEIGHT,d2
SETV d2,16
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFCWIDTH,d2
SETV d2,16
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFCHEIGHT,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DELAY,d2
SETV d2,0; for() #9880 setup
STORED d2,0
LOADD d2,0; for() #9880 LoopTest
COMPAREV d2,11
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4091; for() #9880 TestFail?
SETV d2,0; for() #9880 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
LOADD d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; for() #9880 Body End
LOADD d2,0; for() #9880 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 4066; for() #9880 End
POPARGS d5,0.0002
RETURN; Func[void __GhCleanUp(FFC)] Body End
SETR d4,SP; Func[void Ghost_ForceDir(int)] Body Start
LOADD d2,0
SETR gd5,d2
SETR d2,gd18
ORV d2,4
SETR gd18,d2
POPARGS d5,0.0001
RETURN; Func[void Ghost_ForceDir(int)] Body End
PUSHARGSR d2,0.0002; Func[void Ghost_Move(int, int, int)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,1
SETV d2,0
STORED d2,0
LOADD d2,4; if() #6018 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4116; Test 'if'
LOADD d2,3; if() #6018 Body Start
SUBV2 0,d2
STORED d2,0
GOTO 4194; if() #6018 Body End
LOADD d2,4; if() #6020 Test AND if() #6018 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4124; Test 'if'
LOADD d2,3; if() #6020 Body Start
STORED d2,0
GOTO 4194; if() #6020 Body End
LOADD d2,4; if() #6022 Test AND if() #6020 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4133; Test 'if'
LOADD d2,3; if() #6022 Body Start
SUBV2 0,d2
STORED d2,1
GOTO 4194; if() #6022 Body End
LOADD d2,4; if() #6024 Test AND if() #6022 Else Start
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4141; Test 'if'
LOADD d2,3; if() #6024 Body Start
STORED d2,1
GOTO 4194; if() #6024 Body End
LOADD d2,4; if() #6026 Test AND if() #6024 Else Start
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4155; Test 'if'
LOADD d2,3; if() #6026 Body Start
SUBV2 0,d2
MULTV d2,0.7071
STORED d2,1
LOADD d2,3
SUBV2 0,d2
MULTV d2,0.7071
STORED d2,0
GOTO 4194; if() #6026 Body End
LOADD d2,4; if() #6028 Test AND if() #6026 Else Start
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4168; Test 'if'
LOADD d2,3; if() #6028 Body Start
MULTV d2,0.7071
STORED d2,1
LOADD d2,3
SUBV2 0,d2
MULTV d2,0.7071
STORED d2,0
GOTO 4194; if() #6028 Body End
LOADD d2,4; if() #6030 Test AND if() #6028 Else Start
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4181; Test 'if'
LOADD d2,3; if() #6030 Body Start
SUBV2 0,d2
MULTV d2,0.7071
STORED d2,1
LOADD d2,3
MULTV d2,0.7071
STORED d2,0
GOTO 4194; if() #6030 Body End
LOADD d2,4; if() #6032 Test AND if() #6030 Else Start
COMPAREV d2,7
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4193; Test 'if'
LOADD d2,3; if() #6032 Body Start
MULTV d2,0.7071
STORED d2,1
LOADD d2,3
MULTV d2,0.7071
STORED d2,0
GOTO 4194; if() #6032 Body End
GOTO 4204; return (Void) AND if() #6032 Else
PUSHR d4; if() #6030 Else End AND if() #6028 Else End AND if() #6026 Else End AND if() #6024 Else End AND if() #6022 Else End AND if() #6020 Else End AND if() #6018 Else End
PUSHV 0.4203; UsrFunc[void Ghost_MoveXY(int, int, int)] Return Addr
LOADD d2,1; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
GOTO 3422; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
POPARGS d5,0.0005
RETURN; Func[void Ghost_Move(int, int, int)] Body End
SETR d4,SP; Func[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Body Start
LOADD d2,1; if() #9999 Test
COMPAREV d2,-1
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 4217
LOADD d2,1
COMPAREV d2,-2
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 4222; Test 'if'
SETV d2,1; if() #9999 Body Start
STORED d2,1; if() #9999 Body End
LOADD d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOADD d2,1
SETR gd11,d2
LOADD d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
LOADD d2,0
SETR gd12,d2
LOADD d2,2; if() #10001 Test
COMPAREV d2,0
GOTOTRUE 4268; Test 'if'
LOADD d2,3; if() #10001 Body Start
PUSHR d2
POP REFNPC
SETR d2,NPCX
SETR gd2,d2
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCY
SETR gd3,d2
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCZ
SETR gd4,d2
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCJUMP
SETR gd6,d2
GOTO 4300; if() #10001 Body End
LOADD d2,4; if() #10001 Else Start
PUSHR d2
POP REFFFC
SETR d2,X
SETR gd2,d2
LOADD d2,4
PUSHR d2
POP REFFFC
SETR d2,Y
SETR gd3,d2
SETV d2,0
SETR gd4,d2
SETV d2,0
SETR gd6,d2
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCJUMP,d2; if() #10001 Else End
PUSHR d4
PUSHV 0.4307; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Return Addr
LOADD d2,4; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
GOTO 2761; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCDIR
SETR gd5,d2
SETV d2,0
SETR gd7,d2
SETV d2,0
SETR gd8,d2
SETV d2,0
SETR gd9,d2
SETV d2,0
SETR gd10,d2
SETR d2,gd2
SETR gd19,d2
SETR d2,gd3
SETR gd20,d2
LOADD d2,4
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
SETR gd13,d2
LOADD d2,4
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
SETR gd14,d2
SETV d2,0
SETR gd23,d2
SETV d2,0
SETR gd24,d2
LOADD d2,1; if() #10004 Test
COMPAREV d2,1
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4419; Test 'if'
SETV d2,3; if(true) #10005 [Opt:AlwaysOn] AND if() #10004 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCEXTEND,d2
SETV d2,65456
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCOTILE,d2
SETV d2,65456; if(true) #10006 [Opt:AlwaysOn]
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTILE,d2
SETR d2,gd13
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTXSZ,d2
SETR d2,gd14
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTYSZ,d2
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHXSZ,d2
SETR d2,gd14
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHYSZ,d2; if() #10004 Body End
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
LOADD d2,3; if() #10007 Test
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,32
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4450; Test 'if'
SETV d2,1; if() #10007 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2
GOTO 4462; if() #10007 Body End
SETV d2,0; if() #10007 Else Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; if() #10007 Else End
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCHP
SETR gd15,d2
SETV d2,0
SETR gd16,d2
SETV d2,0
SETR gd17,d2
SETV d2,0
SETR gd21,d2
SETV d2,0
SETR gd22,d2
SETV d2,0
SETR gd18,d2
SETV d2,0
PUSHR d2
SETR d2,gd26
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
SETV d2,65536
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2
POPARGS d5,0.0005
RETURN; Func[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Body End
PUSHARGSR d2,0.0009; Func[NPC Ghost_InitAutoGhost(FFC, int)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,8
SETV d2,0
STORED d2,7
SETR d2,NPCCOUNT; InlineFunc[int Screen->NumNPCs()] Body AND for() #5944 setup
STORED d2,6
LOADD d2,6; for() #5944 LoopTest
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4647; for() #5944 TestFail?
LOADD d2,6; InlineFunc[NPC Screen->LoadNPC(int)] Params AND for() #5944 Body Start
SUBV d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Body Start
LOADNPCR d2
SETR d2,REFNPC; InlineFunc[NPC Screen->LoadNPC(int)] Body End
STORED d2,8
LOADD d2,8; if() #5947 Test
PUSHR d2
POP REFNPC
SETR d2,NPCID
PUSHR d2
LOADD d2,9
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4532; Test 'if'
SETV d2,0; if() #5947 Body Start
STORED d2,7
GOTO 4643; continue #5946
GOTO 4534; if() #5947 Body End
SETV d2,1; if() #5947 Else Start
STORED d2,7; if() #5947 Else End
LOADD d2,8; if() #5949 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65536
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4549; Test 'if'
SETV d2,0; if() #5949 Body Start
STORED d2,7
GOTO 4643; continue #5946 AND if() #5949 Body End
LOADD d2,7; if() #5950 Test
COMPAREV d2,0
GOTOTRUE 4598; Test 'if'
PUSHR d4; if() #5950 Body Start
PUSHV 0.4573; UsrFunc[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Return Addr
LOADD d2,10; UsrFunc[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Params Start
PUSHR d2
LOADD d2,8
PUSHR d2
PUSHV 1
LOADD d2,8
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65535
PUSHR d2
LOADD d2,8
PUSHR d2
POP REFNPC
PUSHR NPCCSET; UsrFunc[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Params End
GOTO 4206; UsrFunc[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Call
POP d4
LOADD d2,8; if() #5953 Test
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,256
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4595; Test 'if'
SETV d2,1; if() #5953 Body Start
PUSHR d2
LOADD d2,10
POP d3
PUSHR d2
PUSHR d3
SETV d2,1
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; if() #5953 Body End
LOADD d2,8; return Start
GOTO 4647; return End
GOTO 4643; if() #5950 Body End
ALLOCATEMEMV d2,60; if() #5950 Else Start
STORED d2,4
WRITEPODSTRING d2,"ghost.zh: AutoGhost initialization failed - enemy missing.\n"
ALLOCATEMEMV d2,30
STORED d2,2
WRITEPODSTRING d2,"  DMap %d, screen %X\n"
ALLOCATEMEMV d2,30
STORED d2,0
WRITEPODSTRING d2,"  Script %d, enemy ID %d\n"
LOADD d2,4; InlineFunc[void printf(char32)] Params Start
PUSHR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,2; InlineFunc[void printf(char32)] Params Start
PUSHR d2
PUSHVARGR CURDMAP
PUSHVARGR CURDSCR; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,0; InlineFunc[void printf(char32)] Params Start
PUSHR d2
LOADD d2,10
PUSHR d2
POP REFFFC
PUSHVARGR FFSCRIPT
LOADD d2,9
PUSHVARGR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
SETV d2,0
PUSHR d2
LOADD d2,10
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
QUIT; InlineFunc[void Quit()] Body
LOADD d3,0
DEALLOCATEMEMR d3
LOADD d3,2
DEALLOCATEMEMR d3
LOADD d3,4
DEALLOCATEMEMR d3; if() #5950 Else End
LOADD d2,6; for() #5944 Body End AND for() #5944 LoopIncrement
SUBV d2,1
STORED d2,6
GOTO 4505; for() #5944 End
POPARGS d5,0.0011
RETURN; Func[NPC Ghost_InitAutoGhost(FFC, int)] Body End
SETR d4,SP; Func[int VectorX(int, int)] Body Start
LOADD d2,0; InlineFunc[int Cos(int)] Params Start AND return Start
SETR d3,d2; InlineFunc[int Cos(int)] Params End
COSR d2,d3; InlineFunc[int Cos(int)] Body
PUSHR d2
LOADD d2,1
POP d3
MULTR d2,d3
GOTO 4658; return End
POPARGS d5,0.0002
RETURN; Func[int VectorX(int, int)] Body End
SETR d4,SP; Func[int VectorY(int, int)] Body Start
LOADD d2,0; InlineFunc[int Sin(int)] Params Start AND return Start
SETR d3,d2; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
PUSHR d2
LOADD d2,1
POP d3
MULTR d2,d3
GOTO 4669; return End
POPARGS d5,0.0002
RETURN; Func[int VectorY(int, int)] Body End
PUSHR d2; Func[void Ghost_MoveTowardLink(int, int)] Body Start
SETR d4,SP
PUSHR d4
PUSHV 0.4696; UsrFunc[int Angle(int, int, int, int)] Return Addr
SETR d2,gd2; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR d2
SETR d2,gd13
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd3
PUSHR d2
SETR d2,gd14
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,LINKX
ADDV d2,8
PUSHR d2
SETR d2,LINKY
ADDV d2,8
PUSHR d2; UsrFunc[int Angle(int, int, int, int)] Params End
GOTO 98; UsrFunc[int Angle(int, int, int, int)] Call
POP d4
STORED d2,0
PUSHR d4
PUSHV 0.4721; UsrFunc[void Ghost_MoveXY(int, int, int)] Return Addr
PUSHR d4; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0.4707; UsrFunc[int VectorX(int, int)] Return Addr
LOADD d2,2; UsrFunc[int VectorX(int, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[int VectorX(int, int)] Params End
GOTO 4649; UsrFunc[int VectorX(int, int)] Call
POP d4
PUSHR d2
PUSHR d4
PUSHV 0.4716; UsrFunc[int VectorY(int, int)] Return Addr
LOADD d2,2; UsrFunc[int VectorY(int, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[int VectorY(int, int)] Params End
GOTO 4660; UsrFunc[int VectorY(int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
GOTO 3422; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
POPARGS d5,0.0003
RETURN; Func[void Ghost_MoveTowardLink(int, int)] Body End
SETR d4,SP; Func[bool IsSideview()] Body Start
SETV d2,0; return Start
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,4
PUSHR d2
SETR d2,CURDMAP; InlineFunc[DMapData Game->LoadDMapData(int)] Params
LOADDMAPDATAR d2; InlineFunc[DMapData Game->LoadDMapData(int)] Body Start
SETR d2,REFDMAPDATA; InlineFunc[DMapData Game->LoadDMapData(int)] Body End
PUSHR d2
POP REFDMAPDATA
SETR d2,DMAPDATASIDEVIEW
POP d3
CASTBOOLF d2
CASTBOOLF d3
COMPARER d3,d2
SETFALSEI d2
GOTO 4743; return End
RETURN; Func[bool IsSideview()] Body End
PUSHR d2; Func[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCJUMP,d2
PUSHR d4; unless() #6235 Test
PUSHV 0.4759; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 4923; Test 'unless'
PUSHR d4; if() #6237 Test AND unless() #6235 Body Start
PUSHV 0.4765; UsrFunc[bool IsSideview()] Return Addr
GOTO 4724; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOTRUE 4882; Test 'if'
SETR d2,gd6; if() #6240 Test AND if() #6237 Body Start
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0.0001
GOTOMORE 4781
PUSHR d4
PUSHV 0.4778; UsrFunc[bool Ghost_CanMove(int, int, int)] Return Addr
PUSHARGSV 1,0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
GOTO 396; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 4881; Test 'if'
PUSHR d4; if() #6240 Body Start
PUSHV 0.4788; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
STORED d2,0
PUSHR d4
PUSHV 0.4794; UsrFunc[void Ghost_UnsetFlag(int)] Return Addr
PUSHV 64; UsrFunc[void Ghost_UnsetFlag(int)] Params
GOTO 3395; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP d4
SETR d2,gd6; if() #6245 Test
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4848; Test 'if'
PUSHR d4; if() #6245 Body Start
PUSHV 0.4806; UsrFunc[void Ghost_SetFlag(int)] Return Addr
PUSHV 32; UsrFunc[void Ghost_SetFlag(int)] Params
GOTO 3369; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK d4
PUSHV 0.4812; UsrFunc[void Ghost_Move(int, int, int)] Return Addr
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR gd6
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
GOTO 4101; UsrFunc[void Ghost_Move(int, int, int)] Call
POP d4
SETR d2,gd6; InlineFunc[untyped Max(untyped, untyped)] Params Start
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
SETR gd6,d2
SETR d2,gd6; if() #6249 Test
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4836
PUSHR d4
PUSHV 0.4832; UsrFunc[bool Ghost_CanMove(int, int, int)] Return Addr
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
GOTO 396; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 4842; Test 'if'
SETV d2,0; if() #6249 Body Start
SETR gd6,d2; if() #6249 Body End
PUSHR d4
PUSHV 0.4846; UsrFunc[void Ghost_UnsetFlag(int)] Return Addr
PUSHV 32; UsrFunc[void Ghost_UnsetFlag(int)] Params
GOTO 3395; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP d4
GOTO 4873; if() #6245 Body End
PUSHR d4; if() #6245 Else Start
PUSHV 0.4856; UsrFunc[void Ghost_Move(int, int, int)] Return Addr
PUSHV 1; UsrFunc[void Ghost_Move(int, int, int)] Params Start
SETR d2,gd6
SUBV2 0,d2
PUSHR d2
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
GOTO 4101; UsrFunc[void Ghost_Move(int, int, int)] Call
PEEK d4
PUSHV 0.4861; UsrFunc[bool Ghost_CanMove(int, int, int)] Return Addr
PUSHARGSV 1,0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
GOTO 396; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 4871; Test 'if'
SETR d2,gd6; InlineFunc[untyped Max(untyped, untyped)] Params Start AND if() #6254 Body Start
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
SETR gd6,d2
GOTO 4873; if() #6254 Body End
SETV d2,0; if() #6254 Else Start
SETR gd6,d2; if() #6254 Else End
LOADD d2,0; if() #6245 Else End AND if() #6257 Test
COMPAREV d2,0
GOTOTRUE 4881; Test 'if'
PUSHR d4; if() #6257 Body Start
PUSHV 0.4880; UsrFunc[void Ghost_SetFlag(int)] Return Addr
PUSHV 64; UsrFunc[void Ghost_SetFlag(int)] Params
GOTO 3369; UsrFunc[void Ghost_SetFlag(int)] Call
POP d4; if() #6257 Body End
GOTO 4923; if() #6240 Body End AND if() #6237 Body End
SETR d2,gd6; if() #6259 Test AND if() #6237 Else Start
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0.0001
GOTOMORE 4894
SETR d2,gd4
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 4923; Test 'if'
SETR d2,gd4; if() #6261 Test AND if() #6259 Body Start
PUSHR d2
SETR d2,gd6
POP d3
ADDR d2,d3
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 4911; Test 'if'
SETV d2,0; if() #6261 Body Start
SETR gd4,d2
SETV d2,0
SETR gd6,d2
GOTO 4923; if() #6261 Body End
SETR d2,gd4; if() #6261 Else Start
PUSHR d2
SETR d2,gd6
POP d3
ADDR d2,d3
SETR gd4,d2
SETR d2,gd6; InlineFunc[untyped Max(untyped, untyped)] Params Start
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
SETR gd6,d2; if() #6261 Else End
SETR d2,gd7; if() #6259 Body End AND if() #6237 Else End AND unless() #6235 Body End AND if() #6263 Test
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0.0001
GOTOMORE 4933
SETR d2,gd8
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 4941
SETR d2,gd9
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 4949
SETR d2,gd10
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 4975; Test 'if'
SETR d2,gd7; if() #6263 Body Start
PUSHR d2
SETR d2,gd9
POP d3
ADDR d2,d3
SETR gd7,d2
SETR d2,gd8
PUSHR d2
SETR d2,gd10
POP d3
ADDR d2,d3
SETR gd8,d2
PUSHR d4
PUSHV 0.4970; UsrFunc[void Ghost_MoveXY(int, int, int)] Return Addr
PUSHR gd7; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR gd8
PUSHV 2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
GOTO 3422; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
PEEK d4
PUSHV 0.4974; UsrFunc[void Ghost_ForceDir(int)] Return Addr
PUSHR gd5; UsrFunc[void Ghost_ForceDir(int)] Params
GOTO 4093; UsrFunc[void Ghost_ForceDir(int)] Call
POP d4; if() #6263 Body End
PUSHR d4
PUSHV 0.4982; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Return Addr
LOADD d2,4; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
GOTO 2761; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
PUSHV 0.4990; UsrFunc[void __Ghost_WaitframePart1(FFC, NPC, bool)] Return Addr
LOADD d2,4; UsrFunc[void __Ghost_WaitframePart1(FFC, NPC, bool)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2
PUSHV 0; UsrFunc[void __Ghost_WaitframePart1(FFC, NPC, bool)] Params End
GOTO 5023; UsrFunc[void __Ghost_WaitframePart1(FFC, NPC, bool)] Call
PEEK d4
PUSHV 0.4997; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Return Addr
LOADD d2,4; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params End
GOTO 2066; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Call
PEEK d4
PUSHV 0.5004; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Return Addr
LOADD d2,4; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
GOTO 2341; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
SETR d2,gd18
ANDV d2,32
SETR gd18,d2
PUSHR d4; return Start
PUSHV 0.5019; UsrFunc[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Return Addr
LOADD d2,4; UsrFunc[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,1
PUSHR d2; UsrFunc[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Params End
GOTO 5553; UsrFunc[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Call
POP d4
GOTO 5021; return End
POPARGS d5,0.0005
RETURN; Func[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Body End
PUSHARGSR d2,0.0002; Func[void __Ghost_WaitframePart1(FFC, NPC, bool)] Body Start
SETR d4,SP
SETR d2,gd18; if() #10128 Test
ANDV d2,4
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5041; Test 'if'
SETR d2,gd5; if() #10128 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCDIR,d2
GOTO 5152; if() #10128 Body End
LOADD d2,2; if() #10130 Test AND if() #10128 Else Start
COMPAREV d2,0
GOTOTRUE 5050; Test 'if'
LOADD d2,3; if() #10130 Body Start
PUSHR d2
POP REFNPC
SETR d2,NPCDIR
SETR gd5,d2
GOTO 5152; if() #10130 Body End
PUSHR d4; if() #10132 Test AND if() #10130 Else Start
PUSHV 0.5054; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 5075
SETR d2,gd19
PUSHR d2
SETR d2,gd2
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0.0001
GOTOMORE 5073
SETR d2,gd20
PUSHR d2
SETR d2,gd3
POP d3
COMPARER d3,d2
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 5152; Test 'if'
SETR d2,gd2; if() #10132 Body Start
PUSHR d2
SETR d2,gd19
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,1
SETR d2,gd3
PUSHR d2
SETR d2,gd20
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,0
PUSHR d4; if() #10136 Test
PUSHV 0.5097; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 5115; Test 'if'
PUSHR d4; if() #10136 Body Start
PUSHV 0.5112; UsrFunc[int AngleDir8(int)] Return Addr
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapAngle(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR d2
LOADD d2,0
SETR d1,d2; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapAngle(int)] Params End
WRAPRADIANS d2; InlineFunc[int WrapAngle(int)] Body
MULTV d2,57.2958
PUSHR d2; UsrFunc[int AngleDir8(int)] Params End
GOTO 118; UsrFunc[int AngleDir8(int)] Call
POP d4
SETR gd5,d2
GOTO 5152; if() #10136 Body End
LOADD d2,1; InlineFunc[int Abs(int)] Params AND if() #10140 Test AND if() #10136 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOADD d2,0; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5140; Test 'if'
LOADD d2,1; if() #10142 Test AND if() #10140 Body Start
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5137; Test 'if'
SETV d2,2; if() #10142 Body Start
SETR gd5,d2
GOTO 5139; if() #10142 Body End
SETV d2,3; if() #10142 Else Start
SETR gd5,d2; if() #10142 Else End
GOTO 5152; if() #10140 Body End
LOADD d2,0; if() #10144 Test AND if() #10140 Else Start
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5150; Test 'if'
SETV d2,0; if() #10144 Body Start
SETR gd5,d2
GOTO 5152; if() #10144 Body End
SETV d2,1; if() #10144 Else Start
SETR gd5,d2; if() #10144 Else End
SETR d2,gd5; if() #10140 Else End AND if() #10136 Else End AND if() #10132 Body End AND if() #10130 Else End AND if() #10128 Else End
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCDIR,d2
SETR d2,gd2
SETR gd19,d2
SETR d2,gd3
SETR gd20,d2
SETR d2,gd11; if() #10146 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 5175
SETR d2,gd11
COMPAREV d2,1
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 5199; Test 'if'
LOADD d2,4; if() #10149 Test AND if() #10146 Body Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5198; Test 'if'
SETR d2,gd11; if() #10149 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #10149 Body End
GOTO 5299; if() #10146 Body End
PUSHR d4; if() #10150 Test AND if() #10146 Else Start
PUSHV 0.5203; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 5239; Test 'if'
LOADD d2,4; if() #10153 Test AND if() #10150 Body Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
PUSHR d2
SETR d2,gd5
POP d3
ADDR d2,d3
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5238; Test 'if'
SETR d2,gd11; if() #10153 Body Start
PUSHR d2
PUSHR d4
PUSHV 0.5227; UsrFunc[int __NormalizeDir(int)] Return Addr
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
GOTO 482; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #10153 Body End
GOTO 5299; if() #10150 Body End
PUSHR d4; if() #10155 Test AND if() #10150 Else Start
PUSHV 0.5243; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 5279; Test 'if'
LOADD d2,4; if() #10158 Test AND if() #10155 Body Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
PUSHR d2
SETR d2,gd5
POP d3
ADDR d2,d3
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5278; Test 'if'
SETR d2,gd11; if() #10158 Body Start
PUSHR d2
PUSHR d4
PUSHV 0.5267; UsrFunc[int __NormalizeDir(int)] Return Addr
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
GOTO 482; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #10158 Body End
GOTO 5299; if() #10155 Body End
LOADD d2,4; if() #10160 Test AND if() #10155 Else Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5299; Test 'if'
SETR d2,gd11; if() #10160 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #10160 Body End
LOADD d2,4; if() #10155 Else End AND if() #10150 Else End AND if() #10146 Else End AND if() #10161 Test
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
PUSHR d2
SETR d2,gd13
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5319; Test 'if'
SETR d2,gd13; if() #10161 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTWIDTH,d2; if() #10161 Body End
LOADD d2,3; if() #10162 Test
PUSHR d2
POP REFNPC
SETR d2,NPCTXSZ
PUSHR d2
SETR d2,gd13
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5363; Test 'if'
SETR d2,gd13; if() #10162 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTXSZ,d2
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHXSZ,d2
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHXOFS,d2; if() #10162 Body End
LOADD d2,4; if() #10163 Test
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
PUSHR d2
SETR d2,gd14
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5383; Test 'if'
SETR d2,gd14; if() #10163 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTHEIGHT,d2; if() #10163 Body End
LOADD d2,3; if() #10164 Test
PUSHR d2
POP REFNPC
SETR d2,NPCTYSZ
PUSHR d2
SETR d2,gd14
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5427; Test 'if'
SETR d2,gd14; if() #10164 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTYSZ,d2
SETR d2,gd14
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHYSZ,d2
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHYOFS,d2; if() #10164 Body End
PUSHR d4; if() #10165 Test
PUSHV 0.5431; UsrFunc[bool Ghost_FlagIsSet(int)] Return Addr
PUSHV 128; UsrFunc[bool Ghost_FlagIsSet(int)] Params
GOTO 1636; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 5497; Test 'if'
SETR d2,gd4; if() #10167 Test AND if() #10165 Body Start
COMPAREV d2,32
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 5449
LOADD d2,4
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 5466; Test 'if'
SETV d2,1; if() #10167 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2
GOTO 5497; if() #10167 Body End
SETR d2,gd4; if() #10170 Test AND if() #10167 Else Start
COMPAREV d2,32
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5481
LOADD d2,4
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 5497; Test 'if'
SETV d2,0; if() #10170 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; if() #10170 Body End
SETR d2,gd15; if() #10167 Else End AND if() #10165 Body End
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHP,d2
SETR d2,gd12
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCCSET,d2
SETR d2,gd18; if() #10172 Test
ANDV d2,8
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5531; Test 'if'
SETR d2,gd12; if() #10172 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
GOTO 5545; if() #10172 Body End
SETR d2,gd21; if() #10174 Test AND if() #10172 Else Start
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 5545; Test 'if'
SETR d2,gd12; if() #10174 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2; if() #10174 Body End
PUSHR d4; if() #10172 Else End
PUSHV 0.5550; UsrFunc[void __Ghost_DrawShadow(NPC)] Return Addr
LOADD d2,3; UsrFunc[void __Ghost_DrawShadow(NPC)] Params Start
PUSHR d2; UsrFunc[void __Ghost_DrawShadow(NPC)] Params End
GOTO 2154; UsrFunc[void __Ghost_DrawShadow(NPC)] Call
POP d4
POPARGS d5,0.0005
RETURN; Func[void __Ghost_WaitframePart1(FFC, NPC, bool)] Body End
PUSHR d2; Func[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Body Start
SETR d4,SP
LOADD d2,3; InlineFunc[bool NPC->isValid()] Params AND unless() #10177 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOFALSE 5582; Test 'unless'
LOADD d2,2; if() #10178 Test AND unless() #10177 Body Start
COMPAREV d2,0
GOTOTRUE 5574; Test 'if'
PUSHR d4; if() #10178 Body Start
PUSHV 0.5567; UsrFunc[void __GhCleanUp(FFC)] Return Addr
LOADD d2,4; UsrFunc[void __GhCleanUp(FFC)] Params Start
PUSHR d2; UsrFunc[void __GhCleanUp(FFC)] Params End
GOTO 3954; UsrFunc[void __GhCleanUp(FFC)] Call
POP d4
SETV d2,0
SETR gd11,d2
PUSHR d4
PUSHV 0.5573; UsrFunc[void Ghost_ClearCombos()] Return Addr
GOTO 3361; UsrFunc[void Ghost_ClearCombos()] Call
POP d4; if() #10178 Body End
LOADD d2,1; if() #10181 Test
COMPAREV d2,0
GOTOTRUE 5578; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #10181 Body
SETV d2,0
SETR gd15,d2
SETV d2,0; return Start
GOTO 5711; return End AND unless() #10177 Body End
SETV d2,0
STORED d2,0
LOADD d2,3; if() #10182 Test
PUSHR d2
POP REFNPC
SETR d2,NPCHP
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 5594; Test 'if'
SETV d2,1; if() #10182 Body Start
STORED d2,0; if() #10182 Body End
LOADD d2,0; unless() #10183 Test
COMPAREV d2,0
GOTOFALSE 5615; Test 'unless'
PUSHR d4; unless() #10183 Body Start
PUSHV 0.5604; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Return Addr
LOADD d2,4; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params End
GOTO 2897; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Call
PEEK d4
PUSHV 0.5611; UsrFunc[bool Ghost_CheckFreeze(FFC, NPC)] Return Addr
LOADD d2,4; UsrFunc[bool Ghost_CheckFreeze(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[bool Ghost_CheckFreeze(FFC, NPC)] Params End
GOTO 1775; UsrFunc[bool Ghost_CheckFreeze(FFC, NPC)] Call
POP d4
COMPAREV d2,0
SETTRUEI d2
STORED d2,0; unless() #10183 Body End
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCHP
SETR gd15,d2
LOADD d2,0; if() #10186 Test
COMPAREV d2,0
GOTOTRUE 5709; Test 'if'
LOADD d2,2; if() #10187 Test AND if() #10186 Body Start
COMPAREV d2,0
GOTOTRUE 5703; Test 'if'
SETV d2,1; if() #10187 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTXSZ,d2
SETV d2,1
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTYSZ,d2
SETR d2,gd2
PUSHR d2
SETR d2,gd13
SUBV d2,1
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd13
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETR d2,gd3
PUSHR d2
SETR d2,gd14
SUBV d2,1
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd14
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETR d2,gd4
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2
PUSHR d4
PUSHV 0.5700; UsrFunc[void __GhCleanUp(FFC)] Return Addr
LOADD d2,4; UsrFunc[void __GhCleanUp(FFC)] Params Start
PUSHR d2; UsrFunc[void __GhCleanUp(FFC)] Params End
GOTO 3954; UsrFunc[void __GhCleanUp(FFC)] Call
POP d4
SETV d2,0
SETR gd11,d2; if() #10187 Body End
LOADD d2,1; if() #10189 Test
COMPAREV d2,0
GOTOTRUE 5707; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #10189 Body
SETV d2,0; return Start
GOTO 5711; return End AND if() #10186 Body End
SETV d2,1; return Start
GOTO 5711; return End
POPARGS d5,0.0005
RETURN; Func[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Body End
PUSHARGSR d2,0.0006; Func[void __SetUpDrawingArray(FFC, NPC, int)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,5
LOADD d2,8; if() #10217 Test
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOTRUE 5729; Test 'if'
LOADD d2,5; if() #10217 Body Start
ORV d2,4
STORED d2,5; if() #10217 Body End
LOADD d2,8; if() #10218 Test
PUSHR d2
SETV d2,1
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOTRUE 5741; Test 'if'
LOADD d2,5; if() #10218 Body Start
ORV d2,1
STORED d2,5; if() #10218 Body End
PUSHR d4; if() #10219 Test
PUSHV 0.5746; UsrFunc[bool __Ghost_IsFlickering(NPC)] Return Addr
LOADD d2,7; UsrFunc[bool __Ghost_IsFlickering(NPC)] Params Start
PUSHR d2; UsrFunc[bool __Ghost_IsFlickering(NPC)] Params End
GOTO 6071; UsrFunc[bool __Ghost_IsFlickering(NPC)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 5752; Test 'if'
LOADD d2,5; if() #10219 Body Start
ORV d2,2
STORED d2,5; if() #10219 Body End
LOADD d2,8
PUSHR d2
POP REFFFC
SETR d2,CSET
PUSHR d2
LOADD d2,6
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
LOADD d2,5
PUSHR d2
LOADD d2,6
SETR d0,d2
POP d2
WRITEPODARRAYVR 2,d2
SETV d2,3
STORED d2,4
SETR d2,gd2
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFNPC
SETR d2,NPCXOFS
POP d3
ADDR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFNPC
SETR d2,NPCYOFS
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd4
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFNPC
SETR d2,NPCZOFS
POP d3
ADDR d2,d3
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,2
SETR d2,gd26; if() #10221 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5931; Test 'if'
SETV d2,1; if() #10221 Body Start
STORED d2,1
SETV d2,0; for() #10222 setup
STORED d2,0
LOADD d2,0; for() #10222 LoopTest
PUSHR d2
SETR d2,gd26
PUSHR d2
POP d0
READPODARRAYV d2,0
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5931; for() #10222 TestFail?
SETR d2,gd26; for() #10222 Body Start
PUSHR d2
LOADD d2,1
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,3
PUSHR d2
SETR d2,gd26
PUSHR d2
LOADD d2,1
ADDV d2,1
POP d0
READPODARRAYR d2,d2
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,1
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,2
PUSHR d2
SETR d2,gd26
PUSHR d2
LOADD d2,1
ADDV d2,2
POP d0
READPODARRAYR d2,d2
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,2
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
SETR d2,gd26
PUSHR d2
LOADD d2,1
ADDV d2,3
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,3
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
SETR d2,gd26
PUSHR d2
LOADD d2,1
ADDV d2,4
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,4
ADDV d2,6
STORED d2,4
LOADD d2,1
ADDV d2,6
STORED d2,1
LOADD d2,6
PUSHR d2
POP d0
READPODARRAYV d2,0
PUSHR d2
ADDV d2,1
PUSHR d2
LOADD d2,6
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
POP d2; for() #10222 Body End
LOADD d2,0; for() #10222 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 5813; for() #10222 End
LOADD d2,8; if() #10221 Body End AND if(true) #10225 [Opt:AlwaysOn]
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,3
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,1
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,2
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,2
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,8
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,3
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,8
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,6
PUSHR d2
POP d0
READPODARRAYV d2,0
PUSHR d2
ADDV d2,1
PUSHR d2
LOADD d2,6
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
POP d2
POPARGS d5,0.0009
RETURN; Func[void __SetUpDrawingArray(FFC, NPC, int)] Body End
PUSHR d2; Func[void __HideFFCAndWait(FFC)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,DATA
STORED d2,0
SETV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
WAITFRAME; InlineFunc[void Waitframe()] Body
LOADD d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
POPARGS d5,0.0002
RETURN; Func[void __HideFFCAndWait(FFC)] Body End
PUSHR d2; Func[bool IsPit(int)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
POP d0
SETR d2,COMBOTD
STORED d2,0
LOADD d2,0; if() #6751 Test
COMPAREV d2,41
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6045; Test 'if'
SETV d2,1; return Start AND if() #6751 Body Start
GOTO 6069; return End AND if() #6751 Body End
LOADD d2,0; if() #6752 Test
COMPAREV d2,93
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6052; Test 'if'
SETV d2,1; return Start AND if() #6752 Body Start
GOTO 6069; return End AND if() #6752 Body End
LOADD d2,0; if() #6753 Test
COMPAREV d2,80
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 6061
LOADD d2,0
COMPAREV d2,82
SETLESSI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 6067; Test 'if'
SETV d2,1; return Start AND if() #6753 Body Start
GOTO 6069; return End AND if() #6753 Body End
SETV d2,0; return Start
GOTO 6069; return End
POPARGS d5,0.0002
RETURN; Func[bool IsPit(int)] Body End
SETR d4,SP; Func[bool __Ghost_IsFlickering(NPC)] Body Start
LOADD d2,0; if() #10012 Test
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,128
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 6083; Test 'if'
SETV d2,1; return Start AND if() #10012 Body Start
GOTO 6085; return End AND if() #10012 Body End
SETV d2,0; return Start
GOTO 6085; return End
POPARGS d5,0.0001
RETURN; Func[bool __Ghost_IsFlickering(NPC)] Body End
PUSHARGSR d2,0.0004; Func[void SpawnAnimation(FFC, NPC)] Body Start
SETR d4,SP
LOADD d2,5
PUSHR d2
POP REFFFC
SETR d2,DATA
STORED d2,3
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCCOLLDET
STORED d2,2
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCXOFS
STORED d2,1
PUSHR d4
PUSHV 0.6111; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Return Addr
LOADD d2,5; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
GOTO 2761; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFNPC
SETR NPCCOLLDET,d2
SETV d2,0; for() #12272 setup
STORED d2,0
LOADD d2,0; for() #12272 LoopTest
COMPAREV d2,32
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6244; for() #12272 TestFail?
SETV d2,0; for() #12272 Body Start
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
SETV d2,32768
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
PUSHR d4
PUSHV 0.6156; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Return Addr
LOADD d2,5; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
GOTO 2761; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
PUSHV 0.6163; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Return Addr
LOADD d2,5; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
GOTO 2341; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
LOADD d2,3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOADD d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
PUSHR d4
PUSHV 0.6189; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Return Addr
LOADD d2,5; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
GOTO 2761; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
PUSHV 0.6196; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Return Addr
LOADD d2,5; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
GOTO 2341; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
LOADD d2,0; if() #12279 Test
COMPAREV d2,29
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6238; Test 'if'
SETR d2,UNDERCOMBO; if() #12279 Body Start
PUSHR d2
PUSHR d4
PUSHV 0.6215; UsrFunc[int ComboAt(int, int)] Return Addr
LOADD d2,5; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR d2
POP REFFFC
PUSHR X
LOADD d2,5
PUSHR d2
POP REFFFC
PUSHR Y; UsrFunc[int ComboAt(int, int)] Params End
GOTO 280; UsrFunc[int ComboAt(int, int)] Call
POP d4
PUSHR d2
POP d0
POP d2
SETR COMBODD,d2
SETR d2,UNDERCSET
PUSHR d2
PUSHR d4
PUSHV 0.6233; UsrFunc[int ComboAt(int, int)] Return Addr
LOADD d2,5; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR d2
POP REFFFC
PUSHR X
LOADD d2,5
PUSHR d2
POP REFFFC
PUSHR Y; UsrFunc[int ComboAt(int, int)] Params End
GOTO 280; UsrFunc[int ComboAt(int, int)] Call
POP d4
PUSHR d2
POP d0
POP d2
SETR COMBOCD,d2; if() #12279 Body End
LOADD d2,0; for() #12272 Body End AND for() #12272 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 6124; for() #12272 End
LOADD d2,3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOADD d2,2
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFNPC
SETR NPCCOLLDET,d2
LOADD d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
POPARGS d5,0.0006
RETURN; Func[void SpawnAnimation(FFC, NPC)] Body End


PUSHV 0; void run() Body Start
SETR d4,SP
PUSHR d4
PUSHV 0.0006; UsrFunc[void StartGhostZH()] Return Addr
GOTO 2597; UsrFunc[void StartGhostZH()] Call
POP d4
PUSHR d4; while(true) #12261 Body [Opt:AlwaysOn] Start
PUSHV 0.0010; UsrFunc[void UpdateGhostZH1()] Return Addr
GOTO 9302; UsrFunc[void UpdateGhostZH1()] Call
POP d4
WAITDRAW; InlineFunc[void Waitdraw()] Body
PUSHR d4
PUSHV 0.0015; UsrFunc[void UpdateGhostZH2()] Return Addr
GOTO 9371; UsrFunc[void UpdateGhostZH2()] Call
POP d4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #12261 Body [Opt:AlwaysOn] End
GOTO 7; while() #12261 End
POPARGS d5,0.0001
QUIT; void run() Body End
POP d2; Func[int Distance(int, int, int, int)] Body Start
POP d1
POP d0
POP d6
SETR d2,DISTANCE
RETURN; Func[int Distance(int, int, int, int)] Body End
SETR d4,SP; Func[int RadianAngle(int, int, int, int)] Body Start
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND return Start
PUSHR d2
LOADD d2,3
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
GOTO 42; return End
POPARGS d5,0.0004
RETURN; Func[int RadianAngle(int, int, int, int)] Body End
SETR d4,SP; Func[int Randf(int)] Body Start
SETV d2,0; InlineFunc[long RNG->LRand(long)] Params Start AND return Start
PUSHR d2
LOADD d2,0; InlineFunc[long RNG->LRand(long)] Params End
POP REFRNG; InlineFunc[long RNG->LRand(long)] Body Start
RNGLRAND2 d2; InlineFunc[long RNG->LRand(long)] Body End
GOTO 51; return End
POPARGS d5,0.0001
RETURN; Func[int Randf(int)] Body End
SETR d4,SP; Func[int Angle(int, int, int, int)] Body Start
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR d2
LOADD d2,3
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
SETR d3,d2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
GOTO 71; return End
POPARGS d5,0.0004
RETURN; Func[int Angle(int, int, int, int)] Body End
PUSHARGSR d2,0.0007; Func[void AutoGhost()] Body Start
SETR d4,SP
SETR d2,gd27; if() #3623 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,2
COMPAREV d2,0
GOTOTRUE 83; Test 'if'
GOTO 449; return (Void) AND if() #3623 Body
SETV d2,0
STORED d2,6
SETV d2,0
STORED d2,5
SETV d2,0
STORED d2,4
SETR d2,NPCCOUNT; InlineFunc[int Screen->NumNPCs()] Body AND for() #3624 setup
STORED d2,3
LOADD d2,3; for() #3624 LoopTest
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 449; for() #3624 TestFail?
LOADD d2,3; InlineFunc[NPC Screen->LoadNPC(int)] Params AND for() #3624 Body Start
SUBV d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Body Start
LOADNPCR d2
SETR d2,REFNPC; InlineFunc[NPC Screen->LoadNPC(int)] Body End
STORED d2,6
LOADD d2,6; if() #3627 Test
PUSHR d2
POP REFNPC
SETR d2,NPCID
COMPAREV d2,20
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 114; Test 'if'
GOTO 445; continue #3626 AND if() #3627 Body
LOADD d2,6; if() #3628 Test
PUSHR d2
POP REFNPC
SETR d2,NPCID
COMPAREV d2,511
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 125; Test 'if'
GOTO 445; continue #3626 AND if() #3628 Body
LOADD d2,6; if() #3630 Test AND if(false) #3629 [Opt:AlwaysOff]
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65536
COMPAREV d2,0
GOTOTRUE 136; Test 'if'
GOTO 445; continue #3626 AND if() #3630 Body
LOADD d2,6; unless() #3631 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
COMPAREV d2,0
GOTOFALSE 146; Test 'unless'
GOTO 445; continue #3626 AND unless() #3631 Body
LOADD d2,6; unless() #3632 Test
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
COMPAREV d2,0
GOTOFALSE 156; Test 'unless'
GOTO 445; continue #3626 AND unless() #3632 Body
SETV d2,0
STORED d2,2
SETV d2,0
STORED d2,1
LOADD d2,6; if(false) #3633 [Opt:AlwaysOff]
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
STORED d2,1
LOADD d2,6
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
STORED d2,2
LOADD d2,2; if() #3634 Test
COMPAREV d2,-1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 198; Test 'if'
ALLOCATEMEMV d2,2; if() #3634 Body Start
STORED d2,0
PUSHR d4
PUSHV 0.0190; UsrFunc[int __AutoGhostParseName(NPC, int)] Return Addr
LOADD d2,6; UsrFunc[int __AutoGhostParseName(NPC, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[int __AutoGhostParseName(NPC, int)] Params End
GOTO 451; UsrFunc[int __AutoGhostParseName(NPC, int)] Call
POP d4
LOADD d2,0
PUSHR d2
POP d0
READPODARRAYV d2,0
STORED d2,2
LOADD d3,0
DEALLOCATEMEMR d3; if() #3634 Body End
LOADD d2,2; if() #3637 Test
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 210; Test 'if'
PUSHR d4; if() #3637 Body Start
PUSHV 0.0208; UsrFunc[void __AutoGhostKill(NPC)] Return Addr
LOADD d2,6; UsrFunc[void __AutoGhostKill(NPC)] Params Start
PUSHR d2; UsrFunc[void __AutoGhostKill(NPC)] Params End
GOTO 767; UsrFunc[void __AutoGhostKill(NPC)] Call
POP d4
GOTO 445; continue #3626 AND if() #3637 Body End
LOADD d2,2; if() #3640 Test
COMPAREV d2,511
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 224; Test 'if'
PUSHR d4; if() #3640 Body Start
PUSHV 0.0222; UsrFunc[void __AutoGhostKill(NPC)] Return Addr
LOADD d2,6; UsrFunc[void __AutoGhostKill(NPC)] Params Start
PUSHR d2; UsrFunc[void __AutoGhostKill(NPC)] Params End
GOTO 767; UsrFunc[void __AutoGhostKill(NPC)] Call
POP d4
GOTO 445; continue #3626 AND if() #3640 Body End
PUSHR d4
PUSHV 0.0229; UsrFunc[int FindUnusedFFC(int)] Return Addr
LOADD d2,5; UsrFunc[int FindUnusedFFC(int)] Params Start
PUSHR d2; UsrFunc[int FindUnusedFFC(int)] Params End
GOTO 818; UsrFunc[int FindUnusedFFC(int)] Call
POP d4
STORED d2,5
LOADD d2,5; unless() #3644 Test
COMPAREV d2,0
GOTOFALSE 241; Test 'unless'
PUSHR d4; unless() #3644 Body Start
PUSHV 0.0239; UsrFunc[void __AutoGhostKill(NPC)] Return Addr
LOADD d2,6; UsrFunc[void __AutoGhostKill(NPC)] Params Start
PUSHR d2; UsrFunc[void __AutoGhostKill(NPC)] Params End
GOTO 767; UsrFunc[void __AutoGhostKill(NPC)] Call
POP d4
GOTO 445; continue #3626 AND unless() #3644 Body End
LOADD d2,5; InlineFunc[FFC Screen->LoadFFC(int)] Params
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,4
SETV d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCCSET
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
SETV d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTWIDTH,d2
SETV d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTHEIGHT,d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCX
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCY
PUSHR d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCZ
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2
LOADD d2,2
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFSCRIPT,d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCID
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFINITDD,d2
SETV d2,1; if(true) #3646 [Opt:AlwaysOn]
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2
LOADD d2,1; if() #3647 Test
COMPAREV d2,1
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 415; Test 'if'
LOADD d2,1; if() #3648 Test AND if() #3647 Body Start
COMPAREV d2,-1
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 415; Test 'if'
SETV d2,3; if() #3648 Body Start
PUSHR d2
LOADD d2,6
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCEXTEND,d2
SETV d2,1024
PUSHR d2
LOADD d2,6
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2; if() #3648 Body End
LOADD d2,1; if() #3647 Body End AND if() #3649 Test
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 433; Test 'if'
SETV d2,1; if() #3649 Body Start
PUSHR d2
LOADD d2,6
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2
GOTO 445; if() #3649 Body End
LOADD d2,1; if() #3649 Else Start
PUSHR d2
LOADD d2,6
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2; if() #3649 Else End
LOADD d2,3; for() #3624 Body End AND for() #3624 LoopIncrement
SUBV d2,1
STORED d2,3
GOTO 91; for() #3624 End
POPARGS d5,0.0007
RETURN; Func[void AutoGhost()] Body End
PUSHARGSR d2,0.0009; Func[int __AutoGhostParseName(NPC, int)] Body Start
SETR d4,SP
ALLOCATEMEMV d2,64
STORED d2,8
ALLOCATEMEMV d2,64
STORED d2,7
SETV d2,1
PUSHR d2
LOADD d2,9
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
LOADD d2,10; InlineFunc[void NPC->GetName(int)] Params Start
PUSHR d2
LOADD d2,8; InlineFunc[void NPC->GetName(int)] Params End
POP REFNPC; InlineFunc[void NPC->GetName(int)] Body Start
NPCNAME d2; InlineFunc[void NPC->GetName(int)] Body End
SETV d2,0; for() #9664 setup
STORED d2,6
LOADD d2,6; for() #9664 LoopTest
COMPAREV d2,63
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 705; for() #9664 TestFail?
LOADD d2,8; if() #9667 Test AND for() #9664 Body Start
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
COMPAREV d2,64
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 701; Test 'if'
LOADD d2,8; if() #9667 Body Start
PUSHR d2
LOADD d2,6
ADDV d2,1
POP d0
READPODARRAYR d2,d2
STORED d2,5
PUSHR d4; if() #9668 Test
PUSHV 0.0499; UsrFunc[bool __IsScriptNameChar(int, bool)] Return Addr
LOADD d2,5; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
GOTO 9500; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 598; Test 'if'
SETV d2,0; if() #9668 Body Start
STORED d2,4
LOADD d2,6; for() #9672 setup
ADDV d2,1
STORED d2,6
PUSHR d4; for() #9672 LoopTest
PUSHV 0.0517; UsrFunc[bool __IsScriptNameChar(int, bool)] Return Addr
LOADD d2,8; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
PUSHR d2
PUSHV 0; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
GOTO 9500; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 540; for() #9672 TestFail?
LOADD d2,8; for() #9672 Body Start
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,4
ADDV d2,1
STORED d2,4; for() #9672 Body End
LOADD d2,6; for() #9672 LoopIncrement
ADDV d2,1
STORED d2,6
GOTO 507; for() #9672 End
SETV d2,0
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,7; InlineFunc[int Game->GetFFCScript(int)] Params
GETFFCSCRIPT d2; InlineFunc[int Game->GetFFCScript(int)] Body
PUSHR d2
LOADD d2,9
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
LOADD d2,6
SUBV d2,1
STORED d2,6
LOADD d2,9; if() #9676 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 597; Test 'if'
ALLOCATEMEMV d2,59; if() #9676 Body Start
STORED d2,2
WRITEPODSTRING d2,"ghost.zh: AutoGhost setup failed - script does not exist.\n"
ALLOCATEMEMV d2,80
STORED d2,0
WRITEPODSTRING d2,"  Script name: %s\n"
LOADD d2,2; InlineFunc[void printf(char32)] Params Start
PUSHR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,0; InlineFunc[void printf(char32)] Params Start
PUSHR d2
LOADD d2,7
PUSHVARGR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
SETV d2,0; return Start
LOADD d3,0
DEALLOCATEMEMR d3
LOADD d3,2
DEALLOCATEMEMR d3
LOADD d3,7
DEALLOCATEMEMR d3
LOADD d3,8
DEALLOCATEMEMR d3
GOTO 765; return End
LOADD d3,0
DEALLOCATEMEMR d3
LOADD d3,2
DEALLOCATEMEMR d3; if() #9676 Body End
GOTO 701; if() #9668 Body End
LOADD d2,5; if() #9677 Test AND if() #9668 Else Start
COMPAREV d2,48
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 607
LOADD d2,5
COMPAREV d2,57
SETLESSI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 616
LOADD d2,5
COMPAREV d2,45
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 701; Test 'if'
SETV d2,0; if() #9677 Body Start
STORED d2,4
LOADD d2,5; if() #9680 Test
COMPAREV d2,45
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 637; Test 'if'
SETV d2,45; if() #9680 Body Start
PUSHR d2
LOADD d2,7
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
SETV d2,1
STORED d2,4
LOADD d2,6
ADDV d2,1
STORED d2,6; if() #9680 Body End
LOADD d2,6; for() #9681 setup
ADDV d2,1
STORED d2,6
LOADD d2,8; for() #9681 LoopTest
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
COMPAREV d2,48
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 657
LOADD d2,8
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
COMPAREV d2,57
SETLESSI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 681; for() #9681 TestFail?
LOADD d2,8; for() #9681 Body Start
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,4
ADDV d2,1
STORED d2,4; for() #9681 Body End
LOADD d2,6; for() #9681 LoopIncrement
ADDV d2,1
STORED d2,6
GOTO 640; for() #9681 End
SETV d2,0
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,7; InlineFunc[int atoi(int)] Params Start
SETR d3,d2; InlineFunc[int atoi(int)] Params End
ATOI d2,d3; InlineFunc[int atoi(int)] Body
PUSHR d2
LOADD d2,9
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
LOADD d2,6
SUBV d2,1
STORED d2,6; if() #9677 Body End
LOADD d2,6; if() #9668 Else End AND if() #9667 Body End AND for() #9664 Body End AND for() #9664 LoopIncrement
ADDV d2,1
STORED d2,6
GOTO 470; for() #9664 End
LOADD d2,9; if() #9686 Test AND unless(false) #9685 [Opt:AlwaysOn]
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 755; Test 'if'
ALLOCATEMEMV d2,54; if() #9686 Body Start
STORED d2,5
WRITEPODSTRING d2,"ghost.zh: AutoGhost setup failed - script not found.\n"
ALLOCATEMEMV d2,80
STORED d2,3
WRITEPODSTRING d2,"  Enemy name: %s\n"
ALLOCATEMEMV d2,55
STORED d2,1
WRITEPODSTRING d2,"  Script name should start after this character: %c\n"
LOADD d2,5; InlineFunc[void printf(char32)] Params Start
PUSHR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,3; InlineFunc[void printf(char32)] Params Start
PUSHR d2
LOADD d2,8
PUSHVARGR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,1; InlineFunc[void printf(char32)] Params Start
PUSHR d2
PUSHVARGV 64; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
SETV d2,0; return Start
LOADD d3,1
DEALLOCATEMEMR d3
LOADD d3,3
DEALLOCATEMEMR d3
LOADD d3,5
DEALLOCATEMEMR d3
LOADD d3,7
DEALLOCATEMEMR d3
LOADD d3,8
DEALLOCATEMEMR d3
GOTO 765; return End
LOADD d3,1
DEALLOCATEMEMR d3
LOADD d3,3
DEALLOCATEMEMR d3
LOADD d3,5
DEALLOCATEMEMR d3; if() #9686 Body End
SETV d2,1; return Start
LOADD d3,7
DEALLOCATEMEMR d3
LOADD d3,8
DEALLOCATEMEMR d3
GOTO 765; return End
LOADD d3,7
DEALLOCATEMEMR d3
LOADD d3,8
DEALLOCATEMEMR d3
POPARGS d5,0.0011
RETURN; Func[int __AutoGhostParseName(NPC, int)] Body End
SETR d4,SP; Func[void __AutoGhostKill(NPC)] Body Start
SETV d2,65536
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2
SETV d2,1024
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETV d2,1024
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETV d2,-1000
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHP,d2
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCITEMSET,d2
POPARGS d5,0.0001
RETURN; Func[void __AutoGhostKill(NPC)] Body End
PUSHARGSR d2,0.0002; Func[int FindUnusedFFC(int)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,1
LOADD d2,2; InlineFunc[untyped Max(untyped, untyped)] Params Start AND for() #5102 setup
ADDV d2,1
PUSHVARGR d2
PUSHVARGV 1; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
STORED d2,0
LOADD d2,0; for() #5102 LoopTest
COMPAREV d2,32
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 876; for() #5102 TestFail?
LOADD d2,0; InlineFunc[FFC Screen->LoadFFC(int)] Params AND for() #5102 Body Start
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,1
LOADD d2,1; if() #5105 Test
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 852
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,1
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 872; Test 'if'
LOADD d2,1; unless() #5107 Test AND if() #5105 Body Start
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
COMPAREV d2,0
GOTOFALSE 872; Test 'unless'
LOADD d2,1; unless() #5108 Test AND unless() #5107 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOFALSE 872; Test 'unless'
LOADD d2,0; return Start AND unless() #5108 Body Start
GOTO 878; return End AND unless() #5108 Body End
LOADD d2,0; unless() #5107 Body End AND if() #5105 Body End AND for() #5102 Body End AND for() #5102 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 828; for() #5102 End
SETV d2,0; return Start
GOTO 878; return End
POPARGS d5,0.0003
RETURN; Func[int FindUnusedFFC(int)] Body End
SETR d4,SP; Func[int CenterX(EWeapon)] Body Start
LOADD d2,0; return Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
GOTO 902; return End
POPARGS d5,0.0001
RETURN; Func[int CenterX(EWeapon)] Body End
SETR d4,SP; Func[int CenterY(EWeapon)] Body Start
LOADD d2,0; return Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
GOTO 926; return End
POPARGS d5,0.0001
RETURN; Func[int CenterY(EWeapon)] Body End
PUSHARGSR d2,0.0002; Func[void CleanUpGhostFFCs()] Body Start
SETR d4,SP
SETR d2,LINKHP; if() #3920 Test
COMPAREV d2,0
SETLESSI d2
SETV d2,0
COMPAREV d2,0
GOTOTRUE 987; Test 'if'
SETV d2,0; if() #3920 Body Start
STORED d2,1
SETV d2,1; for() #3921 setup
STORED d2,0
LOADD d2,0; for() #3921 LoopTest
COMPAREV d2,32
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 987; for() #3921 TestFail?
LOADD d2,0; InlineFunc[FFC Screen->LoadFFC(int)] Params AND for() #3921 Body Start
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,1
SETR d2,gd25; if() #3924 Test
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
RSHIFTV d2,4
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
ANDV d2,15
SETV d3,1
LSHIFTR d3,d2
SETR d2,d3
POP d3
ANDR d2,d3
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 981; Test 'if'
SETV d2,0; if() #3924 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #3924 Body End
LOADD d2,0; for() #3921 Body End AND for() #3921 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 940; for() #3921 End
POPARGS d5,0.0002; if() #3920 Body End
RETURN; Func[void CleanUpGhostFFCs()] Body End
PUSHARGSR d2,0.0002; Func[void DrawEWeaponShadow(EWeapon)] Body Start
SETR d4,SP
PUSHR d4
PUSHV 0.0996; UsrFunc[int CenterX(EWeapon)] Return Addr
LOADD d2,2; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
GOTO 880; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNXOFS
POP d3
ADDR d2,d3
STORED d2,1
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
SUBV d2,1
MULTV d2,16
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNYOFS
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNZOFS
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,0
PUSHV 1; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #4819 [Opt:AlwaysOn]
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,2
ADDV d2,27400
PUSHR d2
PUSHARGSV 1,0.0002
PUSHV 7
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0004
PUSHV 1
PUSHV 64; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS d5,0.0003
RETURN; Func[void DrawEWeaponShadow(EWeapon)] Body End
PUSHARGSR d2,0.0009; Func[void DrawGhostFFCs()] Body Start
SETR d4,SP
SETV d2,1; if() #4822 Test
PUSHR d2
POP d0
SETR d2,SCREENEFLAGSD
ANDV d2,4
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1074; Test 'if'
PUSHR d4; unless() #4823 Test AND if() #4822 Body Start
PUSHV 0.1070; UsrFunc[bool __HaveAmulet()] Return Addr
GOTO 1282; UsrFunc[bool __HaveAmulet()] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1074; Test 'unless'
GOTO 1280; return (Void) AND unless() #4823 Body
SETV d2,0; if() #4822 Body End
STORED d2,8
SETV d2,0
STORED d2,7
SETV d2,0
STORED d2,6
SETV d2,0
STORED d2,5
SETV d2,0
STORED d2,4
SETV d2,0
STORED d2,3
SETV d2,0
STORED d2,2
SETV d2,1; if() #4827 Test AND if(true) #4826 [Opt:AlwaysOn]
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,16
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1100; Test 'if'
SETV d2,1; if() #4827 Body Start
STORED d2,3
GOTO 1102; if() #4827 Body End
SETV d2,2; if() #4827 Else Start
STORED d2,3; if() #4827 Else End
SETV d2,4
STORED d2,2
SETV d2,1; for() #4829 setup
STORED d2,1
LOADD d2,1; for() #4829 LoopTest
PUSHR d2
SETR d2,NPCCOUNT; InlineFunc[int Screen->NumNPCs()] Body
POP d3
COMPARER d3,d2
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 1280; for() #4829 TestFail?
LOADD d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Params AND for() #4829 Body Start
SUBV d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Body Start
LOADNPCR d2
SETR d2,REFNPC; InlineFunc[NPC Screen->LoadNPC(int)] Body End
STORED d2,6
PUSHR d4
PUSHV 0.1124; UsrFunc[int __GetDrawingArray(NPC)] Return Addr
LOADD d2,6; UsrFunc[int __GetDrawingArray(NPC)] Params Start
PUSHR d2; UsrFunc[int __GetDrawingArray(NPC)] Params End
GOTO 1302; UsrFunc[int __GetDrawingArray(NPC)] Call
POP d4
STORED d2,8
LOADD d2,8; if() #4834 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1132; Test 'if'
GOTO 1274; continue #4831 AND if() #4834 Body
SETR d2,gd27; if() #4835 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1151; Test 'if'
LOADD d2,8; if() #4836 Test AND if() #4835 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,2
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1151; Test 'if'
GOTO 1274; continue #4831 AND if() #4836 Body
LOADD d2,8; if() #4835 Body End AND if() #4837 Test
PUSHR d2
POP d0
READPODARRAYV d2,2
ANDV d2,1
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1163; Test 'if'
SETV d2,64; if() #4837 Body Start
STORED d2,5
GOTO 1165; if() #4837 Body End
SETV d2,128; if() #4837 Else Start
STORED d2,5; if() #4837 Else End
LOADD d2,8; if() #4839 Test
PUSHR d2
POP d0
READPODARRAYV d2,2
ANDV d2,4
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1177; Test 'if'
LOADD d2,2; if() #4839 Body Start
STORED d2,4
GOTO 1179; if() #4839 Body End
LOADD d2,3; if() #4839 Else Start
STORED d2,4; if() #4839 Else End
SETV d2,3
STORED d2,7
SETV d2,0; for() #4841 setup
STORED d2,0
LOADD d2,0; for() #4841 LoopTest
PUSHR d2
LOADD d2,8
PUSHR d2
POP d0
READPODARRAYV d2,0
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1274; for() #4841 TestFail?
LOADD d2,8; if() #4844 Test AND for() #4841 Body Start
PUSHR d2
LOADD d2,7
POP d0
READPODARRAYR d2,d2
COMPAREV d2,1
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1213
LOADD d2,8
PUSHR d2
LOADD d2,7
POP d0
READPODARRAYR d2,d2
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1265; Test 'if'
LOADD d2,4; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #4844 Body Start
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
ADDV d2,1
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
ADDV d2,2
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
ADDV d2,3
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
ADDV d2,4
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
POP d0
READPODARRAYV d2,1
PUSHR d2
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0005
PUSHV 1
LOADD d2,5
PUSHR d2; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBO; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0016; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #4844 Body End
LOADD d2,7
ADDV d2,6
STORED d2,7; for() #4841 Body End
LOADD d2,0; for() #4841 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 1183; for() #4841 End
LOADD d2,1; for() #4829 Body End AND for() #4829 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,1
POP d2
GOTO 1106; for() #4829 End
POPARGS d5,0.0009
RETURN; Func[void DrawGhostFFCs()] Body End
SETR d4,SP; Func[bool __HaveAmulet()] Body Start
SETV d2,50; if() #10191 Test
PUSHR d2
POP d0
SETR d2,LINKITEMD
COMPAREV d2,0
GOTOTRUE 1291; Test 'if'
SETV d2,1; return Start AND if() #10191 Body Start
GOTO 1301; return End AND if() #10191 Body End
SETV d2,63; if() #10192 Test
PUSHR d2
POP d0
SETR d2,LINKITEMD
COMPAREV d2,0
GOTOTRUE 1299; Test 'if'
SETV d2,1; return Start AND if() #10192 Body Start
GOTO 1301; return End AND if() #10192 Body End
SETV d2,0; return Start
GOTO 1301; return End
RETURN; Func[bool __HaveAmulet()] Body End
PUSHR d2; Func[int __GetDrawingArray(NPC)] Body Start
SETR d4,SP
LOADD d2,1; if() #9867 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65536
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1318; Test 'if'
SETV d2,0; return Start AND if() #9867 Body Start
GOTO 1341; return End AND if() #9867 Body End
LOADD d2,1
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65535
STORED d2,0
LOADD d2,0; if() #9868 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1334; Test 'if'
SETV d2,0; return Start AND if() #9868 Body Start
GOTO 1341; return End AND if() #9868 Body End
LOADD d2,0
PUSHR d2
POP d0
READPODARRAYV d2,23
STORED d2,0
LOADD d2,0; return Start
GOTO 1341; return End
POPARGS d5,0.0002
RETURN; Func[int __GetDrawingArray(NPC)] Body End
PUSHARGSR d2,0.0002; Func[int FindUnusedFFC()] Body Start
SETR d4,SP
SETV d2,0
STORED d2,1
SETV d2,1; for() #5094 setup
STORED d2,0
LOADD d2,0; for() #5094 LoopTest
COMPAREV d2,33
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1399; for() #5094 TestFail?
LOADD d2,0; InlineFunc[FFC Screen->LoadFFC(int)] Params AND for() #5094 Body Start
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,1
LOADD d2,1; if() #5097 Test
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1375
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,1
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1395; Test 'if'
LOADD d2,1; unless() #5099 Test AND if() #5097 Body Start
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
COMPAREV d2,0
GOTOFALSE 1395; Test 'unless'
LOADD d2,1; unless() #5100 Test AND unless() #5099 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOFALSE 1395; Test 'unless'
LOADD d2,0; return Start AND unless() #5100 Body Start
GOTO 1401; return End AND unless() #5100 Body End
LOADD d2,0; unless() #5099 Body End AND if() #5097 Body End AND for() #5094 Body End AND for() #5094 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 1349; for() #5094 End
SETV d2,0; return Start
GOTO 1401; return End
POPARGS d5,0.0002
RETURN; Func[int FindUnusedFFC()] Body End
PUSHR d2; Func[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body Start
SETR d4,SP
LOADD d2,3; if() #5203 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1419; Test 'if'
PUSHR d4; if() #5203 Body Start
PUSHV 0.1417; UsrFunc[int GetDefaultEWeaponSprite(int)] Return Addr
LOADD d2,9; UsrFunc[int GetDefaultEWeaponSprite(int)] Params Start
PUSHR d2; UsrFunc[int GetDefaultEWeaponSprite(int)] Params End
GOTO 1571; UsrFunc[int GetDefaultEWeaponSprite(int)] Call
POP d4
STORED d2,3; if() #5203 Body End
LOADD d2,2; if() #5205 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1433; Test 'if'
PUSHR d4; if() #5205 Body Start
PUSHV 0.1431; UsrFunc[int GetDefaultEWeaponSound(int)] Return Addr
LOADD d2,9; UsrFunc[int GetDefaultEWeaponSound(int)] Params Start
PUSHR d2; UsrFunc[int GetDefaultEWeaponSound(int)] Params End
GOTO 1748; UsrFunc[int GetDefaultEWeaponSound(int)] Call
POP d4
STORED d2,2; if() #5205 Body End
LOADD d2,9; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Params
CREATEEWEAPONR d2; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body Start
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body End
STORED d2,0
LOADD d2,8
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,7
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
LOADD d2,5
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOADD d2,4
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNPOWER,d2
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNANGULAR,d2
LOADD d2,1; if() #5207 Test
ANDV d2,1
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1504; Test 'if'
PUSHR d4; if() #5207 Body Start
PUSHV 0.1494; UsrFunc[int __UnblockableDir(int)] Return Addr
LOADD d2,6; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR d2; UsrFunc[int __UnblockableDir(int)] Params End
GOTO 2135; UsrFunc[int __UnblockableDir(int)] Call
POP d4
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDIR,d2
GOTO 1513; if() #5207 Body End
LOADD d2,6; if() #5207 Else Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDIR,d2; if() #5207 Else End
LOADD d2,3; if() #5211 Test
COMPAREV d2,0
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1524; Test 'if'
LOADD d2,0; InlineFunc[void EWeapon->UseSprite(int)] Params Start AND if() #5211 Body Start
PUSHR d2
LOADD d2,3; InlineFunc[void EWeapon->UseSprite(int)] Params End
POP d3; InlineFunc[void EWeapon->UseSprite(int)] Body Start
SETR REFEWPN,d3
EWPNUSESPRITER d2; InlineFunc[void EWeapon->UseSprite(int)] Body End AND if() #5211 Body End
LOADD d2,1; if() #5212 Test
ANDV d2,32
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1540; Test 'if'
SETV d2,0; if() #5212 Body Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNCOLLDET,d2; if() #5212 Body End
LOADD d2,1; if() #5213 Test
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1552; Test 'if'
PUSHR d4; if() #5213 Body Start
PUSHV 0.1551; UsrFunc[void SetEWeaponRotation(EWeapon)] Return Addr
LOADD d2,0; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
GOTO 1945; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #5213 Body End
LOADD d2,1
ORV d2,512
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,2; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
LOADD d2,0; return Start
GOTO 1569; return End
POPARGS d5,0.0010
RETURN; Func[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSR d2,0.0003; Func[int GetDefaultEWeaponSprite(int)] Body Start
SETR d4,SP
LOADD d2,3; if() #5280 Test
COMPAREV d2,129
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1583
LOADD d2,3
COMPAREV d2,145
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1588; Test 'if'
SETV d2,17; return Start AND if() #5280 Body Start
GOTO 1746; return End AND if() #5280 Body End
LOADD d2,3; if() #5283 Test AND if() #5280 Else Start
COMPAREV d2,133
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1595; Test 'if'
SETV d2,18; return Start AND if() #5283 Body Start
GOTO 1746; return End AND if() #5283 Body End
LOADD d2,3; if() #5285 Test AND if() #5283 Else Start
COMPAREV d2,130
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1602; Test 'if'
SETV d2,19; return Start AND if() #5285 Body Start
GOTO 1746; return End AND if() #5285 Body End
LOADD d2,3; if() #5287 Test AND if() #5285 Else Start
COMPAREV d2,140
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1609; Test 'if'
SETV d2,35; return Start AND if() #5287 Body Start
GOTO 1746; return End AND if() #5287 Body End
LOADD d2,3; if() #5289 Test AND if() #5287 Else Start
COMPAREV d2,142
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1616; Test 'if'
SETV d2,81; return Start AND if() #5289 Body Start
GOTO 1746; return End AND if() #5289 Body End
LOADD d2,3; if() #5291 Test AND if() #5289 Else Start
COMPAREV d2,139
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1623; Test 'if'
SETV d2,80; return Start AND if() #5291 Body Start
GOTO 1746; return End AND if() #5291 Body End
LOADD d2,3; if() #5293 Test AND if() #5291 Else Start
COMPAREV d2,134
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1630; Test 'if'
SETV d2,21; return Start AND if() #5293 Body Start
GOTO 1746; return End AND if() #5293 Body End
LOADD d2,3; if() #5295 Test AND if() #5293 Else Start
COMPAREV d2,132
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1637; Test 'if'
SETV d2,20; return Start AND if() #5295 Body Start
GOTO 1746; return End AND if() #5295 Body End
LOADD d2,3; if() #5297 Test AND if() #5295 Else Start
COMPAREV d2,141
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1644; Test 'if'
SETV d2,36; return Start AND if() #5297 Body Start
GOTO 1746; return End AND if() #5297 Body End
LOADD d2,3; if() #5299 Test AND if() #5297 Else Start
COMPAREV d2,137
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1651; Test 'if'
SETV d2,76; return Start AND if() #5299 Body Start
GOTO 1746; return End AND if() #5299 Body End
LOADD d2,3; if() #5301 Test AND if() #5299 Else Start
COMPAREV d2,138
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1658; Test 'if'
SETV d2,77; return Start AND if() #5301 Body Start
GOTO 1746; return End AND if() #5301 Body End
LOADD d2,3; if() #5303 Test AND if() #5301 Else Start
COMPAREV d2,131
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1744; Test 'if'
SETV d2,0; if() #5303 Body Start
STORED d2,2
SETV d2,0
STORED d2,1
SETV d2,0; for() #5305 setup
STORED d2,0
LOADD d2,0; for() #5305 LoopTest
COMPAREV d2,256
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1726; for() #5305 TestFail?
LOADD d2,0; unless() #5308 Test AND for() #5305 Body Start
PUSHR d2
POP d0
SETR d2,LINKITEMD
COMPAREV d2,0
GOTOFALSE 1683; Test 'unless'
GOTO 1720; continue #5307 AND unless() #5308 Body
LOADD d2,0; InlineFunc[ItemData Game->LoadItemData(int)] Params
LOADITEMDATAR d2; InlineFunc[ItemData Game->LoadItemData(int)] Body Start
SETR d2,REFITEMCLASS; InlineFunc[ItemData Game->LoadItemData(int)] Body End
STORED d2,1
LOADD d2,1; if() #5309 Test
PUSHR d2
POP REFITEMCLASS
SETR d2,IDATAFAMILY
COMPAREV d2,1
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1696; Test 'if'
GOTO 1720; continue #5307 AND if() #5309 Body
LOADD d2,1; if() #5310 Test
PUSHR d2
POP REFITEMCLASS
SETR d2,IDATALEVEL
PUSHR d2
LOADD d2,2
POP d3
COMPARER d3,d2
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1720; Test 'if'
LOADD d2,1; if() #5310 Body Start
PUSHR d2
POP REFITEMCLASS
SETR d2,IDATALEVEL
STORED d2,2
LOADD d2,2; if() #5311 Test
COMPAREV d2,3
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1720; Test 'if'
GOTO 1726; break #5306 AND if() #5311 Body
LOADD d2,0; if() #5310 Body End AND for() #5305 Body End AND for() #5305 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 1669; for() #5305 End
LOADD d2,2; if() #5312 Test
COMPAREV d2,1
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 1734; Test 'if'
SETV d2,4; return Start AND if() #5312 Body Start
GOTO 1746; return End
GOTO 1743; if() #5312 Body End
LOADD d2,2; if() #5314 Test AND if() #5312 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1742; Test 'if'
SETV d2,5; return Start AND if() #5314 Body Start
GOTO 1746; return End
GOTO 1743; if() #5314 Body End
SETV d2,6; return Start AND if() #5314 Else Start
GOTO 1746; return End AND if() #5314 Else End AND if() #5312 Else End AND if() #5303 Body End
SETV d2,0; return Start AND if() #5303 Else Start
GOTO 1746; return End AND if() #5303 Else End
POPARGS d5,0.0004; if() #5301 Else End AND if() #5299 Else End AND if() #5297 Else End AND if() #5295 Else End AND if() #5293 Else End AND if() #5291 Else End AND if() #5289 Else End AND if() #5287 Else End AND if() #5285 Else End AND if() #5283 Else End AND if() #5280 Else End
RETURN; Func[int GetDefaultEWeaponSprite(int)] Body End
SETR d4,SP; Func[int GetDefaultEWeaponSound(int)] Body Start
LOADD d2,0; if() #5267 Test
COMPAREV d2,129
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1759
LOADD d2,0
COMPAREV d2,145
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1764; Test 'if'
SETV d2,40; return Start AND if() #5267 Body Start
GOTO 1811; return End AND if() #5267 Body End
LOADD d2,0; if() #5270 Test AND if() #5267 Else Start
COMPAREV d2,134
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1774
LOADD d2,0
COMPAREV d2,141
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1779; Test 'if'
SETV d2,32; return Start AND if() #5270 Body Start
GOTO 1811; return End AND if() #5270 Body End
LOADD d2,0; if() #5273 Test AND if() #5270 Else Start
COMPAREV d2,140
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1789
LOADD d2,0
COMPAREV d2,142
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1797
LOADD d2,0
COMPAREV d2,139
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1802; Test 'if'
SETV d2,13; return Start AND if() #5273 Body Start
GOTO 1811; return End AND if() #5273 Body End
LOADD d2,0; if() #5277 Test AND if() #5273 Else Start
COMPAREV d2,133
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1809; Test 'if'
SETV d2,51; return Start AND if() #5277 Body Start
GOTO 1811; return End AND if() #5277 Body End
SETV d2,0; return Start AND if() #5277 Else Start
GOTO 1811; return End AND if() #5277 Else End
POPARGS d5,0.0001; if() #5273 Else End AND if() #5270 Else End AND if() #5267 Else End
RETURN; Func[int GetDefaultEWeaponSound(int)] Body End
PUSHARGSR d2,0.0002; Func[void SetEWeaponDir(EWeapon)] Body Start
SETR d4,SP
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
MODV d2,6.2832
STORED d2,1
SETV d2,0
STORED d2,0
LOADD d2,1; if() #8651 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1833; Test 'if'
LOADD d2,1; if() #8651 Body Start
ADDV d2,6.2832
STORED d2,1; if() #8651 Body End
LOADD d2,1; if() #8652 Test
COMPAREV d2,0.3927
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1847
LOADD d2,1
COMPAREV d2,5.8905
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1853; Test 'if'
SETV d2,3; if() #8652 Body Start
STORED d2,0
GOTO 1915; if() #8652 Body End
LOADD d2,1; if() #8655 Test AND if() #8652 Else Start
COMPAREV d2,1.1781
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1863; Test 'if'
SETV d2,7; if() #8655 Body Start
STORED d2,0
GOTO 1915; if() #8655 Body End
LOADD d2,1; if() #8657 Test AND if() #8655 Else Start
COMPAREV d2,1.9635
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1873; Test 'if'
SETV d2,1; if() #8657 Body Start
STORED d2,0
GOTO 1915; if() #8657 Body End
LOADD d2,1; if() #8659 Test AND if() #8657 Else Start
COMPAREV d2,2.7489
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1883; Test 'if'
SETV d2,6; if() #8659 Body Start
STORED d2,0
GOTO 1915; if() #8659 Body End
LOADD d2,1; if() #8661 Test AND if() #8659 Else Start
COMPAREV d2,3.5343
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1893; Test 'if'
SETV d2,2; if() #8661 Body Start
STORED d2,0
GOTO 1915; if() #8661 Body End
LOADD d2,1; if() #8663 Test AND if() #8661 Else Start
COMPAREV d2,4.3197
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1903; Test 'if'
SETV d2,4; if() #8663 Body Start
STORED d2,0
GOTO 1915; if() #8663 Body End
LOADD d2,1; if() #8665 Test AND if() #8663 Else Start
COMPAREV d2,5.1051
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1913; Test 'if'
SETV d2,0; if() #8665 Body Start
STORED d2,0
GOTO 1915; if() #8665 Body End
SETV d2,5; if() #8665 Else Start
STORED d2,0; if() #8665 Else End
LOADD d2,2; if() #8663 Else End AND if() #8661 Else End AND if() #8659 Else End AND if() #8657 Else End AND if() #8655 Else End AND if() #8652 Else End AND if() #8667 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1934; Test 'if'
PUSHR d4; if() #8667 Body Start
PUSHV 0.1932; UsrFunc[int __UnblockableDir(int)] Return Addr
LOADD d2,0; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR d2; UsrFunc[int __UnblockableDir(int)] Params End
GOTO 2135; UsrFunc[int __UnblockableDir(int)] Call
POP d4
STORED d2,0; if() #8667 Body End
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDIR,d2
POPARGS d5,0.0003
RETURN; Func[void SetEWeaponDir(EWeapon)] Body End
PUSHR d2; Func[void SetEWeaponRotation(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1; if() #8734 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOTRUE 2038; Test 'if'
LOADD d2,1; if() #8734 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
MODV d2,6.2832
STORED d2,0
LOADD d2,0; if() #8736 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1969; Test 'if'
LOADD d2,0; if() #8736 Body Start
ADDV d2,6.2832
STORED d2,0; if() #8736 Body End
LOADD d2,0; if() #8737 Test
COMPAREV d2,0.7854
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1983
LOADD d2,0
COMPAREV d2,5.4978
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1996; Test 'if'
SETV d2,4; if() #8737 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2037; if() #8737 Body End
LOADD d2,0; if() #8740 Test AND if() #8737 Else Start
COMPAREV d2,2.3562
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 2011; Test 'if'
SETV d2,3; if() #8740 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2037; if() #8740 Body End
LOADD d2,0; if() #8742 Test AND if() #8740 Else Start
COMPAREV d2,3.9270
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2028; Test 'if'
SETV d2,7; if() #8742 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2037; if() #8742 Body End
SETV d2,0; if() #8742 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2; if() #8742 Else End
GOTO 2133; if() #8740 Else End AND if() #8737 Else End AND if() #8734 Body End
PUSHR d4; if() #8734 Else Start
PUSHV 0.2045; UsrFunc[int __NormalizeDir(int)] Return Addr
LOADD d2,1; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
GOTO 2196; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,0
LOADD d2,0; if() #8745 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 2057
LOADD d2,0
COMPAREV d2,5
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 2065
LOADD d2,0
COMPAREV d2,4
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2078; Test 'if'
SETV d2,0; if() #8745 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2133; if() #8745 Body End
LOADD d2,0; if() #8749 Test AND if() #8745 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 2088
LOADD d2,0
COMPAREV d2,7
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 2096
LOADD d2,0
COMPAREV d2,6
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2109; Test 'if'
SETV d2,3; if() #8749 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2133; if() #8749 Body End
LOADD d2,0; if() #8753 Test AND if() #8749 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2124; Test 'if'
SETV d2,7; if() #8753 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2133; if() #8753 Body End
SETV d2,4; if() #8753 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2; if() #8753 Else End
POPARGS d5,0.0002; if() #8749 Else End AND if() #8745 Else End AND if() #8734 Else End
RETURN; Func[void SetEWeaponRotation(EWeapon)] Body End
SETR d4,SP; Func[int __UnblockableDir(int)] Body Start
LOADD d2,0; if() #10227 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2143; Test 'if'
SETV d2,8; return Start AND if() #10227 Body Start
GOTO 2194; return End AND if() #10227 Body End
LOADD d2,0; if() #10228 Test
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2150; Test 'if'
SETV d2,12; return Start AND if() #10228 Body Start
GOTO 2194; return End AND if() #10228 Body End
LOADD d2,0; if() #10229 Test
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2157; Test 'if'
SETV d2,14; return Start AND if() #10229 Body Start
GOTO 2194; return End AND if() #10229 Body End
LOADD d2,0; if() #10230 Test
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2164; Test 'if'
SETV d2,10; return Start AND if() #10230 Body Start
GOTO 2194; return End AND if() #10230 Body End
LOADD d2,0; if() #10231 Test
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2171; Test 'if'
SETV d2,15; return Start AND if() #10231 Body Start
GOTO 2194; return End AND if() #10231 Body End
LOADD d2,0; if() #10232 Test
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2178; Test 'if'
SETV d2,9; return Start AND if() #10232 Body Start
GOTO 2194; return End AND if() #10232 Body End
LOADD d2,0; if() #10233 Test
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2185; Test 'if'
SETV d2,13; return Start AND if() #10233 Body Start
GOTO 2194; return End AND if() #10233 Body End
LOADD d2,0; if() #10234 Test
COMPAREV d2,7
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2192; Test 'if'
SETV d2,11; return Start AND if() #10234 Body Start
GOTO 2194; return End AND if() #10234 Body End
LOADD d2,0; return Start
GOTO 2194; return End
POPARGS d5,0.0001
RETURN; Func[int __UnblockableDir(int)] Body End
SETR d4,SP; Func[int __NormalizeDir(int)] Body Start
LOADD d2,0; if() #10206 Test
COMPAREV d2,0
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2206
LOADD d2,0
COMPAREV d2,7
SETLESSI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2212; Test 'if'
LOADD d2,0; return Start AND if() #10206 Body Start
GOTO 2270; return End AND if() #10206 Body End
LOADD d2,0; if() #10208 Test
COMPAREV d2,8
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2219; Test 'if'
SETV d2,0; return Start AND if() #10208 Body Start
GOTO 2270; return End AND if() #10208 Body End
LOADD d2,0; if() #10209 Test
COMPAREV d2,9
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2226; Test 'if'
SETV d2,5; return Start AND if() #10209 Body Start
GOTO 2270; return End AND if() #10209 Body End
LOADD d2,0; if() #10210 Test
COMPAREV d2,10
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2233; Test 'if'
SETV d2,3; return Start AND if() #10210 Body Start
GOTO 2270; return End AND if() #10210 Body End
LOADD d2,0; if() #10211 Test
COMPAREV d2,11
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2240; Test 'if'
SETV d2,7; return Start AND if() #10211 Body Start
GOTO 2270; return End AND if() #10211 Body End
LOADD d2,0; if() #10212 Test
COMPAREV d2,12
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2247; Test 'if'
SETV d2,1; return Start AND if() #10212 Body Start
GOTO 2270; return End AND if() #10212 Body End
LOADD d2,0; if() #10213 Test
COMPAREV d2,13
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2254; Test 'if'
SETV d2,6; return Start AND if() #10213 Body Start
GOTO 2270; return End AND if() #10213 Body End
LOADD d2,0; if() #10214 Test
COMPAREV d2,14
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2261; Test 'if'
SETV d2,2; return Start AND if() #10214 Body Start
GOTO 2270; return End AND if() #10214 Body End
LOADD d2,0; if() #10215 Test
COMPAREV d2,15
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2268; Test 'if'
SETV d2,4; return Start AND if() #10215 Body Start
GOTO 2270; return End AND if() #10215 Body End
SETV d2,0; return Start
GOTO 2270; return End
POPARGS d5,0.0001
RETURN; Func[int __NormalizeDir(int)] Body End
SETR d4,SP; Func[bool IsSideview()] Body Start
SETV d2,0; return Start
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,4
PUSHR d2
SETR d2,CURDMAP; InlineFunc[DMapData Game->LoadDMapData(int)] Params
LOADDMAPDATAR d2; InlineFunc[DMapData Game->LoadDMapData(int)] Body Start
SETR d2,REFDMAPDATA; InlineFunc[DMapData Game->LoadDMapData(int)] Body End
PUSHR d2
POP REFDMAPDATA
SETR d2,DMAPDATASIDEVIEW
POP d3
CASTBOOLF d2
CASTBOOLF d3
COMPARER d3,d2
SETFALSEI d2
GOTO 2291; return End
RETURN; Func[bool IsSideview()] Body End
SETR d4,SP; Func[void InitializeGhostZHData()] Body Start
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 2,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 3,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 4,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 5,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2
RETURN; Func[void InitializeGhostZHData()] Body End
SETR d4,SP; Func[void KillEWeapon(EWeapon)] Body Start
LOADD d2,0
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ORV d2,128
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POPARGS d5,0.0001
RETURN; Func[void KillEWeapon(EWeapon)] Body End
PUSHARGSR d2,0.0005; Func[int __GetEWeaponThrowHeight(EWeapon)] Body Start
SETR d4,SP
LOADD d2,5
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
STORED d2,4
LOADD d2,4; if() #9870 Test
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 2373; Test 'if'
SETV d2,1; return Start AND if() #9870 Body Start
GOTO 2476; return End AND if() #9870 Body End
PUSHR d4
PUSHV 0.2408; Int.Func[int Distance(int, int, int, int)] Return Addr
LOADD d2,5; Int.Func[int Distance(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,5
PUSHR d2
POP REFEWPN
SETR d2,EWPNHXSZ
DIVV d2,2
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,5
PUSHR d2
POP REFEWPN
SETR d2,EWPNHYSZ
DIVV d2,2
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,LINKX
ADDV d2,8
PUSHR d2
SETR d2,LINKY
ADDV d2,8
PUSHR d2; Int.Func[int Distance(int, int, int, int)] Params End
GOTO 20; Int.Func[int Distance(int, int, int, int)] Call
POP d4
STORED d2,3
LOADD d2,3; if() #9872 Test
COMPAREV d2,1
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2419; Test 'if'
SETV d2,1; return Start AND if() #9872 Body Start
GOTO 2476; return End AND if() #9872 Body End
LOADD d2,3
PUSHR d2
LOADD d2,4
POP d3
DIVR d3,d2
SETR d2,d3
STORED d2,2
SETV d2,0
STORED d2,1
LOADD d2,1; while() #9873 Test
COMPAREV d2,3.2000
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 2447; Test 'while'
LOADD d2,1; while() #9873 Body Start
ADDV d2,0.1600
STORED d2,1
LOADD d2,2
SUBV d2,2
STORED d2,2
LOADD d2,2; if() #9875 Test
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 2446; Test 'if'
LOADD d2,1; return Start AND if() #9875 Body Start
GOTO 2476; return End AND if() #9875 Body End
GOTO 2428; while() #9873 Body End AND while() #9873 End
SETV d2,0
STORED d2,0
LOADD d2,2; while() #9876 Test
PUSHR d2
LOADD d2,0
DIVV d2,3.2000
POP d3
COMPARER d3,d2
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2474; Test 'while'
LOADD d2,1; while() #9876 Body Start
ADDV d2,0.1600
STORED d2,1
LOADD d2,0
PUSHR d2
LOADD d2,1
SUBV d2,3.2000
POP d3
ADDR d2,d3
STORED d2,0
LOADD d2,2
SUBV d2,2
STORED d2,2; while() #9876 Body End
GOTO 2449; while() #9876 End
LOADD d2,1; return Start
GOTO 2476; return End
POPARGS d5,0.0006
RETURN; Func[int __GetEWeaponThrowHeight(EWeapon)] Body End
SETR d4,SP; Func[void SetEWeaponRotation(EWeapon, int)] Body Start
PUSHR d4
PUSHV 0.2484; UsrFunc[int __NormalizeDir(int)] Return Addr
LOADD d2,0; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2; UsrFunc[int __NormalizeDir(int)] Params End
GOTO 2196; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,0
LOADD d2,0; if() #8758 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 2496
LOADD d2,0
COMPAREV d2,5
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 2504
LOADD d2,0
COMPAREV d2,4
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2517; Test 'if'
SETV d2,0; if() #8758 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2572; if() #8758 Body End
LOADD d2,0; if() #8762 Test AND if() #8758 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 2527
LOADD d2,0
COMPAREV d2,7
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 2535
LOADD d2,0
COMPAREV d2,6
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2548; Test 'if'
SETV d2,3; if() #8762 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2572; if() #8762 Body End
LOADD d2,0; if() #8766 Test AND if() #8762 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2563; Test 'if'
SETV d2,7; if() #8766 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2572; if() #8766 Body End
SETV d2,4; if() #8766 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2; if() #8766 Else End
POPARGS d5,0.0002; if() #8762 Else End AND if() #8758 Else End
RETURN; Func[void SetEWeaponRotation(EWeapon, int)] Body End
SETR d4,SP; Func[int Sign(int)] Body Start
LOADD d2,0; if() #9238 Test
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2584; Test 'if'
SETV d2,1; return Start AND if() #9238 Body Start
GOTO 2595; return End AND if() #9238 Body End
LOADD d2,0; if() #9240 Test AND if() #9238 Else Start
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2593; Test 'if'
SETV d2,-1; return Start AND if() #9240 Body Start
GOTO 2595; return End AND if() #9240 Body End
SETV d2,0; return Start AND if() #9240 Else Start
GOTO 2595; return End AND if() #9240 Else End
POPARGS d5,0.0001; if() #9238 Else End
RETURN; Func[int Sign(int)] Body End
SETR d4,SP; Func[void StartGhostZH()] Body Start
PUSHR d4
PUSHV 0.2601; UsrFunc[void InitializeGhostZHData()] Return Addr
GOTO 2292; UsrFunc[void InitializeGhostZHData()] Call
POP d4
RETURN; Func[void StartGhostZH()] Body End
PUSHARGSR d2,0.0007; Func[void UpdateEWeapon(EWeapon)] Body Start
SETR d4,SP
SETR d2,gd27; if() #9371 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 2615; Test 'if'
GOTO 3797; return (Void) AND if() #9371 Body
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
STORED d2,6
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
STORED d2,5
SETV d2,1
STORED d2,4
LOADD d2,7; if() #9372 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,128
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3029; Test 'if'
LOADD d2,7; if() #9374 Test AND if() #9372 Body Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 2872; Test 'if'
LOADD d2,7; if() #9375 Test AND if() #9374 Body Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,6
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 2740; Test 'if'
LOADD d2,7; if() #9377 Test AND if() #9375 Body Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2679; Test 'if'
PUSHR d4; if() #9377 Body Start
PUSHV 0.2677; UsrFunc[void __UpdateEWMSineWave(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void __UpdateEWMSineWave(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMSineWave(EWeapon)] Params End
GOTO 3799; UsrFunc[void __UpdateEWMSineWave(EWeapon)] Call
POP d4
GOTO 2739; if() #9377 Body End
LOADD d2,7; if() #9381 Test AND if() #9377 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2697; Test 'if'
PUSHR d4; if() #9381 Body Start
PUSHV 0.2695; UsrFunc[void __UpdateEWMHoming(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void __UpdateEWMHoming(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMHoming(EWeapon)] Params End
GOTO 3982; UsrFunc[void __UpdateEWMHoming(EWeapon)] Call
POP d4
GOTO 2739; if() #9381 Body End
LOADD d2,7; if() #9385 Test AND if() #9381 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2715; Test 'if'
PUSHR d4; if() #9385 Body Start
PUSHV 0.2713; UsrFunc[void __UpdateEWMHomingReaim(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void __UpdateEWMHomingReaim(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMHomingReaim(EWeapon)] Params End
GOTO 4207; UsrFunc[void __UpdateEWMHomingReaim(EWeapon)] Call
POP d4
GOTO 2739; if() #9385 Body End
LOADD d2,7; if() #9389 Test AND if() #9385 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2733; Test 'if'
PUSHR d4; if() #9389 Body Start
PUSHV 0.2731; UsrFunc[void __UpdateEWMRandom(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void __UpdateEWMRandom(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMRandom(EWeapon)] Params End
GOTO 4558; UsrFunc[void __UpdateEWMRandom(EWeapon)] Call
POP d4
GOTO 2739; if() #9389 Body End
PUSHR d4; if() #9389 Else Start
PUSHV 0.2738; UsrFunc[void __UpdateEWMRandomReaim(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void __UpdateEWMRandomReaim(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMRandomReaim(EWeapon)] Params End
GOTO 4686; UsrFunc[void __UpdateEWMRandomReaim(EWeapon)] Call
POP d4; if() #9389 Else End
GOTO 2872; if() #9385 Else End AND if() #9381 Else End AND if() #9377 Else End AND if() #9375 Body End
LOADD d2,7; if() #9395 Test AND if() #9375 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,7
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2776; Test 'if'
LOADD d2,7; if() #9395 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,6
LOADD d2,7
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,5
PUSHR d4
PUSHV 0.2772; UsrFunc[void __UpdateEWMVeer(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void __UpdateEWMVeer(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMVeer(EWeapon)] Params End
GOTO 5013; UsrFunc[void __UpdateEWMVeer(EWeapon)] Call
POP d4
SETV d2,0
STORED d2,4
GOTO 2872; if() #9395 Body End
LOADD d2,7; if() #9399 Test AND if() #9395 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,15
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2794; Test 'if'
PUSHR d4; if() #9399 Body Start
PUSHV 0.2792; UsrFunc[void __UpdateEWMThrow(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void __UpdateEWMThrow(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMThrow(EWeapon)] Params End
GOTO 5545; UsrFunc[void __UpdateEWMThrow(EWeapon)] Call
POP d4
GOTO 2872; if() #9399 Body End
LOADD d2,7; if() #9403 Test AND if() #9399 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,19
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2812; Test 'if'
PUSHR d4; if() #9403 Body Start
PUSHV 0.2810; UsrFunc[void __UpdateEWMFall(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void __UpdateEWMFall(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMFall(EWeapon)] Params End
GOTO 5861; UsrFunc[void __UpdateEWMFall(EWeapon)] Call
POP d4
GOTO 2872; if() #9403 Body End
LOADD d2,7; if() #9407 Test AND if() #9403 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,20
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2848; Test 'if'
LOADD d2,7; if() #9407 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,6
LOADD d2,7
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,5
PUSHR d4
PUSHV 0.2844; UsrFunc[void __UpdateEWMDrift(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void __UpdateEWMDrift(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMDrift(EWeapon)] Params End
GOTO 6133; UsrFunc[void __UpdateEWMDrift(EWeapon)] Call
POP d4
SETV d2,0
STORED d2,4
GOTO 2872; if() #9407 Body End
LOADD d2,7; if() #9407 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,6
LOADD d2,7
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,5
PUSHR d4
PUSHV 0.2869; UsrFunc[void __UpdateEWMDriftWait(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void __UpdateEWMDriftWait(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMDriftWait(EWeapon)] Params End
GOTO 6637; UsrFunc[void __UpdateEWMDriftWait(EWeapon)] Call
POP d4
SETV d2,0
STORED d2,4; if() #9407 Else End
LOADD d2,7; if() #9403 Else End AND if() #9399 Else End AND if() #9395 Else End AND if() #9375 Else End AND if() #9374 Body End AND if() #9413 Test
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3028; Test 'if'
LOADD d2,7; if() #9414 Test AND if() #9413 Body Start
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2931; Test 'if'
LOADD d2,7; if() #9414 Body Start
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
SETV d2,12
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,7; if() #9416 Test
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 2930; Test 'if'
PUSHR d4; if() #9416 Body Start
PUSHV 0.2929; UsrFunc[void KillEWeapon(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
GOTO 2336; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #9416 Body End
GOTO 3028; if() #9414 Body End
LOADD d2,7; if() #9418 Test AND if() #9414 Else Start
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2978; Test 'if'
PUSHR d4; if() #9420 Test AND if() #9418 Body Start
PUSHV 0.2955; Int.Func[int Distance(int, int, int, int)] Return Addr
LOADD d2,7; Int.Func[int Distance(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; Int.Func[int Distance(int, int, int, int)] Params End
GOTO 20; Int.Func[int Distance(int, int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,7
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2977; Test 'if'
PUSHR d4; if() #9420 Body Start
PUSHV 0.2976; UsrFunc[void KillEWeapon(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
GOTO 2336; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #9420 Body End
GOTO 3028; if() #9418 Body End
LOADD d2,7; if() #9423 Test AND if() #9418 Else Start
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3028; Test 'if'
PUSHVARGV 0; InlineFunc[untyped Max(untyped, untyped)] Params Start AND if() #9423 Body Start
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
PUSHR d2
LOADD d2,7
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
PUSHVARGR d3; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOADD d2,7; if() #9424 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 3028; Test 'if'
PUSHR d4; if() #9424 Body Start
PUSHV 0.3027; UsrFunc[void KillEWeapon(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
GOTO 2336; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #9424 Body End
GOTO 3360; if() #9423 Body End AND if() #9418 Else End AND if() #9414 Else End AND if() #9413 Body End AND if() #9372 Body End
LOADD d2,7; if() #9426 Test AND if() #9372 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3051
LOADD d2,7
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1024
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3360; Test 'if'
LOADD d2,7; if() #9428 Test AND if() #9426 Body Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3075; Test 'if'
PUSHR d4; if() #9428 Body Start
PUSHV 0.3073; UsrFunc[void __DoEWeaponDeathPrototype(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void __DoEWeaponDeathPrototype(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathPrototype(EWeapon)] Params End
GOTO 7174; UsrFunc[void __DoEWeaponDeathPrototype(EWeapon)] Call
POP d4
GOTO 3360; if() #9428 Body End
LOADD d2,7; if() #9432 Test AND if() #9428 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,8
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3217; Test 'if'
LOADD d2,7; if() #9434 Test AND if() #9432 Body Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3109; Test 'if'
SETV d2,0; if() #9434 Body Start
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
GOTO 3216; if() #9434 Body End
LOADD d2,7; if() #9436 Test AND if() #9434 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3127; Test 'if'
PUSHR d4; if() #9436 Body Start
PUSHV 0.3125; UsrFunc[void __DoEWeaponDeathAimAtLink(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void __DoEWeaponDeathAimAtLink(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathAimAtLink(EWeapon)] Params End
GOTO 7610; UsrFunc[void __DoEWeaponDeathAimAtLink(EWeapon)] Call
POP d4
GOTO 3216; if() #9436 Body End
LOADD d2,7; if() #9440 Test AND if() #9436 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3145; Test 'if'
PUSHR d4; if() #9440 Body Start
PUSHV 0.3143; UsrFunc[void __DoEWeaponDeathExplode(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void __DoEWeaponDeathExplode(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathExplode(EWeapon)] Params End
GOTO 7784; UsrFunc[void __DoEWeaponDeathExplode(EWeapon)] Call
POP d4
GOTO 3216; if() #9440 Body End
LOADD d2,7; if() #9444 Test AND if() #9440 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3163; Test 'if'
PUSHR d4; if() #9444 Body Start
PUSHV 0.3161; UsrFunc[void __DoEWeaponDeathSBombExplode(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void __DoEWeaponDeathSBombExplode(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathSBombExplode(EWeapon)] Params End
GOTO 7831; UsrFunc[void __DoEWeaponDeathSBombExplode(EWeapon)] Call
POP d4
GOTO 3216; if() #9444 Body End
LOADD d2,7; if() #9448 Test AND if() #9444 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3181; Test 'if'
PUSHR d4; if() #9448 Body Start
PUSHV 0.3179; UsrFunc[void __DoEWeaponDeath4FireballsHV(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FireballsHV(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FireballsHV(EWeapon)] Params End
GOTO 7878; UsrFunc[void __DoEWeaponDeath4FireballsHV(EWeapon)] Call
POP d4
GOTO 3216; if() #9448 Body End
LOADD d2,7; if() #9452 Test AND if() #9448 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3199; Test 'if'
PUSHR d4; if() #9452 Body Start
PUSHV 0.3197; UsrFunc[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Params End
GOTO 7944; UsrFunc[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Call
POP d4
GOTO 3216; if() #9452 Body End
LOADD d2,7; if() #9456 Test AND if() #9452 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,7
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3216; Test 'if'
PUSHR d4; if() #9456 Body Start
PUSHV 0.3215; UsrFunc[void __DoEWeaponDeath4FireballsRand(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FireballsRand(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FireballsRand(EWeapon)] Params End
GOTO 8010; UsrFunc[void __DoEWeaponDeath4FireballsRand(EWeapon)] Call
POP d4; if() #9456 Body End
GOTO 3360; if() #9452 Else End AND if() #9448 Else End AND if() #9444 Else End AND if() #9440 Else End AND if() #9436 Else End AND if() #9434 Else End AND if() #9432 Body End
LOADD d2,7; if() #9459 Test AND if() #9432 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,8
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3235; Test 'if'
PUSHR d4; if() #9459 Body Start
PUSHV 0.3233; UsrFunc[void __DoEWeaponDeath8Fireballs(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void __DoEWeaponDeath8Fireballs(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath8Fireballs(EWeapon)] Params End
GOTO 8136; UsrFunc[void __DoEWeaponDeath8Fireballs(EWeapon)] Call
POP d4
GOTO 3360; if() #9459 Body End
LOADD d2,7; if() #9463 Test AND if() #9459 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,9
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3253; Test 'if'
PUSHR d4; if() #9463 Body Start
PUSHV 0.3251; UsrFunc[void __DoEWeaponDeath4FiresHV(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FiresHV(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FiresHV(EWeapon)] Params End
GOTO 8202; UsrFunc[void __DoEWeaponDeath4FiresHV(EWeapon)] Call
POP d4
GOTO 3360; if() #9463 Body End
LOADD d2,7; if() #9467 Test AND if() #9463 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,10
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3271; Test 'if'
PUSHR d4; if() #9467 Body Start
PUSHV 0.3269; UsrFunc[void __DoEWeaponDeath4FiresDiag(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FiresDiag(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FiresDiag(EWeapon)] Params End
GOTO 8270; UsrFunc[void __DoEWeaponDeath4FiresDiag(EWeapon)] Call
POP d4
GOTO 3360; if() #9467 Body End
LOADD d2,7; if() #9471 Test AND if() #9467 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,11
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3289; Test 'if'
PUSHR d4; if() #9471 Body Start
PUSHV 0.3287; UsrFunc[void __DoEWeaponDeath4FiresRand(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FiresRand(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FiresRand(EWeapon)] Params End
GOTO 8338; UsrFunc[void __DoEWeaponDeath4FiresRand(EWeapon)] Call
POP d4
GOTO 3360; if() #9471 Body End
LOADD d2,7; if() #9475 Test AND if() #9471 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,12
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3307; Test 'if'
PUSHR d4; if() #9475 Body Start
PUSHV 0.3305; UsrFunc[void __DoEWeaponDeath8Fires(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void __DoEWeaponDeath8Fires(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath8Fires(EWeapon)] Params End
GOTO 8466; UsrFunc[void __DoEWeaponDeath8Fires(EWeapon)] Call
POP d4
GOTO 3360; if() #9475 Body End
LOADD d2,7; if() #9479 Test AND if() #9475 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,13
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3325; Test 'if'
PUSHR d4; if() #9479 Body Start
PUSHV 0.3323; UsrFunc[void __DoEWeaponDeathSpawnNPC(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void __DoEWeaponDeathSpawnNPC(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathSpawnNPC(EWeapon)] Params End
GOTO 8587; UsrFunc[void __DoEWeaponDeathSpawnNPC(EWeapon)] Call
POP d4
GOTO 3360; if() #9479 Body End
LOADD d2,7; if() #9483 Test AND if() #9479 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,14
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3343; Test 'if'
PUSHR d4; if() #9483 Body Start
PUSHV 0.3341; UsrFunc[void __DoEWeaponDeathSingleFire(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void __DoEWeaponDeathSingleFire(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathSingleFire(EWeapon)] Params End
GOTO 8634; UsrFunc[void __DoEWeaponDeathSingleFire(EWeapon)] Call
POP d4
GOTO 3360; if() #9483 Body End
LOADD d2,7; if() #9487 Test AND if() #9483 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,15
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3360; Test 'if'
PUSHR d4; if() #9487 Body Start
PUSHV 0.3359; UsrFunc[void __DoEWeaponDeathRunScript(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void __DoEWeaponDeathRunScript(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathRunScript(EWeapon)] Params End
GOTO 8688; UsrFunc[void __DoEWeaponDeathRunScript(EWeapon)] Call
POP d4; if() #9487 Body End
LOADD d2,7; if() #9483 Else End AND if() #9479 Else End AND if() #9475 Else End AND if() #9471 Else End AND if() #9467 Else End AND if() #9463 Else End AND if() #9459 Else End AND if() #9432 Else End AND if() #9428 Else End AND if() #9426 Body End AND if() #9372 Else End AND if() #9490 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,8
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3388; Test 'if'
LOADD d2,7; if() #9491 Test AND if() #9490 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3388; Test 'if'
PUSHR d4; if() #9491 Body Start
PUSHV 0.3387; UsrFunc[void DrawEWeaponShadow(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params Start
PUSHR d2; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params End
GOTO 989; UsrFunc[void DrawEWeaponShadow(EWeapon)] Call
POP d4; if() #9491 Body End
LOADD d2,7; if() #9490 Body End AND if() #9493 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3687; Test 'if'
SETV d2,1000; if() #9493 Body Start
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
SETR d2,LINKHP; if() #9495 Test
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 3415; Test 'if'
GOTO 3797; return (Void) AND if() #9495 Body
LOADD d2,7; if() #9496 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3435
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3440; Test 'if'
GOTO 3797; return (Void) AND if() #9496 Body
SETV d2,0
STORED d2,3
SETV d2,0
STORED d2,2
SETV d2,0
STORED d2,1
LOADD d2,7; if() #9498 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOTRUE 3459; Test 'if'
LOADD d2,7; InlineFunc[int RadtoDeg(int)] Params Start AND if() #9498 Body Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
STORED d2,1
GOTO 3526; if() #9498 Body End
PUSHR d4; if() #9498 Else Start
PUSHV 0.3466; UsrFunc[int __NormalizeDir(int)] Return Addr
LOADD d2,7; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
GOTO 2196; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,0
LOADD d2,0; if() #9501 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3476; Test 'if'
SETV d2,-90; if() #9501 Body Start
STORED d2,1
GOTO 3526; if() #9501 Body End
LOADD d2,0; if() #9503 Test AND if() #9501 Else Start
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3484; Test 'if'
SETV d2,-45; if() #9503 Body Start
STORED d2,1
GOTO 3526; if() #9503 Body End
LOADD d2,0; if() #9505 Test AND if() #9503 Else Start
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3492; Test 'if'
SETV d2,0; if() #9505 Body Start
STORED d2,1
GOTO 3526; if() #9505 Body End
LOADD d2,0; if() #9507 Test AND if() #9505 Else Start
COMPAREV d2,7
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3500; Test 'if'
SETV d2,45; if() #9507 Body Start
STORED d2,1
GOTO 3526; if() #9507 Body End
LOADD d2,0; if() #9509 Test AND if() #9507 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3508; Test 'if'
SETV d2,90; if() #9509 Body Start
STORED d2,1
GOTO 3526; if() #9509 Body End
LOADD d2,0; if() #9511 Test AND if() #9509 Else Start
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3516; Test 'if'
SETV d2,135; if() #9511 Body Start
STORED d2,1
GOTO 3526; if() #9511 Body End
LOADD d2,0; if() #9513 Test AND if() #9511 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3524; Test 'if'
SETV d2,180; if() #9513 Body Start
STORED d2,1
GOTO 3526; if() #9513 Body End
SETV d2,-135; if() #9513 Else Start
STORED d2,1; if() #9513 Else End
LOADD d2,4; if() #9511 Else End AND if() #9509 Else End AND if() #9507 Else End AND if() #9505 Else End AND if() #9503 Else End AND if() #9501 Else End AND if() #9498 Else End AND if() #9515 Test
COMPAREV d2,0
GOTOTRUE 3568; Test 'if'
LOADD d2,7; if() #9515 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int Cos(int)] Params Start
SETR d3,d2; InlineFunc[int Cos(int)] Params End
COSR d2,d3; InlineFunc[int Cos(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,3
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int Sin(int)] Params Start
SETR d3,d2; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,2
GOTO 3584; if() #9515 Body End
LOADD d2,7; if() #9515 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,3
LOADD d2,7
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,2; if() #9515 Else End
LOADD d2,6; unless() #9517 Test
PUSHR d2
LOADD d2,3
POP d3
COMPARER d3,d2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3599
LOADD d2,5
PUSHR d2
LOADD d2,2
POP d3
COMPARER d3,d2
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOFALSE 3616; Test 'unless'
PUSHR d4; unless() #9517 Body Start
PUSHV 0.3614; UsrFunc[int Angle(int, int, int, int)] Return Addr
LOADD d2,6; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[int Angle(int, int, int, int)] Params End
GOTO 53; UsrFunc[int Angle(int, int, int, int)] Call
POP d4
STORED d2,1; unless() #9517 Body End
SETV d2,0
STORED d2,0
LOADD d2,1; if() #9520 Test
COMPAREV d2,0
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3629
LOADD d2,1
COMPAREV d2,180
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3636; Test 'if'
SETV d2,0; if() #9520 Body Start
STORED d2,0
GOTO 3638; if() #9520 Body End
SETV d2,2; if() #9520 Else Start
STORED d2,0; if() #9520 Else End
PUSHV 4; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNTILE
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNTXSZ
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNTYSZ
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNCSET
PUSHARGSV -1,0.0002
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 1
PUSHV 128; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 3745; if() #9493 Body End
LOADD d2,7; if() #9523 Test AND if() #9493 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3727; Test 'if'
SETR d2,gd27; if() #9524 Test AND if() #9523 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3718; Test 'if'
SETV d2,1000; if() #9524 Body Start
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
GOTO 3727; if() #9524 Body End
SETV d2,0; if() #9524 Else Start
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2; if() #9524 Else End
LOADD d2,7; if() #9523 Body End AND if() #9526 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3745; Test 'if'
PUSHR d4; if() #9526 Body Start
PUSHV 0.3744; UsrFunc[void SetEWeaponRotation(EWeapon)] Return Addr
LOADD d2,7; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
GOTO 1945; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #9526 Body End
LOADD d2,7; if() #9493 Else End AND if() #9528 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,64
COMPAREV d2,0
SETFALSEI d2
CASTBOOLI d2
COMPAREV d2,0
GOTOTRUE 3797; Test 'if'
LOADD d2,7; if() #9528 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
SUBV2 0,d2
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZOFS,d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
SUBV2 0,d2
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHYOFS,d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
SUBV2 0,d2
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNYOFS,d2; if() #9528 Body End
POPARGS d5,0.0008
RETURN; Func[void UpdateEWeapon(EWeapon)] Body End
PUSHR d2; Func[void __UpdateEWMSineWave(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,0
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1; InlineFunc[int Sin(int)] Params Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d3,EWPNMISCD; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
POP d3
MULTR d2,d3
STORED d2,0
LOADD d2,1
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,1.5708
SETR d3,d2; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,1.5708
SETR d3,d2; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
POPARGS d5,0.0002
RETURN; Func[void __UpdateEWMSineWave(EWeapon)] Body End
PUSHARGSR d2,0.0003; Func[void __UpdateEWMHoming(EWeapon)] Body Start
SETR d4,SP
LOADD d2,3
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
MODV d2,6.2832
STORED d2,2
LOADD d2,2; if() #10286 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4000; Test 'if'
LOADD d2,2; if() #10286 Body Start
ADDV d2,6.2832
STORED d2,2; if() #10286 Body End
PUSHR d4
PUSHV 0.4013; UsrFunc[int RadianAngle(int, int, int, int)] Return Addr
LOADD d2,3; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,3
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
GOTO 26; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP d4
STORED d2,1
LOADD d2,1; if() #10288 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4025; Test 'if'
LOADD d2,1; if() #10288 Body Start
ADDV d2,6.2832
STORED d2,1; if() #10288 Body End
LOADD d2,2; InlineFunc[int Abs(int)] Params Start
PUSHR d2
LOADD d2,1
POP d3
SUBR d3,d2
SETR d2,d3; InlineFunc[int Abs(int)] Params End
ABS d2; InlineFunc[int Abs(int)] Body
STORED d2,0
LOADD d2,0; if() #10289 Test
PUSHR d2
LOADD d2,3
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 4066
LOADD d2,0
PUSHR d2
LOADD d2,3
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 6.2832,d2
POP d3
COMPARER d3,d2
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 4079; Test 'if'
LOADD d2,1; if() #10289 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 4148; if() #10289 Body End
PUSHR d4; if() #10292 Test AND if() #10289 Else Start
PUSHV 0.4088; UsrFunc[int Sign(int)] Return Addr
LOADD d2,2; UsrFunc[int Sign(int)] Params Start
PUSHR d2
LOADD d2,1
POP d3
SUBR d3,d2
PUSHR d3; UsrFunc[int Sign(int)] Params End
GOTO 2574; UsrFunc[int Sign(int)] Call
POP d4
PUSHR d2
PUSHR d4
PUSHV 0.4096; UsrFunc[int Sign(int)] Return Addr
LOADD d2,0; UsrFunc[int Sign(int)] Params Start
SUBV d2,3.1416
PUSHR d2; UsrFunc[int Sign(int)] Params End
GOTO 2574; UsrFunc[int Sign(int)] Call
POP d4
POP d3
COMPARER d3,d2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4125; Test 'if'
LOADD d2,3; if() #10292 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
PUSHR d2
LOADD d2,3
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 4148; if() #10292 Body End
LOADD d2,3; if() #10292 Else Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
PUSHR d2
LOADD d2,3
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2; if() #10292 Else End
PUSHR d4; if() #10289 Else End
PUSHV 0.4153; UsrFunc[void SetEWeaponDir(EWeapon)] Return Addr
LOADD d2,3; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
GOTO 1813; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,3; if() #10297 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4205; Test 'if'
LOADD d2,3; if() #10297 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
SUBV d2,1
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
SETV d2,10
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2
LOADD d2,3; if() #10298 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 4205; Test 'if'
PUSHR d4; if() #10298 Body Start
PUSHV 0.4204; UsrFunc[void KillEWeapon(EWeapon)] Return Addr
LOADD d2,3; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
GOTO 2336; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #10298 Body End
POPARGS d5,0.0004; if() #10297 Body End
RETURN; Func[void __UpdateEWMHoming(EWeapon)] Body End
PUSHR d2; Func[void __UpdateEWMHomingReaim(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1; if() #10301 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4238; Test 'if'
LOADD d2,1; if() #10301 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #10301 Body End
LOADD d2,1; if() #10302 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4344; Test 'if'
LOADD d2,1; if() #10302 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2
LOADD d2,1; if() #10304 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4343; Test 'if'
LOADD d2,1; if() #10305 Test AND if() #10304 Body Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 4301; Test 'if'
PUSHR d4; if() #10305 Body Start
PUSHV 0.4299; UsrFunc[void KillEWeapon(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
GOTO 2336; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 4343; if() #10305 Body End
LOADD d2,1; if() #10305 Else Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
SETV d2,-20
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #10305 Else End
GOTO 4556; if() #10304 Body End AND if() #10302 Body End
LOADD d2,1; if() #10302 Else Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
ADDV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2
LOADD d2,1; if() #10308 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4449; Test 'if'
SETV d2,45; if() #10308 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
PUSHR d4
PUSHV 0.4401; UsrFunc[int RadianAngle(int, int, int, int)] Return Addr
LOADD d2,1; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
GOTO 26; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
LOADD d2,1
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
PUSHR d4
PUSHV 0.4430; UsrFunc[void SetEWeaponDir(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
GOTO 1813; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,1; if() #10311 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4449; Test 'if'
PUSHR d4; if() #10311 Body Start
PUSHV 0.4448; UsrFunc[void SetEWeaponRotation(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
GOTO 1945; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #10311 Body End
LOADD d2,1; if() #10308 Body End AND if() #10313 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4475; Test 'if'
LOADD d2,1; if() #10313 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.3000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 4556; if() #10313 Body End
LOADD d2,1; if() #10315 Test AND if() #10313 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4556; Test 'if'
LOADD d2,1; if() #10315 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.2000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 0,d2
ANDV d2,6
STORED d2,0
LOADD d2,0; if() #10316 Test
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4523; Test 'if'
PUSHR d4; if() #10316 Body Start
PUSHV 0.4521; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Return Addr
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 0; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
GOTO 2478; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4556; if() #10316 Body End
LOADD d2,0; if() #10319 Test AND if() #10316 Else Start
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4536; Test 'if'
PUSHR d4; if() #10319 Body Start
PUSHV 0.4534; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Return Addr
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
GOTO 2478; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4556; if() #10319 Body End
LOADD d2,0; if() #10322 Test AND if() #10319 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4549; Test 'if'
PUSHR d4; if() #10322 Body Start
PUSHV 0.4547; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Return Addr
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
GOTO 2478; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4556; if() #10322 Body End
PUSHR d4; if() #10322 Else Start
PUSHV 0.4555; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Return Addr
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 2; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
GOTO 2478; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4; if() #10322 Else End
POPARGS d5,0.0002; if() #10319 Else End AND if() #10316 Else End AND if() #10315 Body End AND if() #10313 Else End AND if() #10302 Else End
RETURN; Func[void __UpdateEWMHomingReaim(EWeapon)] Body End
SETR d4,SP; Func[void __UpdateEWMRandom(EWeapon)] Body Start
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
PUSHR d2
PUSHR d4
PUSHV 0.4587; UsrFunc[int Randf(int)] Return Addr
LOADD d2,0; UsrFunc[int Randf(int)] Params Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,2
SETV d2,2
PUSHR d2
LOADD d2,0
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
MULTR d2,d3
PUSHR d2; UsrFunc[int Randf(int)] Params End
GOTO 44; UsrFunc[int Randf(int)] Call
POP d4
PUSHR d2
LOADD d2,0
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
PUSHV 0.4614; UsrFunc[void SetEWeaponDir(EWeapon)] Return Addr
LOADD d2,0; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
GOTO 1813; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,0; if() #10329 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4633; Test 'if'
PUSHR d4; if() #10329 Body Start
PUSHV 0.4632; UsrFunc[void SetEWeaponRotation(EWeapon)] Return Addr
LOADD d2,0; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
GOTO 1945; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #10329 Body End
LOADD d2,0; if() #10331 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4684; Test 'if'
LOADD d2,0; if() #10331 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
SUBV d2,1
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,10
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2
LOADD d2,0; if() #10332 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 4684; Test 'if'
PUSHR d4; if() #10332 Body Start
PUSHV 0.4683; UsrFunc[void KillEWeapon(EWeapon)] Return Addr
LOADD d2,0; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
GOTO 2336; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #10332 Body End
POPARGS d5,0.0001; if() #10331 Body End
RETURN; Func[void __UpdateEWMRandom(EWeapon)] Body End
PUSHR d2; Func[void __UpdateEWMRandomReaim(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1; if() #10335 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4717; Test 'if'
LOADD d2,1; if() #10335 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #10335 Body End
LOADD d2,1; if() #10336 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4823; Test 'if'
LOADD d2,1; if() #10336 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2
LOADD d2,1; if() #10338 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4822; Test 'if'
LOADD d2,1; if() #10339 Test AND if() #10338 Body Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 4780; Test 'if'
PUSHR d4; if() #10339 Body Start
PUSHV 0.4778; UsrFunc[void KillEWeapon(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
GOTO 2336; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 4822; if() #10339 Body End
LOADD d2,1; if() #10339 Else Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
SETV d2,-20
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #10339 Else End
GOTO 5011; if() #10338 Body End AND if() #10336 Body End
LOADD d2,1; if() #10336 Else Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
ADDV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2
LOADD d2,1; if() #10342 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4917; Test 'if'
SETV d2,45; if() #10342 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d3,62832; InlineFunc[int Rand(int)] Params
RNDR d2,d3; InlineFunc[int Rand(int)] Body
MULTV d2,0.0001
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
LOADD d2,1
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
PUSHR d4
PUSHV 0.4898; UsrFunc[void SetEWeaponDir(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
GOTO 1813; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,1; if() #10344 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4917; Test 'if'
PUSHR d4; if() #10344 Body Start
PUSHV 0.4916; UsrFunc[void SetEWeaponRotation(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
GOTO 1945; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #10344 Body End
LOADD d2,1; if() #10342 Body End AND if() #10346 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4943; Test 'if'
LOADD d2,1; if() #10346 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.3000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 5011; if() #10346 Body End
LOADD d2,1; if() #10348 Test AND if() #10346 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5011; Test 'if'
LOADD d2,1; if() #10348 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 0,d2
ANDV d2,6
STORED d2,0
LOADD d2,0; if() #10349 Test
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4978; Test 'if'
PUSHR d4; if() #10349 Body Start
PUSHV 0.4976; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Return Addr
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 0; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
GOTO 2478; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 5011; if() #10349 Body End
LOADD d2,0; if() #10352 Test AND if() #10349 Else Start
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4991; Test 'if'
PUSHR d4; if() #10352 Body Start
PUSHV 0.4989; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Return Addr
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
GOTO 2478; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 5011; if() #10352 Body End
LOADD d2,0; if() #10355 Test AND if() #10352 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5004; Test 'if'
PUSHR d4; if() #10355 Body Start
PUSHV 0.5002; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Return Addr
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
GOTO 2478; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 5011; if() #10355 Body End
PUSHR d4; if() #10355 Else Start
PUSHV 0.5010; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Return Addr
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 2; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
GOTO 2478; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4; if() #10355 Else End
POPARGS d5,0.0002; if() #10352 Else End AND if() #10349 Else End AND if() #10348 Body End AND if() #10346 Else End AND if() #10336 Else End
RETURN; Func[void __UpdateEWMRandomReaim(EWeapon)] Body End
PUSHR d2; Func[void __UpdateEWMVeer(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,0
LOADD d2,1
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0; if() #10381 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5128; Test 'if'
LOADD d2,1; if() #10381 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5485; if() #10381 Body End
LOADD d2,0; if() #10383 Test AND if() #10381 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5162; Test 'if'
LOADD d2,1; if() #10383 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5485; if() #10383 Body End
LOADD d2,0; if() #10385 Test AND if() #10383 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5197; Test 'if'
LOADD d2,1; if() #10385 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5485; if() #10385 Body End
LOADD d2,0; if() #10387 Test AND if() #10385 Else Start
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5231; Test 'if'
LOADD d2,1; if() #10387 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5485; if() #10387 Body End
LOADD d2,0; if() #10389 Test AND if() #10387 Else Start
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5297; Test 'if'
LOADD d2,1; if() #10389 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5485; if() #10389 Body End
LOADD d2,0; if() #10391 Test AND if() #10389 Else Start
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5362; Test 'if'
LOADD d2,1; if() #10391 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5485; if() #10391 Body End
LOADD d2,0; if() #10393 Test AND if() #10391 Else Start
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5427; Test 'if'
LOADD d2,1; if() #10393 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5485; if() #10393 Body End
LOADD d2,1; if() #10393 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #10393 Else End
LOADD d2,1; if() #10391 Else End AND if() #10389 Else End AND if() #10387 Else End AND if() #10385 Else End AND if() #10383 Else End AND if() #10381 Else End
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POPARGS d5,0.0002
RETURN; Func[void __UpdateEWMVeer(EWeapon)] Body End
PUSHR d2; Func[void __UpdateEWMThrow(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNJUMP,d2
LOADD d2,1; if() #10361 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5577
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 5611; Test 'if'
LOADD d2,1; if() #10361 Body Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #10361 Body End
LOADD d2,1; InlineFunc[untyped Max(untyped, untyped)] Params Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHVARGR d2
PUSHVARGV 0; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
PUSHR d4; unless() #10364 Test AND if(true) #10363 [Opt:AlwaysOn]
PUSHV 0.5645; UsrFunc[bool IsSideview()] Return Addr
GOTO 2272; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOFALSE 5664; Test 'unless'
LOADD d2,1; unless() #10364 Body Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
GOTO 5680; unless() #10364 Body End
LOADD d2,1; unless() #10364 Else Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 176,d2
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2; unless() #10364 Else End
LOADD d2,1; if() #10367 Test
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5746; Test 'if'
PUSHR d4; unless() #10370 Test AND if(true) #10369 [Opt:AlwaysOn] AND if() #10367 Body Start
PUSHV 0.5720; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Return Addr
LOADD d2,1; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNY
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHXOFS
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHYOFS
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHYSZ
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHXSZ; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
GOTO 10053; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 5745; Test 'unless'
LOADD d2,1; InlineFunc[untyped Max(untyped, untyped)] Params Start AND unless() #10370 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; unless() #10370 Body End
GOTO 5859; if() #10367 Body End
SETV d2,0; if() #10367 Else Start
STORED d2,0
LOADD d2,1; if() #10372 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
GOTOTRUE 5807; Test 'if'
LOADD d2,1; if() #10374 Test AND if() #10372 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,-0.5000
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5804; Test 'if'
LOADD d2,1; if() #10374 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,-0.5000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
MULTV d2,0.7500
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
GOTO 5806; if() #10374 Body End
SETV d2,1; if() #10374 Else Start
STORED d2,0; if() #10374 Else End
GOTO 5809; if() #10372 Body End
SETV d2,1; if() #10372 Else Start
STORED d2,0; if() #10372 Else End
LOADD d2,0; if() #10376 Test
COMPAREV d2,0
GOTOTRUE 5859; Test 'if'
LOADD d2,1; if() #10377 Test AND if() #10376 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1
COMPAREV d2,0
GOTOTRUE 5838; Test 'if'
SETV d2,0; if() #10377 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
PUSHR d4
PUSHV 0.5836; UsrFunc[void KillEWeapon(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
GOTO 2336; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 5859; if() #10377 Body End
SETV d2,0; if() #10377 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,8
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2; if() #10377 Else End
POPARGS d5,0.0002; if() #10376 Body End AND if() #10367 Else End
RETURN; Func[void __UpdateEWMThrow(EWeapon)] Body End
PUSHR d2; Func[void __UpdateEWMFall(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNJUMP,d2
LOADD d2,1
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
PUSHR d4; unless() #10269 Test AND if(true) #10268 [Opt:AlwaysOn]
PUSHV 0.5904; UsrFunc[bool IsSideview()] Return Addr
GOTO 2272; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOFALSE 5923; Test 'unless'
LOADD d2,1; unless() #10269 Body Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
GOTO 5953; unless() #10269 Body End
LOADD d2,1; unless() #10269 Else Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHYOFS,d2
LOADD d2,1
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNYOFS,d2; unless() #10269 Else End
LOADD d2,1; InlineFunc[untyped Min(untyped, untyped)] Params Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ADDV d2,0.1600
PUSHVARGR d2
PUSHVARGV 3.2000; InlineFunc[untyped Min(untyped, untyped)] Params End
MINVARG; InlineFunc[untyped Min(untyped, untyped)] Body
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1; if() #10273 Test AND if(true) #10272 [Opt:AlwaysOn]
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 6131; Test 'if'
PUSHR d4; unless() #10274 Test AND if() #10273 Body Start
PUSHV 0.6013; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Return Addr
LOADD d2,1; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNY
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHXOFS
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHYOFS
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHYSZ
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHXSZ; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
GOTO 10053; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 6131; Test 'unless'
SETV d2,0; unless() #10274 Body Start
STORED d2,0
LOADD d2,1; if() #10277 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 6079; Test 'if'
LOADD d2,1; if() #10279 Test AND if() #10277 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,-0.5000
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6076; Test 'if'
LOADD d2,1; if() #10279 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,-0.5000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
MULTV d2,0.7500
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
GOTO 6078; if() #10279 Body End
SETV d2,1; if() #10279 Else Start
STORED d2,0; if() #10279 Else End
GOTO 6081; if() #10277 Body End
SETV d2,1; if() #10277 Else Start
STORED d2,0; if() #10277 Else End
LOADD d2,0; if() #10281 Test
COMPAREV d2,0
GOTOTRUE 6131; Test 'if'
LOADD d2,1; if() #10282 Test AND if() #10281 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1
COMPAREV d2,0
GOTOTRUE 6110; Test 'if'
SETV d2,0; if() #10282 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
PUSHR d4
PUSHV 0.6108; UsrFunc[void KillEWeapon(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
GOTO 2336; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 6131; if() #10282 Body End
SETV d2,0; if() #10282 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,8
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2; if() #10282 Else End
POPARGS d5,0.0002; if() #10281 Body End AND unless() #10274 Body End AND if() #10273 Body End
RETURN; Func[void __UpdateEWMFall(EWeapon)] Body End
PUSHR d2; Func[void __UpdateEWMDrift(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,0
LOADD d2,1
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0; if() #10236 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6248; Test 'if'
LOADD d2,1; if() #10236 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6605; if() #10236 Body End
LOADD d2,0; if() #10238 Test AND if() #10236 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6282; Test 'if'
LOADD d2,1; if() #10238 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6605; if() #10238 Body End
LOADD d2,0; if() #10240 Test AND if() #10238 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6317; Test 'if'
LOADD d2,1; if() #10240 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6605; if() #10240 Body End
LOADD d2,0; if() #10242 Test AND if() #10240 Else Start
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6351; Test 'if'
LOADD d2,1; if() #10242 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6605; if() #10242 Body End
LOADD d2,0; if() #10244 Test AND if() #10242 Else Start
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6417; Test 'if'
LOADD d2,1; if() #10244 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6605; if() #10244 Body End
LOADD d2,0; if() #10246 Test AND if() #10244 Else Start
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6482; Test 'if'
LOADD d2,1; if() #10246 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6605; if() #10246 Body End
LOADD d2,0; if() #10248 Test AND if() #10246 Else Start
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6547; Test 'if'
LOADD d2,1; if() #10248 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6605; if() #10248 Body End
LOADD d2,1; if() #10248 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #10248 Else End
LOADD d2,1; if() #10246 Else End AND if() #10244 Else End AND if() #10242 Else End AND if() #10240 Else End AND if() #10238 Else End AND if() #10236 Else End
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
POPARGS d5,0.0002
RETURN; Func[void __UpdateEWMDrift(EWeapon)] Body End
PUSHR d2; Func[void __UpdateEWMDriftWait(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,0
LOADD d2,1; if() #10251 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,16
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 6729; Test 'if'
LOADD d2,1; if() #10251 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6750; if() #10251 Body End
LOADD d2,1; if() #10251 Else Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
ADDV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2; if() #10251 Else End
LOADD d2,0; if() #10253 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6785; Test 'if'
LOADD d2,1; if() #10253 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7142; if() #10253 Body End
LOADD d2,0; if() #10255 Test AND if() #10253 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6819; Test 'if'
LOADD d2,1; if() #10255 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7142; if() #10255 Body End
LOADD d2,0; if() #10257 Test AND if() #10255 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6854; Test 'if'
LOADD d2,1; if() #10257 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7142; if() #10257 Body End
LOADD d2,0; if() #10259 Test AND if() #10257 Else Start
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6888; Test 'if'
LOADD d2,1; if() #10259 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7142; if() #10259 Body End
LOADD d2,0; if() #10261 Test AND if() #10259 Else Start
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6954; Test 'if'
LOADD d2,1; if() #10261 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7142; if() #10261 Body End
LOADD d2,0; if() #10263 Test AND if() #10261 Else Start
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7019; Test 'if'
LOADD d2,1; if() #10263 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7142; if() #10263 Body End
LOADD d2,0; if() #10265 Test AND if() #10263 Else Start
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7084; Test 'if'
LOADD d2,1; if() #10265 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7142; if() #10265 Body End
LOADD d2,1; if() #10265 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #10265 Else End
LOADD d2,1; if() #10263 Else End AND if() #10261 Else End AND if() #10259 Else End AND if() #10257 Else End AND if() #10255 Else End AND if() #10253 Else End
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
POPARGS d5,0.0002
RETURN; Func[void __UpdateEWMDriftWait(EWeapon)] Body End
PUSHARGSR d2,0.0011; Func[void __DoEWeaponDeathPrototype(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,10
SETV d2,0
STORED d2,9
SETV d2,0
STORED d2,8
SETV d2,0
STORED d2,7
SETV d2,0
STORED d2,6
SETV d2,0
STORED d2,5
SETV d2,0
STORED d2,4
SETV d2,0
STORED d2,3
SETV d2,0
STORED d2,2
LOADD d2,11; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,10
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #9810 setup
STORED d2,2
LOADD d2,2; for() #9810 LoopTest
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7251; for() #9810 TestFail?
LOADD d2,2; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #9810 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORED d2,9
LOADD d2,9; if() #9813 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,768
COMPAREV d2,768
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 7230; Test 'if'
GOTO 7245; continue #9812 AND if() #9813 Body
LOADD d2,9; if() #9814 Test
PUSHR d2
SETV d2,3
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,10
POP d3
COMPARER d3,d2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7245; Test 'if'
GOTO 7251; break #9811 AND if() #9814 Body
LOADD d2,2; for() #9810 Body End AND for() #9810 LoopIncrement
PUSHR d2
SUBV d2,1
STORED d2,2
POP d2
GOTO 7205; for() #9810 End
LOADD d2,2; if() #9815 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7277; Test 'if'
ALLOCATEMEMV d2,43; if() #9815 Body Start
STORED d2,0
WRITEPODSTRING d2,"ghost.zh: Failed to find prototype eweapon"
LOADD d2,0; InlineFunc[void TraceS(int)] Params Start
SETR d0,d2; InlineFunc[void TraceS(int)] Params End
TRACE6 d3; InlineFunc[void TraceS(int)] Body
TRACE3; InlineFunc[void TraceNL()] Body
SETV d2,0
PUSHR d2
LOADD d2,11
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
LOADD d3,0
DEALLOCATEMEMR d3
GOTO 7608; return (Void)
LOADD d3,0
DEALLOCATEMEMR d3; if() #9815 Body End
LOADD d2,11
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MODV d2,10
SUBV d2,6.2832
STORED d2,4
LOADD d2,11
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,10
POP d3
SUBR d3,d2
SETR d2,d3
MULTV d2,10000
STORED d2,3
LOADD d2,11
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,4
POP d3
SUBR d3,d2
SETR d2,d3
DIVV d2,100
RSHIFTV d2,0
STORED d2,7
LOADD d2,11; if() #9816 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNEXTEND
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7367; Test 'if'
LOADD d2,11; if() #9816 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,6
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,5
GOTO 7379; if() #9816 Body End
LOADD d2,11; if() #9816 Else Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
ADDV d2,8
STORED d2,6
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
ADDV d2,8
STORED d2,5; if() #9816 Else End
LOADD d2,7; if() #9818 Test
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7438; Test 'if'
SETV d2,0; for() #9820 setup AND if() #9818 Body Start
STORED d2,1
LOADD d2,1; for() #9820 LoopTest
PUSHR d2
LOADD d2,3
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7429; for() #9820 TestFail?
PUSHR d4; for() #9820 Body Start
PUSHV 0.7422; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Return Addr
LOADD d2,9; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,5
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,1
MULTV d2,6.2832
SETV d2,6.2832
PUSHR d2
LOADD d2,1
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
DIVR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
GOTO 9551; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; for() #9820 Body End
LOADD d2,1; for() #9820 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,1
POP d2
GOTO 7386; for() #9820 End
LOADD d2,9; InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,2
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
GOTO 7599; if() #9818 Body End
LOADD d2,7; if() #9824 Test AND if() #9818 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7484; Test 'if'
SETV d2,0; for() #9826 setup AND if() #9824 Body Start
STORED d2,1
LOADD d2,1; for() #9826 LoopTest
PUSHR d2
LOADD d2,3
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7475; for() #9826 TestFail?
PUSHR d4; for() #9826 Body Start
PUSHV 0.7468; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Return Addr
LOADD d2,9; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,5
PUSHR d2
SETV d3,31416; InlineFunc[int Rand(int)] Params
RNDR d2,d3; InlineFunc[int Rand(int)] Body
DIVV d2,5000
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
GOTO 9551; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; for() #9826 Body End
LOADD d2,1; for() #9826 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,1
POP d2
GOTO 7445; for() #9826 End
LOADD d2,9; InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,2
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
GOTO 7599; if() #9824 Body End
LOADD d2,3; if() #9830 Test AND if() #9824 Else Start
COMPAREV d2,1
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7559; Test 'if'
SETR d2,LINKX; InlineFunc[int ArcTan(int, int)] Params Start AND if() #9830 Body Start
ADDV d2,8
PUSHR d2
LOADD d2,6
POP d3
SUBR d3,d2
PUSHR d3
SETR d2,LINKY
ADDV d2,8
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR d2
LOADD d2,4
DIVV d2,2
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,1
SETV d2,0; for() #9832 setup
STORED d2,0
LOADD d2,0; for() #9832 LoopTest
PUSHR d2
LOADD d2,3
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7558; for() #9832 TestFail?
PUSHR d4; for() #9832 Body Start
PUSHV 0.7551; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Return Addr
LOADD d2,9; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,5
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,0
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
SUBV d2,1
POP d3
DIVR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
GOTO 9551; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; for() #9832 Body End
LOADD d2,0; for() #9832 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 7516; for() #9832 End
GOTO 7591; if() #9830 Body End
LOADD d2,3; if() #9836 Test AND if() #9830 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7591; Test 'if'
PUSHR d4; if() #9836 Body Start
PUSHV 0.7590; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Return Addr
LOADD d2,9; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,5
PUSHR d2
SETR d2,LINKX; InlineFunc[int ArcTan(int, int)] Params Start
ADDV d2,8
PUSHR d2
LOADD d2,6
POP d3
SUBR d3,d2
PUSHR d3
SETR d2,LINKY
ADDV d2,8
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
GOTO 9551; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; if() #9836 Body End
LOADD d2,9; if() #9830 Else End AND InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,2
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body AND if() #9824 Else End
SETV d2,0; if() #9818 Else End
PUSHR d2
LOADD d2,11
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0012
RETURN; Func[void __DoEWeaponDeathPrototype(EWeapon)] Body End
PUSHR d2; Func[void __DoEWeaponDeathAimAtLink(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,14
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1; if() #9788 Test
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 7701; Test 'if'
PUSHR d4; if() #9788 Body Start
PUSHV 0.7664; UsrFunc[int RadianAngle(int, int, int, int)] Return Addr
LOADD d2,1; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
GOTO 26; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
PUSHV 0.7678; UsrFunc[void SetEWeaponDir(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
GOTO 1813; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
SETV d2,300
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,13
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7782; if() #9788 Body End
LOADD d2,1; if() #9792 Test AND if() #9788 Else Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOTRUE 7727; Test 'if'
LOADD d2,1; if() #9792 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.3000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
PUSHV 0.7725; UsrFunc[void SetEWeaponDir(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
GOTO 1813; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
GOTO 7782; if() #9792 Body End
LOADD d2,1; if() #9792 Else Start
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,6
STORED d2,0
LOADD d2,0; if() #9795 Test
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7749; Test 'if'
PUSHR d4; if() #9795 Body Start
PUSHV 0.7747; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Return Addr
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 0; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
GOTO 2478; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 7782; if() #9795 Body End
LOADD d2,0; if() #9798 Test AND if() #9795 Else Start
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7762; Test 'if'
PUSHR d4; if() #9798 Body Start
PUSHV 0.7760; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Return Addr
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
GOTO 2478; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 7782; if() #9798 Body End
LOADD d2,0; if() #9801 Test AND if() #9798 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7775; Test 'if'
PUSHR d4; if() #9801 Body Start
PUSHV 0.7773; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Return Addr
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
GOTO 2478; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 7782; if() #9801 Body End
PUSHR d4; if() #9801 Else Start
PUSHV 0.7781; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Return Addr
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 2; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
GOTO 2478; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4; if() #9801 Else End
POPARGS d5,0.0002; if() #9798 Else End AND if() #9795 Else End AND if() #9792 Else End AND if() #9788 Else End
RETURN; Func[void __DoEWeaponDeathAimAtLink(EWeapon)] Body End
SETR d4,SP; Func[void __DoEWeaponDeathExplode(EWeapon)] Body Start
PUSHR d4
PUSHV 0.7819; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Return Addr
PUSHV 135; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
PUSHV 0.7793; UsrFunc[int CenterX(EWeapon)] Return Addr
LOADD d2,0; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
GOTO 880; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
PUSHV 0.7801; UsrFunc[int CenterY(EWeapon)] Return Addr
LOADD d2,0; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
GOTO 904; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOADD d2,0
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHV -1
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
GOTO 1403; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0001
RETURN; Func[void __DoEWeaponDeathExplode(EWeapon)] Body End
SETR d4,SP; Func[void __DoEWeaponDeathSBombExplode(EWeapon)] Body Start
PUSHR d4
PUSHV 0.7866; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Return Addr
PUSHV 136; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
PUSHV 0.7840; UsrFunc[int CenterX(EWeapon)] Return Addr
LOADD d2,0; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
GOTO 880; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
PUSHV 0.7848; UsrFunc[int CenterY(EWeapon)] Return Addr
LOADD d2,0; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
GOTO 904; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOADD d2,0
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHV -1
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
GOTO 1403; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0001
RETURN; Func[void __DoEWeaponDeathSBombExplode(EWeapon)] Body End
PUSHR d2; Func[void __DoEWeaponDeath4FireballsHV(EWeapon)] Body Start
SETR d4,SP
SETV d2,0; for() #9717 setup
STORED d2,0
LOADD d2,0; for() #9717 LoopTest
COMPAREV d2,4
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7933; for() #9717 TestFail?
PUSHR d4; for() #9717 Body Start
PUSHV 0.7926; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Return Addr
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
PUSHV 0.7897; UsrFunc[int CenterX(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
GOTO 880; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
PUSHV 0.7905; UsrFunc[int CenterY(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
GOTO 904; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
GOTO 1403; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #9717 Body End
LOADD d2,0; for() #9717 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 7882; for() #9717 End
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURN; Func[void __DoEWeaponDeath4FireballsHV(EWeapon)] Body End
PUSHR d2; Func[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Body Start
SETR d4,SP
SETV d2,4; for() #9710 setup
STORED d2,0
LOADD d2,0; for() #9710 LoopTest
COMPAREV d2,8
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7999; for() #9710 TestFail?
PUSHR d4; for() #9710 Body Start
PUSHV 0.7992; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Return Addr
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
PUSHV 0.7963; UsrFunc[int CenterX(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
GOTO 880; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
PUSHV 0.7971; UsrFunc[int CenterY(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
GOTO 904; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
GOTO 1403; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #9710 Body End
LOADD d2,0; for() #9710 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 7948; for() #9710 End
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURN; Func[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Body End
PUSHR d2; Func[void __DoEWeaponDeath4FireballsRand(EWeapon)] Body Start
SETR d4,SP
SETV d3,2; InlineFunc[int Rand(int)] Params AND if() #9724 Test
RNDR d2,d3; InlineFunc[int Rand(int)] Body
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8072; Test 'if'
SETV d2,0; for() #9726 setup AND if() #9724 Body Start
STORED d2,0
LOADD d2,0; for() #9726 LoopTest
COMPAREV d2,4
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8071; for() #9726 TestFail?
PUSHR d4; for() #9726 Body Start
PUSHV 0.8064; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Return Addr
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
PUSHV 0.8035; UsrFunc[int CenterX(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
GOTO 880; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
PUSHV 0.8043; UsrFunc[int CenterY(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
GOTO 904; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
GOTO 1403; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #9726 Body End
LOADD d2,0; for() #9726 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 8020; for() #9726 End
GOTO 8125; if() #9724 Body End
SETV d2,4; for() #9732 setup AND if() #9724 Else Start
STORED d2,0
LOADD d2,0; for() #9732 LoopTest
COMPAREV d2,8
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8125; for() #9732 TestFail?
PUSHR d4; for() #9732 Body Start
PUSHV 0.8118; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Return Addr
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
PUSHV 0.8089; UsrFunc[int CenterX(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
GOTO 880; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
PUSHV 0.8097; UsrFunc[int CenterY(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
GOTO 904; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
GOTO 1403; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #9732 Body End
LOADD d2,0; for() #9732 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 8074; for() #9732 End
SETV d2,0; if() #9724 Else End
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURN; Func[void __DoEWeaponDeath4FireballsRand(EWeapon)] Body End
PUSHR d2; Func[void __DoEWeaponDeath8Fireballs(EWeapon)] Body Start
SETR d4,SP
SETV d2,0; for() #9768 setup
STORED d2,0
LOADD d2,0; for() #9768 LoopTest
COMPAREV d2,8
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8191; for() #9768 TestFail?
PUSHR d4; for() #9768 Body Start
PUSHV 0.8184; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Return Addr
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
PUSHV 0.8155; UsrFunc[int CenterX(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
GOTO 880; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
PUSHV 0.8163; UsrFunc[int CenterY(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
GOTO 904; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
GOTO 1403; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #9768 Body End
LOADD d2,0; for() #9768 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 8140; for() #9768 End
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURN; Func[void __DoEWeaponDeath8Fireballs(EWeapon)] Body End
PUSHR d2; Func[void __DoEWeaponDeath4FiresHV(EWeapon)] Body Start
SETR d4,SP
SETV d2,0; for() #9746 setup
STORED d2,0
LOADD d2,0; for() #9746 LoopTest
COMPAREV d2,4
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8257; for() #9746 TestFail?
PUSHR d4; for() #9746 Body Start
PUSHV 0.8250; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Return Addr
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
PUSHV 0.8221; UsrFunc[int CenterX(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
GOTO 880; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
PUSHV 0.8229; UsrFunc[int CenterY(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
GOTO 904; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 100
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
GOTO 1403; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #9746 Body End
LOADD d2,0; for() #9746 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 8206; for() #9746 End
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURN; Func[void __DoEWeaponDeath4FiresHV(EWeapon)] Body End
PUSHR d2; Func[void __DoEWeaponDeath4FiresDiag(EWeapon)] Body Start
SETR d4,SP
SETV d2,4; for() #9739 setup
STORED d2,0
LOADD d2,0; for() #9739 LoopTest
COMPAREV d2,8
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8325; for() #9739 TestFail?
PUSHR d4; for() #9739 Body Start
PUSHV 0.8318; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Return Addr
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
PUSHV 0.8289; UsrFunc[int CenterX(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
GOTO 880; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
PUSHV 0.8297; UsrFunc[int CenterY(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
GOTO 904; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 71
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
GOTO 1403; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #9739 Body End
LOADD d2,0; for() #9739 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 8274; for() #9739 End
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURN; Func[void __DoEWeaponDeath4FiresDiag(EWeapon)] Body End
PUSHR d2; Func[void __DoEWeaponDeath4FiresRand(EWeapon)] Body Start
SETR d4,SP
SETV d3,2; InlineFunc[int Rand(int)] Params AND if() #9753 Test
RNDR d2,d3; InlineFunc[int Rand(int)] Body
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8400; Test 'if'
SETV d2,0; for() #9755 setup AND if() #9753 Body Start
STORED d2,0
LOADD d2,0; for() #9755 LoopTest
COMPAREV d2,4
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8399; for() #9755 TestFail?
PUSHR d4; for() #9755 Body Start
PUSHV 0.8392; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Return Addr
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
PUSHV 0.8363; UsrFunc[int CenterX(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
GOTO 880; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
PUSHV 0.8371; UsrFunc[int CenterY(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
GOTO 904; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 100
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
GOTO 1403; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #9755 Body End
LOADD d2,0; for() #9755 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 8348; for() #9755 End
GOTO 8453; if() #9753 Body End
SETV d2,4; for() #9761 setup AND if() #9753 Else Start
STORED d2,0
LOADD d2,0; for() #9761 LoopTest
COMPAREV d2,8
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8453; for() #9761 TestFail?
PUSHR d4; for() #9761 Body Start
PUSHV 0.8446; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Return Addr
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
PUSHV 0.8417; UsrFunc[int CenterX(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
GOTO 880; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
PUSHV 0.8425; UsrFunc[int CenterY(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
GOTO 904; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 71
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
GOTO 1403; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #9761 Body End
LOADD d2,0; for() #9761 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 8402; for() #9761 End
SETV d2,13; if() #9753 Else End AND InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURN; Func[void __DoEWeaponDeath4FiresRand(EWeapon)] Body End
PUSHR d2; Func[void __DoEWeaponDeath8Fires(EWeapon)] Body Start
SETR d4,SP
SETV d2,0; for() #9775 setup
STORED d2,0
LOADD d2,0; for() #9775 LoopTest
COMPAREV d2,4
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8521; for() #9775 TestFail?
PUSHR d4; for() #9775 Body Start
PUSHV 0.8514; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Return Addr
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
PUSHV 0.8485; UsrFunc[int CenterX(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
GOTO 880; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
PUSHV 0.8493; UsrFunc[int CenterY(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
GOTO 904; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 100
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
GOTO 1403; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #9775 Body End
LOADD d2,0; for() #9775 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 8470; for() #9775 End
SETV d2,4; for() #9781 setup
STORED d2,0
LOADD d2,0; for() #9781 LoopTest
COMPAREV d2,8
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8574; for() #9781 TestFail?
PUSHR d4; for() #9781 Body Start
PUSHV 0.8567; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Return Addr
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
PUSHV 0.8538; UsrFunc[int CenterX(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
GOTO 880; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
PUSHV 0.8546; UsrFunc[int CenterY(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
GOTO 904; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 71
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
GOTO 1403; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #9781 Body End
LOADD d2,0; for() #9781 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 8523; for() #9781 End
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURN; Func[void __DoEWeaponDeath8Fires(EWeapon)] Body End
PUSHR d2; Func[void __DoEWeaponDeathSpawnNPC(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1; InlineFunc[NPC Screen->CreateNPC(int)] Params Start
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[NPC Screen->CreateNPC(int)] Params End
CREATENPCR d2; InlineFunc[NPC Screen->CreateNPC(int)] Body Start
SETR d2,REFNPC; InlineFunc[NPC Screen->CreateNPC(int)] Body End
STORED d2,0
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURN; Func[void __DoEWeaponDeathSpawnNPC(EWeapon)] Body End
SETR d4,SP; Func[void __DoEWeaponDeathSingleFire(EWeapon)] Body Start
PUSHR d4
PUSHV 0.8674; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Return Addr
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
PUSHV 0.8643; UsrFunc[int CenterX(EWeapon)] Return Addr
LOADD d2,0; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
GOTO 880; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
PUSHV 0.8651; UsrFunc[int CenterY(EWeapon)] Return Addr
LOADD d2,0; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
GOTO 904; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,0
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
GOTO 1403; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0001
RETURN; Func[void __DoEWeaponDeathSingleFire(EWeapon)] Body End
PUSHARGSR d2,0.0005; Func[void __DoEWeaponDeathRunScript(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,4
SETV d2,0
STORED d2,3
SETV d2,0
STORED d2,2
SETV d2,0
STORED d2,1
PUSHR d4
PUSHV 0.8701; UsrFunc[int FindUnusedFFC()] Return Addr
GOTO 1343; UsrFunc[int FindUnusedFFC()] Call
POP d4
STORED d2,4
LOADD d2,4; if() #9840 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8718; Test 'if'
SETV d2,0; if() #9840 Body Start
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
GOTO 8864; return (Void) AND if() #9840 Body End
LOADD d2,4; InlineFunc[FFC Screen->LoadFFC(int)] Params
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,3
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #9841 setup
STORED d2,0
LOADD d2,0; for() #9841 LoopTest
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8765; for() #9841 TestFail?
LOADD d2,0; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #9841 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORED d2,2
LOADD d2,2; if() #9844 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,768
COMPAREV d2,512
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 8748; Test 'if'
GOTO 8759; continue #9843 AND if() #9844 Body
LOADD d2,1; InlineFunc[untyped Min(untyped, untyped)] Params Start
PUSHVARGR d2
LOADD d2,2
PUSHR d2
SETV d2,3
PUSHR d2
POP d0
POP REFEWPN
PUSHVARGR EWPNMISCD; InlineFunc[untyped Min(untyped, untyped)] Params End
MINVARG; InlineFunc[untyped Min(untyped, untyped)] Body
STORED d2,1; for() #9841 Body End
LOADD d2,0; for() #9841 LoopIncrement
PUSHR d2
SUBV d2,1
STORED d2,0
POP d2
GOTO 8723; for() #9841 End
LOADD d2,1
SUBV d2,1
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
SETV d2,3
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,5
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ORV d2,1024
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,1
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
PUSHR d4
PUSHV 0.8811; UsrFunc[int CenterX(EWeapon)] Return Addr
LOADD d2,5; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
GOTO 880; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
PUSHR d4
PUSHV 0.8826; UsrFunc[int CenterY(EWeapon)] Return Addr
LOADD d2,5; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
GOTO 904; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
LOADD d2,5
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFSCRIPT,d2
LOADD d2,1
SUBV d2,1
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFINITDD,d2
POPARGS d5,0.0006
RETURN; Func[void __DoEWeaponDeathRunScript(EWeapon)] Body End
PUSHARGSR d2,0.0002; Func[void UpdateEWeapons()] Body Start
SETR d4,SP
SETV d2,0
STORED d2,1
SETR d2,LINKACTION; unless() #9531 Test
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 8880
SETR d2,LINKACTION
COMPAREV d2,5
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 8888
SETR d2,LINKACTION
COMPAREV d2,14
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 8896
SETR d2,LINKACTION
COMPAREV d2,15
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOFALSE 8954; Test 'unless'
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #9536 setup AND unless() #9531 Body Start
STORED d2,0
LOADD d2,0; for() #9536 LoopTest
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8953; for() #9536 TestFail?
LOADD d2,0; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #9536 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORED d2,1
LOADD d2,1; if() #9539 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,512
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 8937
LOADD d2,1
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,256
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 8941; Test 'if'
GOTO 8947; continue #9538 AND if() #9539 Body
PUSHR d4
PUSHV 0.8946; UsrFunc[void UpdateEWeapon(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[void UpdateEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void UpdateEWeapon(EWeapon)] Params End
GOTO 2603; UsrFunc[void UpdateEWeapon(EWeapon)] Call
POP d4; for() #9536 Body End
LOADD d2,0; for() #9536 LoopIncrement
PUSHR d2
SUBV d2,1
STORED d2,0
POP d2
GOTO 8901; for() #9536 End
GOTO 9008; unless() #9531 Body End
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #9542 setup AND unless() #9531 Else Start
STORED d2,0
LOADD d2,0; for() #9542 LoopTest
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9008; for() #9542 TestFail?
LOADD d2,0; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #9542 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORED d2,1
LOADD d2,1; if() #9545 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,512
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 8992
LOADD d2,1
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,256
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 8996; Test 'if'
GOTO 9002; continue #9544 AND if() #9545 Body
PUSHR d4
PUSHV 0.9001; UsrFunc[void __UpdateEWeaponVisualFlags(EWeapon)] Return Addr
LOADD d2,1; UsrFunc[void __UpdateEWeaponVisualFlags(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWeaponVisualFlags(EWeapon)] Params End
GOTO 9010; UsrFunc[void __UpdateEWeaponVisualFlags(EWeapon)] Call
POP d4; for() #9542 Body End
LOADD d2,0; for() #9542 LoopIncrement
PUSHR d2
SUBV d2,1
STORED d2,0
POP d2
GOTO 8956; for() #9542 End
POPARGS d5,0.0002; unless() #9531 Else End
RETURN; Func[void UpdateEWeapons()] Body End
PUSHARGSR d2,0.0002; Func[void __UpdateEWeaponVisualFlags(EWeapon)] Body Start
SETR d4,SP
LOADD d2,2; if() #10396 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,8
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 9040; Test 'if'
LOADD d2,2; if() #10397 Test AND if() #10396 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9040; Test 'if'
PUSHR d4; if() #10397 Body Start
PUSHV 0.9039; UsrFunc[void DrawEWeaponShadow(EWeapon)] Return Addr
LOADD d2,2; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params Start
PUSHR d2; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params End
GOTO 989; UsrFunc[void DrawEWeaponShadow(EWeapon)] Call
POP d4; if() #10397 Body End
LOADD d2,2; if() #10396 Body End AND if() #10399 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 9242; Test 'if'
SETV d2,1000; if() #10399 Body Start
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
LOADD d2,2; if() #10401 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 9081
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 9086; Test 'if'
GOTO 9300; return (Void) AND if() #10401 Body
SETV d2,0
STORED d2,1
LOADD d2,2; if() #10403 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOTRUE 9101; Test 'if'
LOADD d2,2; InlineFunc[int RadtoDeg(int)] Params Start AND if() #10403 Body Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
STORED d2,1
GOTO 9168; if() #10403 Body End
PUSHR d4; if() #10403 Else Start
PUSHV 0.9108; UsrFunc[int __NormalizeDir(int)] Return Addr
LOADD d2,2; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
GOTO 2196; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,0
LOADD d2,0; if() #10406 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9118; Test 'if'
SETV d2,-90; if() #10406 Body Start
STORED d2,1
GOTO 9168; if() #10406 Body End
LOADD d2,0; if() #10408 Test AND if() #10406 Else Start
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9126; Test 'if'
SETV d2,-45; if() #10408 Body Start
STORED d2,1
GOTO 9168; if() #10408 Body End
LOADD d2,0; if() #10410 Test AND if() #10408 Else Start
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9134; Test 'if'
SETV d2,0; if() #10410 Body Start
STORED d2,1
GOTO 9168; if() #10410 Body End
LOADD d2,0; if() #10412 Test AND if() #10410 Else Start
COMPAREV d2,7
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9142; Test 'if'
SETV d2,45; if() #10412 Body Start
STORED d2,1
GOTO 9168; if() #10412 Body End
LOADD d2,0; if() #10414 Test AND if() #10412 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9150; Test 'if'
SETV d2,90; if() #10414 Body Start
STORED d2,1
GOTO 9168; if() #10414 Body End
LOADD d2,0; if() #10416 Test AND if() #10414 Else Start
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9158; Test 'if'
SETV d2,135; if() #10416 Body Start
STORED d2,1
GOTO 9168; if() #10416 Body End
LOADD d2,0; if() #10418 Test AND if() #10416 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9166; Test 'if'
SETV d2,180; if() #10418 Body Start
STORED d2,1
GOTO 9168; if() #10418 Body End
SETV d2,-135; if() #10418 Else Start
STORED d2,1; if() #10418 Else End
SETV d2,0; if() #10416 Else End AND if() #10414 Else End AND if() #10412 Else End AND if() #10410 Else End AND if() #10408 Else End AND if() #10406 Else End AND if() #10403 Else End
STORED d2,0
LOADD d2,1; if() #10420 Test
COMPAREV d2,0
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 9181
LOADD d2,1
COMPAREV d2,180
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 9188; Test 'if'
SETV d2,0; if() #10420 Body Start
STORED d2,0
GOTO 9190; if() #10420 Body End
SETV d2,2; if() #10420 Else Start
STORED d2,0; if() #10420 Else End
PUSHV 4; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOADD d2,2
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,2
PUSHR d2
POP REFEWPN
PUSHR EWPNTILE
PUSHARGSV 1,0.0002
LOADD d2,2
PUSHR d2
POP REFEWPN
PUSHR EWPNCSET
PUSHARGSV -1,0.0002
LOADD d2,2
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 1
PUSHV 128; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 9300; if() #10399 Body End
LOADD d2,2; if() #10423 Test AND if() #10399 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 9282; Test 'if'
SETR d2,gd27; if() #10424 Test AND if() #10423 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 9273; Test 'if'
SETV d2,1000; if() #10424 Body Start
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
GOTO 9282; if() #10424 Body End
SETV d2,0; if() #10424 Else Start
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2; if() #10424 Else End
LOADD d2,2; if() #10423 Body End AND if() #10426 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 9300; Test 'if'
PUSHR d4; if() #10426 Body Start
PUSHV 0.9299; UsrFunc[void SetEWeaponRotation(EWeapon)] Return Addr
LOADD d2,2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
GOTO 1945; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #10426 Body End
POPARGS d5,0.0003; if() #10399 Else End
RETURN; Func[void __UpdateEWeaponVisualFlags(EWeapon)] Body End
SETR d4,SP; Func[void UpdateGhostZH1()] Body Start
PUSHR d4
PUSHV 0.9306; UsrFunc[void UpdateEWeapons()] Return Addr
GOTO 8866; UsrFunc[void UpdateEWeapons()] Call
PEEK d4
PUSHV 0.9309; UsrFunc[void CleanUpGhostFFCs()] Return Addr
GOTO 928; UsrFunc[void CleanUpGhostFFCs()] Call
PEEK d4
PUSHV 0.9312; UsrFunc[void UpdateGhostZHData1()] Return Addr
GOTO 9314; UsrFunc[void UpdateGhostZHData1()] Call
POP d4
RETURN; Func[void UpdateGhostZH1()] Body End
PUSHR d2; Func[void UpdateGhostZHData1()] Body Start
SETR d4,SP
SETR d2,CURDMAP; InlineFunc[int Game->GetCurDMap()] Body
LSHIFTV d2,8
PUSHR d2
SETR d2,CURDSCR; InlineFunc[int Game->GetCurDMapScreen()] Body
POP d3
ADDR d2,d3
STORED d2,0
SETR d2,gd27; if() #9565 Test
PUSHR d2
POP d0
READPODARRAYV d2,7
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 9347; Test 'if'
SETV d2,0; if() #9565 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2
LOADD d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 7,d2
GOTO 9369; if() #9565 Body End
SETR d2,gd27; if() #9567 Test AND if() #9565 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,6
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9369; Test 'if'
SETR d2,gd27; if() #9567 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,6
PUSHR d2
SUBV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2
POP d2; if() #9567 Body End
POPARGS d5,0.0001; if() #9565 Else End
RETURN; Func[void UpdateGhostZHData1()] Body End
SETR d4,SP; Func[void UpdateGhostZH2()] Body Start
PUSHR d4
PUSHV 0.9375; UsrFunc[void DrawGhostFFCs()] Return Addr
GOTO 1056; UsrFunc[void DrawGhostFFCs()] Call
PEEK d4
PUSHV 0.9378; UsrFunc[void AutoGhost()] Return Addr
GOTO 73; UsrFunc[void AutoGhost()] Call
PEEK d4
PUSHV 0.9381; UsrFunc[void UpdateGhostZHData2()] Return Addr
GOTO 9383; UsrFunc[void UpdateGhostZHData2()] Call
POP d4
RETURN; Func[void UpdateGhostZH2()] Body End
SETR d4,SP; Func[void UpdateGhostZHData2()] Body Start
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,1
ADDV d2,1
MODV d2,8
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
SETR d2,gd27; if() #9569 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9415; Test 'if'
SETR d2,gd27; if() #9569 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ORV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
GOTO 9425; if() #9569 Body End
SETR d2,gd27; if() #9569 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,-2
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2; if() #9569 Else End
SETR d2,gd27; if(true) #9571 [Opt:AlwaysOn]
PUSHR d2
POP d0
READPODARRAYV d2,3
PUSHR d2
ADDV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 3,d2
POP d2
SETR d2,gd27; if() #9572 Test
PUSHR d2
POP d0
READPODARRAYV d2,3
COMPAREV d2,8
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 9462; Test 'if'
SETV d2,0; if() #9572 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 3,d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,2
ADDV d2,1
MODV d2,4
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 2,d2; if() #9572 Body End
SETR d2,gd27; if(true) #9573 [Opt:AlwaysOn]
PUSHR d2
POP d0
READPODARRAYV d2,5
PUSHR d2
ADDV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 5,d2
POP d2
SETR d2,gd27; if() #9574 Test
PUSHR d2
POP d0
READPODARRAYV d2,5
COMPAREV d2,8
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 9499; Test 'if'
SETV d2,0; if() #9574 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 5,d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,4
ADDV d2,1
MODV d2,4
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 4,d2; if() #9574 Body End
RETURN; Func[void UpdateGhostZHData2()] Body End
SETR d4,SP; Func[bool __IsScriptNameChar(int, bool)] Body Start
LOADD d2,1; if() #10197 Test
COMPAREV d2,97
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 9513; Test 'if'
LOADD d2,1; if() #10198 Test AND if() #10197 Body Start
COMPAREV d2,122
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 9513; Test 'if'
SETV d2,1; return Start AND if() #10198 Body Start
GOTO 9549; return End AND if() #10198 Body End
LOADD d2,1; if() #10197 Body End AND if() #10199 Test
COMPAREV d2,65
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 9525; Test 'if'
LOADD d2,1; if() #10200 Test AND if() #10199 Body Start
COMPAREV d2,90
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 9525; Test 'if'
SETV d2,1; return Start AND if() #10200 Body Start
GOTO 9549; return End AND if() #10200 Body End
LOADD d2,1; if() #10199 Body End AND if() #10201 Test
COMPAREV d2,95
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9532; Test 'if'
SETV d2,1; return Start AND if() #10201 Body Start
GOTO 9549; return End AND if() #10201 Body End
LOADD d2,0; unless() #10202 Test
COMPAREV d2,0
GOTOFALSE 9547; Test 'unless'
LOADD d2,1; if() #10203 Test AND unless() #10202 Body Start
COMPAREV d2,48
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 9547; Test 'if'
LOADD d2,1; if() #10204 Test AND if() #10203 Body Start
COMPAREV d2,57
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 9547; Test 'if'
SETV d2,1; return Start AND if() #10204 Body Start
GOTO 9549; return End AND if() #10204 Body End
SETV d2,0; if() #10203 Body End AND unless() #10202 Body End AND return Start
GOTO 9549; return End
POPARGS d5,0.0002
RETURN; Func[bool __IsScriptNameChar(int, bool)] Body End
PUSHR d2; Func[void __CopyEWeapon(EWeapon, int, int, int)] Body Start
SETR d4,SP
LOADD d2,4; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNID; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Params End
CREATEEWEAPONR d2; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body Start
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body End
STORED d2,0
LOADD d2,4; if() #9689 Test
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9585; Test 'if'
LOADD d2,0; InlineFunc[void EWeapon->UseSprite(int)] Params Start AND if() #9689 Body Start
PUSHR d2
LOADD d2,4
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void EWeapon->UseSprite(int)] Params End
POP d3; InlineFunc[void EWeapon->UseSprite(int)] Body Start
SETR REFEWPN,d3
EWPNUSESPRITER d2; InlineFunc[void EWeapon->UseSprite(int)] Body End AND if() #9689 Body End
LOADD d2,4; if() #9690 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNEXTEND
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9721; Test 'if'
SETV d2,3; if() #9690 Body Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNEXTEND,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNTXSZ,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNTYSZ,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,16
SETV d2,16
PUSHR d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHXSZ,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
MULTV d2,16
SETV d2,16
PUSHR d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHYSZ,d2
LOADD d2,3
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,2
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
GOTO 9741; if() #9690 Body End
LOADD d2,3; if() #9690 Else Start
SUBV d2,8
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,2
SUBV d2,8
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2; if() #9690 Else End
LOADD d2,4
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNPOWER,d2
SETV d2,1
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNANGULAR,d2
LOADD d2,1
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
PUSHV 0.9792; UsrFunc[void SetEWeaponDir(EWeapon)] Return Addr
LOADD d2,0; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
GOTO 1813; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,8
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,10
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4; if() #9693 Test
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,15
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9880
LOADD d2,4
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,-1
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 9902; Test 'if'
PUSHR d4; if() #9693 Body Start
PUSHV 0.9889; UsrFunc[int __GetEWeaponThrowHeight(EWeapon)] Return Addr
LOADD d2,0; UsrFunc[int __GetEWeaponThrowHeight(EWeapon)] Params Start
PUSHR d2; UsrFunc[int __GetEWeaponThrowHeight(EWeapon)] Params End
GOTO 2358; UsrFunc[int __GetEWeaponThrowHeight(EWeapon)] Call
POP d4
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 9920; if() #9693 Body End
LOADD d2,4; if() #9693 Else Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #9693 Else End
LOADD d2,4
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,11
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,12
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,13
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,14
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,-257
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0; if() #9697 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,32
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 10033; Test 'if'
SETV d2,0; if() #9697 Body Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNCOLLDET,d2; if() #9697 Body End
LOADD d2,0; if() #9698 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 10051; Test 'if'
PUSHR d4; if() #9698 Body Start
PUSHV 1.0050; UsrFunc[void SetEWeaponRotation(EWeapon)] Return Addr
LOADD d2,0; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
GOTO 1945; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #9698 Body End
POPARGS d5,0.0005
RETURN; Func[void __CopyEWeapon(EWeapon, int, int, int)] Body End
PUSHR d2; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body Start
SETR d4,SP
SETV d2,0; for() #10608 setup
STORED d2,0
LOADD d2,0; for() #10608 LoopTest
PUSHR d2
LOADD d2,1
SUBV d2,1
POP d3
COMPARER d3,d2
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 10103; for() #10608 TestFail?
LOADD d2,6; InlineFunc[bool Screen->isSolid(int, int)] Params Start AND if() #10611 Test AND for() #10608 Body Start
PUSHR d2
LOADD d2,4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,0
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
GOTOTRUE 10099; Test 'if'
SETV d2,0; if() #10612 Test AND if() #10611 Body Start
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,4
COMPAREV d2,0
GOTOTRUE 10099; Test 'if'
SETV d2,1; return Start AND if() #10612 Body Start
GOTO 10105; return End AND if() #10612 Body End
LOADD d2,0; if() #10611 Body End AND for() #10608 Body End AND for() #10608 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 10057; for() #10608 End
SETV d2,0; return Start
GOTO 10105; return End
POPARGS d5,0.0007
RETURN; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body End


PUSHR d0; void run(int) Params
PUSHR REFITEMCLASS; void run(int) Body Start
SETR d4,SP
LOADD d2,1; if() #12267 Test
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 16; Test 'if'
SETV d2,-1; if() #12267 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2
GOTO 22; if() #12267 Body End
LOADD d2,1; if() #12267 Else Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2; if() #12267 Else End
POPARGS d5,0.0002
QUIT; void run(int) Body End


SETV gd9,0; void run() Body Start
SETV gd10,0
SETV gd12,0
SETV gd11,0
SETV gd5,0
SETV gd15,0
SETV gd6,0
SETV gd14,0
SETV gd13,0
SETV gd7,0
SETV gd8,0
SETV gd2,0
SETV gd3,0
SETV gd4,0
ALLOCATEGMEMV d2,25
SETR gd26,d2
SETV gd16,0
SETV gd17,0
SETV gd21,0
SETV gd18,0
SETV gd22,0
SETV gd19,0
SETV gd20,0
ALLOCATEGMEMV d2,32
SETR gd25,d2
SETV gd23,0
SETV gd24,0
ALLOCATEGMEMV d2,8
SETR gd27,d2
ALLOCATEGMEMV d2,1000
SETR gd28,d2
ALLOCATEGMEMV d2,4096
SETR gd1,d2
QUIT; void run() Body End

