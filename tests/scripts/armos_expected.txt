Compiling 'armos.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

PUSHR d0; void run(int) Params
PUSHR REFFFC; void run(int) Body Start
PUSHARGSV 0,0.0003
SETR d4,SP
STOREDV 0,2
STOREDV 0,1
STOREDV 0,0
PUSHR d4
LOADD d2,3; UsrFunc[NPC Ghost_InitAutoGhost(FFC, int)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[NPC Ghost_InitAutoGhost(FFC, int)] Params End
CALLFUNC 0.4171; UsrFunc[NPC Ghost_InitAutoGhost(FFC, int)] Call
POP d4
STORED d2,2
PUSHR d4
PUSHV 89; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3102; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK d4
PUSHV 3; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3102; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK d4
PUSHV 16384; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3102; UsrFunc[void Ghost_SetFlag(int)] Call
POP d4
LOADD d2,2; InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
PUSHR d4
LOADD d2,3; UsrFunc[void SpawnAnimation(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[void SpawnAnimation(FFC, NPC)] Params End
CALLFUNC 0.5668; UsrFunc[void SpawnAnimation(FFC, NPC)] Call
POP d4
LOADD d2,2
PUSHR d2
POP REFNPC
SETR d2,NPCSTEP
DIVV d2,100
STORED d2,1
LOADD d2,2
PUSHR d2
SETV d2,1
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
STORED d2,0
SETR d2,gd4; if() #951 Test AND while(true) #15 Body [Opt:AlwaysOn] Start
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 63
SETR d2,gd6
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 71; Test 'if'
SETV d2,1.5000; if() #951 Body Start
SETR gd6,d2
LOADD d2,0; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body AND if() #951 Body End
PUSHR d4
LOADD d2,1; UsrFunc[void Ghost_MoveTowardLink(int, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void Ghost_MoveTowardLink(int, int)] Params End
CALLFUNC 0.4338; UsrFunc[void Ghost_MoveTowardLink(int, int)] Call
PEEK d4
LOADD d2,3; UsrFunc[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
PUSHARGSV 1,0.0002; UsrFunc[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Params End
CALLFUNC 0.4405; UsrFunc[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Call
POP d4; while(true) #15 Body [Opt:AlwaysOn] End
GOTO 55; while() #15 End AND [Opt:NeverRet] AND void run(int) Body End
SETR d4,SP; Func[int Angle(int, int, int, int)] Body Start
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR d2
LOADD d2,3
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
SETR d3,d2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
POPARGS d5,0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
SETR d4,SP; Func[int AngleDir8(int)] Body Start
LOADD d2,0; if() #7 Test
COMPAREV d2,157.5000
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 113
LOADD d2,0
COMPAREV d2,112.5000
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 119; Test 'if'
SETV d2,6; return Start AND if() #7 Body Start
GOTO 204; return End AND if() #7 Body End
LOADD d2,0; if() #8 Test AND if() #7 Else Start
COMPAREV d2,112.5000
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 127
LOADD d2,0
COMPAREV d2,67.5000
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 133; Test 'if'
SETV d2,1; return Start AND if() #8 Body Start
GOTO 204; return End AND if() #8 Body End
LOADD d2,0; if() #9 Test AND if() #8 Else Start
COMPAREV d2,67.5000
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 141
LOADD d2,0
COMPAREV d2,22.5000
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 147; Test 'if'
SETV d2,7; return Start AND if() #9 Body Start
GOTO 204; return End AND if() #9 Body End
LOADD d2,0; if() #10 Test AND if() #9 Else Start
COMPAREV d2,22.5000
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 155
LOADD d2,0
COMPAREV d2,-22.5000
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 161; Test 'if'
SETV d2,3; return Start AND if() #10 Body Start
GOTO 204; return End AND if() #10 Body End
LOADD d2,0; if() #11 Test AND if() #10 Else Start
COMPAREV d2,-22.5000
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 169
LOADD d2,0
COMPAREV d2,-67.5000
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 175; Test 'if'
SETV d2,5; return Start AND if() #11 Body Start
GOTO 204; return End AND if() #11 Body End
LOADD d2,0; if() #12 Test AND if() #11 Else Start
COMPAREV d2,-67.5000
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 183
LOADD d2,0
COMPAREV d2,-112.5000
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 189; Test 'if'
SETV d2,0; return Start AND if() #12 Body Start
GOTO 204; return End AND if() #12 Body End
LOADD d2,0; if() #13 Test AND if() #12 Else Start
COMPAREV d2,-112.5000
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 197
LOADD d2,0
COMPAREV d2,-157.5000
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 203; Test 'if'
SETV d2,4; return Start AND if() #13 Body Start
GOTO 204; return End AND if() #13 Body End
SETV d2,2; return Start AND if() #13 Else Start
POP d5; return End AND if() #13 Else End AND if() #12 Else End AND if() #11 Else End AND if() #10 Else End AND if() #9 Else End AND if() #8 Else End AND if() #7 Else End
RETURNFUNC; Func[int AngleDir8(int)] Body End
SETR d4,SP; Func[int Clamp(int, int, int)] Body Start
LOADD d2,2; if() #20 Test
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 218; Test 'if'
LOADD d2,1; if() #20 Body Start
STORED d2,2
GOTO 228; if() #20 Body End
LOADD d2,2; if() #85 Test AND if() #20 Else Start
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 228; Test 'if'
LOADD d2,0; if() #85 Body Start
STORED d2,2; if() #85 Body End
LOADD d2,2; if() #20 Else End AND return Start
POPARGS d5,0.0003; return End
RETURNFUNC; Func[int Clamp(int, int, int)] Body End
SETR d4,SP; Func[bool ClockIsActive()] Body Start
SETR d2,gd27; return Start
PUSHR d2
POP d0
READPODARRAYV d2,6
COMPAREV d2,0
SETCMP d2,0.0011
RETURNFUNC; return End AND Func[bool ClockIsActive()] Body End
SETR d4,SP; Func[int ComboAt(int, int)] Body Start
PUSHR d4
LOADD d2,1; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR d2
PUSHV 255
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0264; UsrFunc[int VBound(int, int, int)] Call
POP d4
STORED d2,1
PUSHR d4
LOADD d2,0; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR d2
PUSHV 175
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0264; UsrFunc[int VBound(int, int, int)] Call
POP d4
STORED d2,0; return Start
ANDV d2,240
PUSHR d2
LOADD d2,1
RSHIFTV d2,4
POP d3
ADDR d2,d3
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int ComboAt(int, int)] Body End
SETR d4,SP; Func[int VBound(int, int, int)] Body Start
LOADD d2,2; if() #344 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 276; Test 'if'
LOADD d2,0; if() #344 Body Start
STORED d2,2
GOTO 286; if() #344 Body End
LOADD d2,2; if() #578 Test AND if() #344 Else Start
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 286; Test 'if'
LOADD d2,1; if() #578 Body Start
STORED d2,2; if() #578 Body End
LOADD d2,2; if() #344 Else End AND return Start
POPARGS d5,0.0003; return End
RETURNFUNC; Func[int VBound(int, int, int)] Body End
PUSHV 0; Func[bool IsWater(int)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
POP d0
SETR d2,COMBOTD
STORED d2,0; if() #371 Test
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 302; Test 'if'
SETV d2,1; return Start AND if() #371 Body Start
GOTO 331; return End AND if() #371 Body End
LOADD d2,0; if() #372 Test
COMPAREV d2,18
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 309; Test 'if'
SETV d2,1; return Start AND if() #372 Body Start
GOTO 331; return End AND if() #372 Body End
LOADD d2,0; if() #373 Test
COMPAREV d2,19
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 316; Test 'if'
SETV d2,1; return Start AND if() #373 Body Start
GOTO 331; return End AND if() #373 Body End
LOADD d2,0; if() #374 Test
COMPAREV d2,86
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 324
LOADD d2,0
COMPAREV d2,91
SETCMP d2,0.0014
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 330; Test 'if'
SETV d2,1; return Start AND if() #374 Body Start
GOTO 331; return End AND if() #374 Body End
SETV d2,0; return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[bool IsWater(int)] Body End
SETR d4,SP; Func[bool __IsPit(int)] Body Start
PUSHR d4; return Start
LOADD d2,0; UsrFunc[bool IsPit(int)] Params Start
PUSHR d2; UsrFunc[bool IsPit(int)] Params End
CALLFUNC 0.5616; UsrFunc[bool IsPit(int)] Call
POP d4
POP d5; return End
RETURNFUNC; Func[bool __IsPit(int)] Body End
SETR d4,SP; Func[bool Ghost_CanMove(int, int, int)] Body Start
PUSHR d4; return Start
LOADD d2,2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
SETR d2,gd4
COMPAREV d2,0
SETCMP d2,0.0009
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0357; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
POPARGS d5,0.0003; return End
RETURNFUNC; Func[bool Ghost_CanMove(int, int, int)] Body End
SETR d4,SP; Func[bool Ghost_CanMove(int, int, int, bool)] Body Start
LOADD d2,2; if() #241 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 365; Test 'if'
SETV d2,1; return Start AND if() #241 Body Start
GOTO 415; return End AND if() #241 Body End
LOADD d2,3; if() #242 Test
COMPAREV d2,4
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 373; Test 'if'
LOADD d2,2; if() #242 Body Start
MULTV d2,0.7071
STORED d2,2; if() #242 Body End
PUSHR d4
LOADD d2,3; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.0417; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,3
LOADD d2,2; while() #1 Test
COMPAREV d2,8
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 404; Test 'while'
PUSHR d4; unless() #243 Test AND while() #1 Body Start
LOADD d2,3; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
SUBV d2,8
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 0.0491; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 400; Test 'unless'
SETV d2,0; return Start AND unless() #243 Body Start
GOTO 415; return End AND unless() #243 Body End
LOADD d2,2
SUBV d2,8
STORED d2,2; while() #1 Body End
GOTO 379; while() #1 End
PUSHR d4; return Start
LOADD d2,3; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 0.0491; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP d4
POPARGS d5,0.0004; return End
RETURNFUNC; Func[bool Ghost_CanMove(int, int, int, bool)] Body End
SETR d4,SP; Func[int __NormalizeDir(int)] Body Start
LOADD d2,0; if() #698 Test
COMPAREV d2,0
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 426
LOADD d2,0
COMPAREV d2,7
SETCMP d2,0.0014
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 432; Test 'if'
LOADD d2,0; return Start AND if() #698 Body Start
GOTO 489; return End AND if() #698 Body End
LOADD d2,0; if() #699 Test
COMPAREV d2,8
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 439; Test 'if'
SETV d2,0; return Start AND if() #699 Body Start
GOTO 489; return End AND if() #699 Body End
LOADD d2,0; if() #700 Test
COMPAREV d2,9
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 446; Test 'if'
SETV d2,5; return Start AND if() #700 Body Start
GOTO 489; return End AND if() #700 Body End
LOADD d2,0; if() #701 Test
COMPAREV d2,10
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 453; Test 'if'
SETV d2,3; return Start AND if() #701 Body Start
GOTO 489; return End AND if() #701 Body End
LOADD d2,0; if() #702 Test
COMPAREV d2,11
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 460; Test 'if'
SETV d2,7; return Start AND if() #702 Body Start
GOTO 489; return End AND if() #702 Body End
LOADD d2,0; if() #703 Test
COMPAREV d2,12
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 467; Test 'if'
SETV d2,1; return Start AND if() #703 Body Start
GOTO 489; return End AND if() #703 Body End
LOADD d2,0; if() #704 Test
COMPAREV d2,13
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 474; Test 'if'
SETV d2,6; return Start AND if() #704 Body Start
GOTO 489; return End AND if() #704 Body End
LOADD d2,0; if() #705 Test
COMPAREV d2,14
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 481; Test 'if'
SETV d2,2; return Start AND if() #705 Body Start
GOTO 489; return End AND if() #705 Body End
LOADD d2,0; if() #706 Test
COMPAREV d2,15
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 488; Test 'if'
SETV d2,4; return Start AND if() #706 Body Start
GOTO 489; return End AND if() #706 Body End
SETV d2,0; return Start
POP d5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
PUSHARGSV 0,0.0006; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body Start
SETR d4,SP
STOREDV 0,5
STOREDV 0,4
STOREDV 0,3
STOREDV 0,2
STOREDV 0,1
LOADD d2,9; if() #359 Test
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 620; Test 'if'
SETR d2,gd14; if() #359 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
SETR d2,gd2
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,4
SETR d2,gd3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,3
DIVV d2,8
SUBV d2,1
STORED d2,1
SETV d2,1; for() #171 setup
STORED d2,5
LOADD d2,5; for() #171 LoopTest
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 578; for() #171 TestFail?
PUSHR d4; unless() #607 Test AND for() #171 Body Start
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,5
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1272; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 574; Test 'unless'
SETV d2,0; return Start AND unless() #607 Body Start
GOTO 1270; return End AND unless() #607 Body End
LOADD d2,5; for() #171 Body End AND for() #171 LoopIncrement
ADDV d2,1
STORED d2,5
GOTO 548; for() #171 End
PUSHR d4; unless() #608 Test
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,7
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1272; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 595; Test 'unless'
SETV d2,0; return Start AND unless() #608 Body Start
GOTO 1270; return End AND unless() #608 Body End
PUSHR d4; unless() #609 Test
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1272; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 618; Test 'unless'
SETV d2,0; return Start AND unless() #609 Body Start
GOTO 1270; return End AND unless() #609 Body End
SETV d2,1; return Start
GOTO 1270; return End AND if() #359 Body End
LOADD d2,9; if() #360 Test AND if() #359 Else Start
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 753; Test 'if'
SETR d2,gd14; if() #360 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
SETR d2,gd2
PUSHR d2
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
STORED d2,4
SETR d2,gd3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,3
DIVV d2,8
SUBV d2,1
STORED d2,1
SETV d2,1; for() #172 setup
STORED d2,5
LOADD d2,5; for() #172 LoopTest
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 711; for() #172 TestFail?
PUSHR d4; unless() #610 Test AND for() #172 Body Start
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,5
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1272; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 707; Test 'unless'
SETV d2,0; return Start AND unless() #610 Body Start
GOTO 1270; return End AND unless() #610 Body End
LOADD d2,5; for() #172 Body End AND for() #172 LoopIncrement
ADDV d2,1
STORED d2,5
GOTO 681; for() #172 End
PUSHR d4; unless() #611 Test
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,7
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1272; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 728; Test 'unless'
SETV d2,0; return Start AND unless() #611 Body Start
GOTO 1270; return End AND unless() #611 Body End
PUSHR d4; unless() #612 Test
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1272; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 751; Test 'unless'
SETV d2,0; return Start AND unless() #612 Body Start
GOTO 1270; return End AND unless() #612 Body End
SETV d2,1; return Start
GOTO 1270; return End AND if() #360 Body End
LOADD d2,9; if() #361 Test AND if() #360 Else Start
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 892; Test 'if'
PUSHR d4; if() #613 Test AND if() #361 Body Start
CALLFUNC 0.4386; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOTRUE 769
PUSHR d4
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 775; Test 'if'
SETV d2,0; return Start AND if() #613 Body Start
GOTO 1270; return End AND if() #613 Body End
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,4
SETR d2,gd2
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,3
DIVV d2,8
SUBV d2,1
STORED d2,1
SETV d2,1; for() #173 setup
STORED d2,5
LOADD d2,5; for() #173 LoopTest
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 850; for() #173 TestFail?
PUSHR d4; unless() #614 Test AND for() #173 Body Start
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,5
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1272; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 846; Test 'unless'
SETV d2,0; return Start AND unless() #614 Body Start
GOTO 1270; return End AND unless() #614 Body End
LOADD d2,5; for() #173 Body End AND for() #173 LoopIncrement
ADDV d2,1
STORED d2,5
GOTO 820; for() #173 End
PUSHR d4; unless() #615 Test
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,7
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1272; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 867; Test 'unless'
SETV d2,0; return Start AND unless() #615 Body Start
GOTO 1270; return End AND unless() #615 Body End
PUSHR d4; unless() #616 Test
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1272; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 890; Test 'unless'
SETV d2,0; return Start AND unless() #616 Body Start
GOTO 1270; return End AND unless() #616 Body End
SETV d2,1; return Start
GOTO 1270; return End AND if() #361 Body End
LOADD d2,9; if() #362 Test AND if() #361 Else Start
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1025; Test 'if'
SETR d2,gd13; if() #362 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
SETR d2,gd14
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
STORED d2,4
SETR d2,gd2
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,3
DIVV d2,8
SUBV d2,1
STORED d2,1
SETV d2,1; for() #174 setup
STORED d2,5
LOADD d2,5; for() #174 LoopTest
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 983; for() #174 TestFail?
PUSHR d4; unless() #617 Test AND for() #174 Body Start
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,5
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1272; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 979; Test 'unless'
SETV d2,0; return Start AND unless() #617 Body Start
GOTO 1270; return End AND unless() #617 Body End
LOADD d2,5; for() #174 Body End AND for() #174 LoopIncrement
ADDV d2,1
STORED d2,5
GOTO 953; for() #174 End
PUSHR d4; unless() #618 Test
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,7
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1272; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1000; Test 'unless'
SETV d2,0; return Start AND unless() #618 Body Start
GOTO 1270; return End AND unless() #618 Body End
PUSHR d4; unless() #619 Test
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1272; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1023; Test 'unless'
SETV d2,0; return Start AND unless() #619 Body Start
GOTO 1270; return End AND unless() #619 Body End
SETV d2,1; return Start
GOTO 1270; return End AND if() #362 Body End
LOADD d2,9; if() #363 Test AND if() #362 Else Start
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1086; Test 'if'
STOREDV 0,0; if() #363 Body Start
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0357; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd2,d2
LOADD d2,0; unless() #620 Test
COMPAREV d2,0
GOTOFALSE 1060; Test 'unless'
SETV d2,0; return Start AND unless() #620 Body Start
GOTO 1270; return End AND unless() #620 Body End
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0357; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd3,d2
LOADD d2,0; return Start
GOTO 1270; return End AND if() #363 Body End
LOADD d2,9; if() #364 Test AND if() #363 Else Start
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1147; Test 'if'
STOREDV 0,0; if() #364 Body Start
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0357; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
LOADD d2,0; unless() #621 Test
COMPAREV d2,0
GOTOFALSE 1121; Test 'unless'
SETV d2,0; return Start AND unless() #621 Body Start
GOTO 1270; return End AND unless() #621 Body End
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0357; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd3,d2
LOADD d2,0; return Start
GOTO 1270; return End AND if() #364 Body End
LOADD d2,9; if() #365 Test AND if() #364 Else Start
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1208; Test 'if'
STOREDV 0,0; if() #365 Body Start
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0357; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd2,d2
LOADD d2,0; unless() #622 Test
COMPAREV d2,0
GOTOFALSE 1182; Test 'unless'
SETV d2,0; return Start AND unless() #622 Body Start
GOTO 1270; return End AND unless() #622 Body End
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0357; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
LOADD d2,0; return Start
GOTO 1270; return End AND if() #365 Body End
LOADD d2,9; if() #366 Test AND if() #365 Else Start
COMPAREV d2,7
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1269; Test 'if'
STOREDV 0,0; if() #366 Body Start
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0357; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
LOADD d2,0; unless() #623 Test
COMPAREV d2,0
GOTOFALSE 1243; Test 'unless'
SETV d2,0; return Start AND unless() #623 Body Start
GOTO 1270; return End AND unless() #623 Body End
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0357; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
LOADD d2,0; return Start
GOTO 1270; return End AND if() #366 Body End
SETV d2,0; return Start AND if() #366 Else Start
POPARGS d5,0.0010; return End AND if() #366 Else End AND if() #365 Else End AND if() #364 Else End AND if() #363 Else End AND if() #362 Else End AND if() #361 Else End AND if() #360 Else End AND if() #359 Else End
RETURNFUNC; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body End
PUSHV 0; Func[bool Ghost_CanMovePixel(int, int, bool)] Body Start
SETR d4,SP
LOADD d2,3; if() #244 Test
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOFALSE 1283
LOADD d2,3
COMPAREV d2,255
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 1290
LOADD d2,2
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 1297
LOADD d2,2
COMPAREV d2,175
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1305; Test 'if'
PUSHR d4; return Start AND if() #244 Body Start
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1498; return End AND if() #244 Body End
PUSHR d4
LOADD d2,3; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0239; UsrFunc[int ComboAt(int, int)] Call
POP d4
STORED d2,0
PUSHR d4; unless() #245 Test
PUSHV 65537; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1410; Test 'unless'
LOADD d2,0; if() #246 Test AND unless() #245 Body Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,110
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1329; Test 'if'
SETV d2,0; return Start AND if() #246 Body Start
GOTO 1498; return End AND if() #246 Body End
LOADD d2,0; if() #247 Test
PUSHR d2
POP d0
SETR d2,COMBOFD
COMPAREV d2,96
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1339; Test 'if'
SETV d2,0; return Start AND if() #247 Body Start
GOTO 1498; return End AND if() #247 Body End
LOADD d2,0; if() #248 Test
PUSHR d2
POP d0
SETR d2,COMBOID
COMPAREV d2,96
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1349; Test 'if'
SETV d2,0; return Start AND if() #248 Body Start
GOTO 1498; return End AND if() #248 Body End
PUSHR d4; if() #80 Test
PUSHV 65536; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1366; Test 'if'
LOADD d2,0; if() #249 Test AND if() #80 Body Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,44
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1365; Test 'if'
SETV d2,0; return Start AND if() #249 Body Start
GOTO 1498; return End AND if() #249 Body End
GOTO 1410; if() #80 Body End
LOADD d2,1; if() #81 Test AND if() #80 Else Start
COMPAREV d2,0
GOTOTRUE 1380; Test 'if'
LOADD d2,0; if() #250 Test AND if() #81 Body Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,54
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1379; Test 'if'
SETV d2,0; return Start AND if() #250 Body Start
GOTO 1498; return End AND if() #250 Body End
GOTO 1410; if() #81 Body End
LOADD d2,0; if() #251 Test AND if() #81 Else Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,128
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1390; Test 'if'
SETV d2,0; return Start AND if() #251 Body Start
GOTO 1498; return End AND if() #251 Body End
LOADD d2,0; if() #252 Test
PUSHR d2
POP d0
SETR d2,COMBOFD
COMPAREV d2,97
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1400; Test 'if'
SETV d2,0; return Start AND if() #252 Body Start
GOTO 1498; return End AND if() #252 Body End
LOADD d2,0; if() #253 Test
PUSHR d2
POP d0
SETR d2,COMBOID
COMPAREV d2,97
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1410; Test 'if'
SETV d2,0; return Start AND if() #253 Body Start
GOTO 1498; return End AND if() #253 Body End
PUSHR d4; if() #81 Else End AND if() #80 Else End AND unless() #245 Body End AND if() #254 Test
PUSHV 65539; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1422; Test 'if'
PUSHR d4; return Start AND if() #254 Body Start
LOADD d2,0; UsrFunc[bool IsWater(int)] Params Start
PUSHR d2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 0.0289; UsrFunc[bool IsWater(int)] Call
POP d4
GOTO 1498; return End AND if() #254 Body End
PUSHR d4; if() #255 Test
PUSHV 65538; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1444; Test 'if'
PUSHR d4; return Start AND if() #255 Body Start
LOADD d2,0; UsrFunc[bool IsWater(int)] Params Start
PUSHR d2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 0.0289; UsrFunc[bool IsWater(int)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1442
LOADD d2,0
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,58
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
GOTO 1498; return End AND if() #255 Body End
PUSHR d4; if() #256 Test
LOADD d2,0; UsrFunc[bool IsWater(int)] Params Start
PUSHR d2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 0.0289; UsrFunc[bool IsWater(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1456; Test 'if'
PUSHR d4; return Start AND if() #256 Body Start
PUSHV 2048; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1498; return End AND if() #256 Body End
PUSHR d4; if() #257 Test
LOADD d2,0; UsrFunc[bool __IsPit(int)] Params Start
PUSHR d2; UsrFunc[bool __IsPit(int)] Params End
CALLFUNC 0.0333; UsrFunc[bool __IsPit(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1468; Test 'if'
PUSHR d4; return Start AND if() #257 Body Start
PUSHV 4096; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1498; return End AND if() #257 Body End
PUSHR d4; if() #82 Test
PUSHV 1024; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1476; Test 'if'
SETV d2,1; return Start AND if() #82 Body Start
GOTO 1498; return End AND if() #82 Body End
PUSHR d4; if() #83 Test AND if() #82 Else Start
PUSHV 32768; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1490; Test 'if'
PUSHR d4; return Start AND if() #83 Body Start
LOADD d2,3; UsrFunc[bool __FullTileWalkable(int, int)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[bool __FullTileWalkable(int, int)] Params End
CALLFUNC 0.1531; UsrFunc[bool __FullTileWalkable(int, int)] Call
POP d4
GOTO 1498; return End AND if() #83 Body End
LOADD d2,3; InlineFunc[bool Screen->isSolid(int, int)] Params Start AND return Start AND if() #83 Else Start
PUSHR d2
LOADD d2,2
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
SETCMP d2,0.0012
POPARGS d5,0.0004; return End AND if() #83 Else End AND if() #82 Else End
RETURNFUNC; Func[bool Ghost_CanMovePixel(int, int, bool)] Body End
SETR d4,SP; Func[bool Ghost_FlagIsSet(int)] Body Start
LOADD d2,0; if() #116 Test
ANDV d2,65536
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1519; Test 'if'
SETR d2,gd17; return Start AND if() #116 Body Start
PUSHR d2
LOADD d2,0
ANDV d2,65535
SETV d3,1
LSHIFTR d3,d2
SETR d2,d3
POP d3
ANDR d2,d3
COMPAREV d2,0
SETCMP d2,0.0011
GOTO 1529; return End AND if() #116 Body End
SETR d2,gd16; return Start AND if() #116 Else Start
PUSHR d2
LOADD d2,0
POP d3
ANDR d2,d3
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,0.0012
POP d5; return End AND if() #116 Else End
RETURNFUNC; Func[bool Ghost_FlagIsSet(int)] Body End
SETR d4,SP; Func[bool __FullTileWalkable(int, int)] Body Start
LOADD d2,1; if() #597 Test
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOFALSE 1541
LOADD d2,0
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 1548
LOADD d2,1
COMPAREV d2,256
SETCMP d2,0.0013
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 1555
LOADD d2,0
COMPAREV d2,176
SETCMP d2,0.0013
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1563; Test 'if'
PUSHR d4; return Start AND if() #597 Body Start
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1624; return End AND if() #597 Body End
LOADD d2,1
PUSHR d2
LOADD d2,1
MODV d2,16
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,1
LOADD d2,0
PUSHR d2
LOADD d2,0
MODV d2,16
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,0
LOADD d2,1; InlineFunc[bool Screen->isSolid(int, int)] Params Start AND if() #598 Test
PUSHR d2
LOADD d2,0
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
GOTOFALSE 1595
LOADD d2,1; InlineFunc[bool Screen->isSolid(int, int)] Params Start
ADDV d2,8
PUSHR d2
LOADD d2,0
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 1606
LOADD d2,1; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,0
ADDV d2,8
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 1618
LOADD d2,1; InlineFunc[bool Screen->isSolid(int, int)] Params Start
ADDV d2,8
PUSHR d2
LOADD d2,0
ADDV d2,8
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1623; Test 'if'
SETV d2,0; return Start AND if() #598 Body Start
GOTO 1624; return End AND if() #598 Body End
SETV d2,1; return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[bool __FullTileWalkable(int, int)] Body End
PUSHARGSV 0,0.0004; Func[bool Ghost_CheckFreeze(FFC, NPC)] Body Start
SETR d4,SP
PUSHR d4; if() #258 Test
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1637
PUSHR d4
CALLFUNC 0.0231; UsrFunc[bool ClockIsActive()] Call
POP d4
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOFALSE 1656
PUSHR d4
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1653
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCSTUN
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1888; Test 'if'
LOADD d2,5; if() #258 Body Start
PUSHR d2
POP REFFFC
SETR d2,XD
STORED d2,3
LOADD d2,5
PUSHR d2
POP REFFFC
SETR d2,YD
STORED d2,2
LOADD d2,5
PUSHR d2
POP REFFFC
SETR d2,XD2
STORED d2,1
LOADD d2,5
PUSHR d2
POP REFFFC
SETR d2,YD2
STORED d2,0
SETV d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
SETV d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
SETV d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
SETV d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2
SETR d2,gd18
ORV d2,2
SETR gd18,d2
PUSHR d4; while() #2 Test
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1727
PUSHR d4
CALLFUNC 0.0231; UsrFunc[bool ClockIsActive()] Call
POP d4
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOFALSE 1746
PUSHR d4
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1743
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCSTUN
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1852; Test 'while'
PUSHR d4; while() #2 Body Start
LOADD d2,5; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params End
CALLFUNC 0.1891; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Call
PEEK d4
LOADD d2,4; UsrFunc[void __Ghost_DrawShadow(NPC)] Params Start
PUSHR d2; UsrFunc[void __Ghost_DrawShadow(NPC)] Params End
CALLFUNC 0.1974; UsrFunc[void __Ghost_DrawShadow(NPC)] Call
PEEK d4
LOADD d2,5; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
CALLFUNC 0.2147; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
LOADD d2,4; InlineFunc[bool NPC->isValid()] Params AND unless() #84 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOFALSE 1773; Test 'unless'
SETV d2,0; return Start AND unless() #84 Body Start
GOTO 1889; return End
GOTO 1783; unless() #84 Body End
LOADD d2,4; if() #259 Test AND unless() #84 Else Start
PUSHR d2
POP REFNPC
SETR d2,NPCHP
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 1783; Test 'if'
SETV d2,0; return Start AND if() #259 Body Start
GOTO 1889; return End AND if() #259 Body End
PUSHR d4; unless() #84 Else End
LOADD d2,5; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2546; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1812; Test 'if'
SETR d2,gd11; if() #85 Body Start
PUSHR d2
PUSHR d4
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0417; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
GOTO 1844; if() #85 Body End
PUSHR d4; if() #86 Test AND if() #85 Else Start
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1835; Test 'if'
SETR d2,gd11; if() #86 Body Start
PUSHR d2
PUSHR d4
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0417; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
GOTO 1844; if() #86 Body End
SETR d2,gd11; if() #86 Else Start
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #86 Else End
PUSHR d4; if() #85 Else End
LOADD d2,5; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params End
CALLFUNC 0.2679; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Call
POP d4; while() #2 Body End
GOTO 1718; while() #2 End
LOADD d2,3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
LOADD d2,2
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
LOADD d2,1
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
LOADD d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2; if() #258 Body End
SETV d2,1; return Start
POPARGS d5,0.0006; return End
RETURNFUNC; Func[bool Ghost_CheckFreeze(FFC, NPC)] Body End
PUSHV 0; Func[void __Ghost_UpdateFlashing(FFC, NPC)] Body Start
SETR d4,SP
STOREDV 0,0
SETR d2,gd21; if() #664 Test
COMPAREV d2,1
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 1909; Test 'if'
SETR d2,gd21; if() #664 Body Start
SUBV d2,1
SETR gd21,d2
SETR d2,gd21; if() #665 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1909; Test 'if'
SETV d2,1; if() #665 Body Start
STORED d2,0; if() #665 Body End
SETR d2,gd18; if() #664 Body End AND if() #666 Test
ANDV d2,8
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1972; Test 'if'
SETR d2,gd21; if() #395 Test AND if() #666 Body Start
COMPAREV d2,0
SETCMP d2,0.0009
CASTBOOLI d2
COMPAREV d2,0
GOTOTRUE 1936; Test 'if'
SETR d2,gd27; if() #395 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,1
RSHIFTV d2,1
SUBV2 9,d2
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
GOTO 1972; if() #395 Body End
LOADD d2,1; if() #396 Test AND if() #395 Else Start
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,64
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1960; Test 'if'
SETR d2,gd27; if() #396 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,1
ANDV d2,3
ADDV d2,6
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
GOTO 1972; if() #396 Body End
LOADD d2,0; if() #667 Test AND if() #396 Else Start
COMPAREV d2,0
GOTOTRUE 1972; Test 'if'
SETR d2,gd12; if() #667 Body Start
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2; if() #667 Body End
POPARGS d5,0.0003; if() #396 Else End AND if() #395 Else End AND if() #666 Body End
RETURNFUNC; Func[void __Ghost_UpdateFlashing(FFC, NPC)] Body End
PUSHARGSV 0,0.0004; Func[void __Ghost_DrawShadow(NPC)] Body Start
SETR d4,SP
SETR d2,gd4; if() #624 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1982; Test 'if'
GOTO 2145; return (Void) AND if() #624 Body
PUSHR d4; unless() #625 Test
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
CASTBOOLI d2
COMPAREV d2,0
GOTOFALSE 1996
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCEXTEND
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 2006
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCTYPE
COMPAREV d2,40
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 2010; Test 'unless'
GOTO 2145; return (Void) AND unless() #625 Body
STOREDV 0,3
STOREDV 0,2
STOREDV 0,1
STOREDV 0,0
SETR d2,gd13; if() #367 Test
COMPAREV d2,3
SETCMP d2,0.0010
COMPAREV d2,0
GOTOFALSE 2023
SETR d2,gd14
COMPAREV d2,3
SETCMP d2,0.0010
COMPAREV d2,0
SETCMP d2,0.0003
CASTBOOLI d2
COMPAREV d2,0
GOTOTRUE 2073; Test 'if'
SETR d2,gd2; if() #367 Body Start
PUSHR d2
SETR d2,gd13
SUBV d2,1
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd13
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
SETR d2,gd14
SUBV d2,1
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,2
SETV d2,1
STORED d2,0
PUSHR d4; if() #368 Test
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 2066; Test 'if'
SETV d2,27400; if() #368 Body Start
STORED d2,1
GOTO 2072; if() #368 Body End
SETR d2,gd27; if() #368 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,2
ADDV d2,27400
STORED d2,1; if() #368 Else End
GOTO 2127; if() #367 Body End
SETR d2,gd2; if() #367 Else Start
PUSHR d2
SETR d2,gd13
SUBV d2,2
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd13
SUBV d2,2
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
SETR d2,gd14
SUBV d2,2
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
SUBV d2,2
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,2
SETV d2,2
STORED d2,0
PUSHR d4; if() #369 Test
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 2112; Test 'if'
SETV d2,27392; if() #369 Body Start
STORED d2,1
GOTO 2127; if() #369 Body End
SETR d2,gd27; if() #369 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,4
MULTV d2,2
SETV d2,2
PUSHR d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,4
POP d3
MULTR d2,d3
ADDV d2,27392
STORED d2,1; if() #369 Else End
PUSHV 1; if() #367 Else End AND InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #370 [Opt:AlwaysOn]
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 7
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0004
PUSHV 1
PUSHV 64; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS d5,0.0005
RETURNFUNC; Func[void __Ghost_DrawShadow(NPC)] Body End
PUSHARGSV 0,0.0004; Func[void Ghost_WaitframeLight(FFC, NPC)] Body Start
SETR d4,SP
ALLOCATEMEMV d2,24
STORED d2,2
SETR d0,d2
PUSHR d0
SETR d2,gd2
POP d0
WRITEPODARRAYVR 0,d2
PUSHR d0
SETR d2,gd3
POP d0
WRITEPODARRAYVR 1,d2
PUSHR d0
SETR d2,gd4
POP d0
WRITEPODARRAYVR 2,d2
PUSHR d0
SETR d2,gd6
POP d0
WRITEPODARRAYVR 3,d2
PUSHR d0
SETR d2,gd7
POP d0
WRITEPODARRAYVR 4,d2
PUSHR d0
SETR d2,gd8
POP d0
WRITEPODARRAYVR 5,d2
PUSHR d0
SETR d2,gd9
POP d0
WRITEPODARRAYVR 6,d2
PUSHR d0
SETR d2,gd10
POP d0
WRITEPODARRAYVR 7,d2
PUSHR d0
SETR d2,gd19
POP d0
WRITEPODARRAYVR 8,d2
PUSHR d0
SETR d2,gd20
POP d0
WRITEPODARRAYVR 9,d2
PUSHR d0
SETR d2,gd12
POP d0
WRITEPODARRAYVR 10,d2
PUSHR d0
SETR d2,gd5
POP d0
WRITEPODARRAYVR 11,d2
PUSHR d0
SETR d2,gd11
POP d0
WRITEPODARRAYVR 12,d2
PUSHR d0
SETR d2,gd13
POP d0
WRITEPODARRAYVR 13,d2
PUSHR d0
SETR d2,gd14
POP d0
WRITEPODARRAYVR 14,d2
PUSHR d0
SETR d2,gd16
POP d0
WRITEPODARRAYVR 15,d2
PUSHR d0
SETR d2,gd17
POP d0
WRITEPODARRAYVR 16,d2
PUSHR d0
SETR d2,gd18
POP d0
WRITEPODARRAYVR 17,d2
PUSHR d0
SETR d2,gd21
POP d0
WRITEPODARRAYVR 18,d2
PUSHR d0
SETR d2,gd22
POP d0
WRITEPODARRAYVR 19,d2
PUSHR d0
SETR d2,gd15
POP d0
WRITEPODARRAYVR 20,d2
PUSHR d0
SETR d2,gd23
POP d0
WRITEPODARRAYVR 21,d2
PUSHR d0
SETR d2,gd24
POP d0
WRITEPODARRAYVR 22,d2
ALLOCATEMEMV d2,21
STORED d2,1
SETR d2,gd26; if() #355 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 2277; Test 'if'
STOREDV 0,0; for() #67 setup AND if() #355 Body Start
LOADD d2,0; for() #67 LoopTest
COMPAREV d2,21
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 2277; for() #67 TestFail?
SETR d2,gd26; for() #67 Body Start
PUSHR d2
LOADD d2,0
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2; for() #67 Body End
LOADD d2,0; for() #67 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 2255; for() #67 End
LOADD d2,4; if() #355 Body End AND InlineFunc[bool NPC->isValid()] Params AND if() #356 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOTRUE 2294; Test 'if'
LOADD d2,2; if() #356 Body Start
ORV d2,65536
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2; if() #356 Body End
LOADD d2,4; InlineFunc[bool NPC->isValid()] Params AND if() #165 Test AND do-while() #2 Body Start
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOTRUE 2356; Test 'if'
SETR d2,gd26; if() #167 Test AND if(true) #166 [Opt:AlwaysOn] AND if() #165 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 2331; Test 'if'
ALLOCATEMEMV d2,34; if() #167 Body Start
STORED d2,0
PUSHR d4
LOADD d2,5; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params End
CALLFUNC 0.5313; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Call
POP d4
LOADD d2,0
PUSHR d2
LOADD d2,2
SETR d0,d2
POP d2
WRITEPODARRAYVR 23,d2
PUSHR d4
LOADD d2,5; UsrFunc[void __HideFFCAndWait(FFC)] Params Start
PUSHR d2; UsrFunc[void __HideFFCAndWait(FFC)] Params End
CALLFUNC 0.5588; UsrFunc[void __HideFFCAndWait(FFC)] Call
POP d4
LOADD d3,0
DEALLOCATEMEMR d3
GOTO 2355; if() #167 Body End
ALLOCATEMEMV d2,10; if() #167 Else Start
STORED d2,0
PUSHR d4
LOADD d2,5; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params End
CALLFUNC 0.5313; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Call
POP d4
LOADD d2,0
PUSHR d2
LOADD d2,2
SETR d0,d2
POP d2
WRITEPODARRAYVR 23,d2
PUSHR d4
LOADD d2,5; UsrFunc[void __HideFFCAndWait(FFC)] Params Start
PUSHR d2; UsrFunc[void __HideFFCAndWait(FFC)] Params End
CALLFUNC 0.5588; UsrFunc[void __HideFFCAndWait(FFC)] Call
POP d4
LOADD d3,0
DEALLOCATEMEMR d3; if() #167 Else End
GOTO 2361; if() #165 Body End
PUSHR d4; if() #165 Else Start
LOADD d2,5; UsrFunc[void __HideFFCAndWait(FFC)] Params Start
PUSHR d2; UsrFunc[void __HideFFCAndWait(FFC)] Params End
CALLFUNC 0.5588; UsrFunc[void __HideFFCAndWait(FFC)] Call
POP d4; if() #165 Else End
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,0
SETR gd2,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,1
SETR gd3,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,2
SETR gd4,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,3
SETR gd6,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,4
SETR gd7,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,5
SETR gd8,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,6
SETR gd9,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,7
SETR gd10,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,8
SETR gd19,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,9
SETR gd20,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,10
SETR gd12,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,11
SETR gd5,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,12
SETR gd11,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,13
SETR gd13,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,14
SETR gd14,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,15
SETR gd16,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,16
SETR gd17,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,17
SETR gd18,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,18
SETR gd21,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,19
SETR gd22,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,20
SETR gd15,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,21
SETR gd23,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,22
SETR gd24,d2
LOADD d2,1; if() #168 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 2508; Test 'if'
STOREDV 0,0; for() #68 setup AND if() #168 Body Start
LOADD d2,0; for() #68 LoopTest
COMPAREV d2,21
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 2507; for() #68 TestFail?
LOADD d2,1; for() #68 Body Start
PUSHR d2
LOADD d2,0
POP d0
READPODARRAYR d2,d2
PUSHR d2
SETR d2,gd26
PUSHR d2
LOADD d2,0
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2; for() #68 Body End
LOADD d2,0; for() #68 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 2485; for() #68 End
GOTO 2514; if() #168 Body End
SETV d2,0; if() #168 Else Start
PUSHR d2
SETR d2,gd26
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2; if() #168 Else End
SETR d2,gd27; do-while() #2 Body End AND do-while() #2 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 2524; Test 'while'
GOTO 2294
LOADD d2,4; InlineFunc[bool NPC->isValid()] Params AND if() #357 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOTRUE 2540; Test 'if'
SETV d2,65536; if() #357 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2; if() #357 Body End
LOADD d3,1
DEALLOCATEMEMR d3
LOADD d3,2
DEALLOCATEMEMR d3
POPARGS d5,0.0006
RETURNFUNC; Func[void Ghost_WaitframeLight(FFC, NPC)] Body End
SETR d4,SP; Func[void Ghost_SetPosition(FFC, NPC)] Body Start
LOADD d2,0; InlineFunc[bool NPC->isValid()] Params AND unless() #324 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOFALSE 2552; Test 'unless'
GOTO 2677; return (Void) AND unless() #324 Body
PUSHR d4; if() #159 Test
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
SETCMP d2,0.0012
CASTBOOLI d2
COMPAREV d2,0
GOTOTRUE 2589; Test 'if'
SETR d2,gd2; if() #159 Body Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETR d2,gd3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETR d2,gd4
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2
GOTO 2621; if() #159 Body End
SETR d2,gd2; if() #159 Else Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETR d2,gd3
PUSHR d2
SETR d2,gd4
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2; if() #159 Else End
PUSHR d4
SETR d2,gd2; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFNPC
SETR d2,NPCXOFS
POP d3
ADDR d2,d3
PUSHR d2
PUSHV -64
PUSHV 256; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0206; UsrFunc[int Clamp(int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
PUSHR d4
SETR d2,gd3; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR d2
SETR d2,gd4
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFNPC
SETR d2,NPCYOFS
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFNPC
SETR d2,NPCZOFS
POP d3
SUBR d3,d2
PUSHR d3
PUSHV -64
PUSHV 176; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0206; UsrFunc[int Clamp(int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void Ghost_SetPosition(FFC, NPC)] Body End
PUSHARGSV 0,0.0005; Func[void Ghost_CheckHit(FFC, NPC)] Body Start
SETR d4,SP
LOADD d2,5; if() #260 Test
PUSHR d2
POP REFNPC
SETR d2,NPCHP
PUSHR d2
SETR d2,gd15
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 2866; Test 'if'
SETR d2,gd18; if() #260 Body Start
ORV d2,1
SETR gd18,d2
LOADD d2,5
PUSHR d2
POP REFNPC
SETR d2,NPCHP
SETR gd15,d2
SETR d2,gd21; if() #261 Test
COMPAREV d2,32
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 2707; Test 'if'
SETV d2,32; if() #261 Body Start
SETR gd21,d2; if() #261 Body End
PUSHR d4; if() #262 Test
PUSHV 1; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 2866; Test 'if'
SETR d2,LINKX; if() #262 Body Start
PUSHR d2
SETR d2,gd2
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,4
SETR d2,LINKY
PUSHR d2
SETR d2,gd3
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
LOADD d2,4; InlineFunc[int Abs(int)] Params AND if() #87 Test
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
SETR d2,gd13
ADDV d2,1
MULTV d2,16
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 2747
LOADD d2,3; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
SETR d2,gd14
ADDV d2,1
MULTV d2,16
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 2781; Test 'if'
SETR d2,LINKDIR; if() #263 Test AND if() #87 Body Start
ANDV d2,2
PUSHR d2
SETR d2,gd5
ANDV d2,2
POP d3
COMPARER d3,d2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 2765
SETR d2,gd5
COMPAREV d2,3
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 2773
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 2780; Test 'if'
SETR d2,LINKDIR; if() #263 Body Start
LSHIFTV d2,12
ORV d2,16
SETR gd22,d2; if() #263 Body End
GOTO 2866; if() #87 Body End
LOADD d2,4; InlineFunc[int Abs(int)] Params AND if() #88 Test AND if() #87 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOADD d2,3; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 2829; Test 'if'
SETR d2,gd5; if() #264 Test AND if() #88 Body Start
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 2800
SETR d2,gd5
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 2807
SETR d2,gd5
COMPAREV d2,3
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 2815
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 2828; Test 'if'
LOADD d2,3; if() #89 Test AND if() #264 Body Start
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 2826; Test 'if'
SETV d2,16; if() #89 Body Start
SETR gd22,d2
GOTO 2828; if() #89 Body End
SETV d2,4112; if() #89 Else Start
SETR gd22,d2; if() #89 Else End
GOTO 2866; if() #264 Body End AND if() #88 Body End
SETR d2,gd5; if() #265 Test AND if() #88 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 2838
SETR d2,gd5
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 2845
SETR d2,gd5
COMPAREV d2,3
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 2853
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 2866; Test 'if'
LOADD d2,4; if() #90 Test AND if() #265 Body Start
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 2864; Test 'if'
SETV d2,8208; if() #90 Body Start
SETR gd22,d2
GOTO 2866; if() #90 Body End
SETV d2,12304; if() #90 Else Start
SETR gd22,d2; if() #90 Else End
SETR d2,gd22; if() #265 Body End AND if() #88 Else End AND if() #87 Else End AND if() #262 Body End AND if() #260 Body End AND if() #266 Test
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3092; Test 'if'
SETR d2,gd22; if() #266 Body Start
RSHIFTV d2,12
STORED d2,4
SETR d2,gd22
ANDV d2,4095
STORED d2,3
STOREDV 4,2
PUSHR d4; if() #267 Test
PUSHV 5; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 2887; Test 'if'
LOADD d2,2; if() #267 Body Start
DIVV d2,2
STORED d2,2; if() #267 Body End
PUSHR d4; if() #91 Test
LOADD d2,4; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0341; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 2994; Test 'if'
STOREDV 0,1; if() #91 Body Start
STOREDV 0,0
LOADD d2,3
SUBV d2,1
STORED d2,3; if() #92 Test
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 2914; Test 'if'
LOADD d2,4; if() #92 Body Start
LSHIFTV d2,12
PUSHR d2
LOADD d2,3
POP d3
ORR d2,d3
SETR gd22,d2
GOTO 2916; if() #92 Body End
SETV d2,0; if() #92 Else Start
SETR gd22,d2; if() #92 Else End
LOADD d2,4; if() #93 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2925; Test 'if'
LOADD d2,2; if() #93 Body Start
SUBV2 0,d2
STORED d2,0
GOTO 2944; if() #93 Body End
LOADD d2,4; if() #94 Test AND if() #93 Else Start
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2933; Test 'if'
LOADD d2,2; if() #94 Body Start
STORED d2,0
GOTO 2944; if() #94 Body End
LOADD d2,4; if() #95 Test AND if() #94 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2942; Test 'if'
LOADD d2,2; if() #95 Body Start
SUBV2 0,d2
STORED d2,1
GOTO 2944; if() #95 Body End
LOADD d2,2; if() #95 Else Start
STORED d2,1; if() #95 Else End
LOADD d2,1; if() #94 Else End AND if() #93 Else End AND if() #96 Test
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 2969; Test 'if'
SETR d2,gd2; if() #96 Body Start
PUSHR d2
LOADD d2,1
POP d3
ADDR d2,d3
SETR gd2,d2
SETR d2,gd19
PUSHR d2
LOADD d2,1
POP d3
ADDR d2,d3
SETR gd19,d2
PUSHR d4
LOADD d2,6; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2546; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
GOTO 2993; if() #96 Body End
LOADD d2,0; if() #268 Test AND if() #96 Else Start
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 2993; Test 'if'
SETR d2,gd3; if() #268 Body Start
PUSHR d2
LOADD d2,0
POP d3
ADDR d2,d3
SETR gd3,d2
SETR d2,gd20
PUSHR d2
LOADD d2,0
POP d3
ADDR d2,d3
SETR gd20,d2
PUSHR d4
LOADD d2,6; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2546; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4; if() #268 Body End
GOTO 3092; if() #96 Else End AND if() #91 Body End
STOREDV -1,1; if() #91 Else Start
STOREDV -1,0
SETV d2,0
SETR gd22,d2
SETR d2,gd18
ORV d2,16
SETR gd18,d2
LOADD d2,4; if() #97 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3012; Test 'if'
SETR d2,gd3; InlineFunc[untyped Floor(untyped)] Params Start AND if() #97 Body Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
MULTV d2,8
STORED d2,0
GOTO 3041; if() #97 Body End
LOADD d2,4; if() #98 Test AND if() #97 Else Start
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3024; Test 'if'
SETR d2,gd3; InlineFunc[untyped Ceiling(untyped)] Params Start AND if() #98 Body Start
LSHIFTV d2,0
DIVV d2,8; InlineFunc[untyped Ceiling(untyped)] Params End
CEILING d2; InlineFunc[untyped Ceiling(untyped)] Body
MULTV d2,8
STORED d2,0
GOTO 3041; if() #98 Body End
LOADD d2,4; if() #99 Test AND if() #98 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3035; Test 'if'
SETR d2,gd2; InlineFunc[untyped Floor(untyped)] Params Start AND if() #99 Body Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
MULTV d2,8
STORED d2,1
GOTO 3041; if() #99 Body End
SETR d2,gd2; InlineFunc[untyped Ceiling(untyped)] Params Start AND if() #99 Else Start
LSHIFTV d2,0
DIVV d2,8; InlineFunc[untyped Ceiling(untyped)] Params End
CEILING d2; InlineFunc[untyped Ceiling(untyped)] Body
MULTV d2,8
STORED d2,1; if() #99 Else End
LOADD d2,1; if() #98 Else End AND if() #97 Else End AND if() #100 Test
COMPAREV d2,-1
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3067; Test 'if'
SETR d2,gd19; if() #100 Body Start
PUSHR d2
LOADD d2,1
PUSHR d2
SETR d2,gd2
POP d3
SUBR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
SETR gd19,d2
LOADD d2,1
SETR gd2,d2
PUSHR d4
LOADD d2,6; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2546; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
GOTO 3092; if() #100 Body End
LOADD d2,0; if() #269 Test AND if() #100 Else Start
COMPAREV d2,-1
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3092; Test 'if'
SETR d2,gd20; if() #269 Body Start
PUSHR d2
LOADD d2,0
PUSHR d2
SETR d2,gd3
POP d3
SUBR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
SETR gd20,d2
LOADD d2,0
SETR gd3,d2
PUSHR d4
LOADD d2,6; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2546; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4; if() #269 Body End
POPARGS d5,0.0007; if() #100 Else End AND if() #91 Else End AND if() #266 Body End
RETURNFUNC; Func[void Ghost_CheckHit(FFC, NPC)] Body End
SETR d4,SP; Func[void Ghost_ClearCombos()] Body Start
SETV d2,0
PUSHR d2
SETR d2,gd26
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
RETURNFUNC; Func[void Ghost_ClearCombos()] Body End
SETR d4,SP; Func[void Ghost_SetFlag(int)] Body Start
LOADD d2,0; if() #158 Test
ANDV d2,65536
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3120; Test 'if'
SETR d2,gd17; if() #158 Body Start
PUSHR d2
LOADD d2,0
ANDV d2,65535
SETV d3,1
LSHIFTR d3,d2
SETR d2,d3
POP d3
ORR d2,d3
SETR gd17,d2
GOTO 3126; if() #158 Body End
SETR d2,gd16; if() #158 Else Start
PUSHR d2
LOADD d2,0
POP d3
ORR d2,d3
SETR gd16,d2; if() #158 Else End
POP d5
RETURNFUNC; Func[void Ghost_SetFlag(int)] Body End
SETR d4,SP; Func[void Ghost_UnsetFlag(int)] Body Start
LOADD d2,0; if() #160 Test
ANDV d2,65536
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3146; Test 'if'
SETR d2,gd17; if() #160 Body Start
PUSHR d2
LOADD d2,0
ANDV d2,65535
SETV d3,-2
LSHIFTR d3,d2
SETR d2,d3
POP d3
ANDR d2,d3
SETR gd17,d2
GOTO 3153; if() #160 Body End
SETR d2,gd16; if() #160 Else Start
PUSHR d2
LOADD d2,0
BITNOT d2
POP d3
ANDR d2,d3
SETR gd16,d2; if() #160 Else End
POP d5
RETURNFUNC; Func[void Ghost_UnsetFlag(int)] Body End
PUSHARGSV 0,0.0004; Func[void Ghost_MoveXY(int, int, int)] Body Start
SETR d4,SP
LOADD d2,5; if() #316 Test
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 3165
PUSHR d4
CALLFUNC 0.4386; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3175
PUSHR d4
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3181; Test 'if'
SETV d2,0; if() #316 Body Start
STORED d2,5; if() #316 Body End
LOADD d2,6; while() #3 Test AND InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,8
SETCMP d2,0.0009
COMPAREV d2,0
GOTOFALSE 3192
LOADD d2,5; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,8
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 3259; Test 'while'
LOADD d2,6; InlineFunc[int Abs(int)] Params AND if() #141 Test AND while() #3 Body Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOADD d2,5; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 3232; Test 'if'
LOADD d2,6; if() #142 Test AND if() #141 Body Start
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 3221; Test 'if'
PUSHR d4; if() #142 Body Start
PUSHV 8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3155; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOADD d2,6
SUBV d2,8
STORED d2,6
GOTO 3231; if() #142 Body End
PUSHR d4; if() #142 Else Start
PUSHV -8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3155; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOADD d2,6
ADDV d2,8
STORED d2,6; if() #142 Else End
GOTO 3258; if() #141 Body End
LOADD d2,5; if() #143 Test AND if() #141 Else Start
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 3248; Test 'if'
PUSHR d4; if() #143 Body Start
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 8
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3155; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOADD d2,5
SUBV d2,8
STORED d2,5
GOTO 3258; if() #143 Body End
PUSHR d4; if() #143 Else Start
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV -8
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3155; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOADD d2,5
ADDV d2,8
STORED d2,5; if() #143 Else End
GOTO 3181; if() #141 Else End AND while() #3 Body End AND while() #3 End
STOREDV 0,3
STOREDV 0,2
STOREDV 0,1
STOREDV 0,0
LOADD d2,6; if() #144 Test
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 3333; Test 'if'
SETR d2,gd23; if() #144 Body Start
RSHIFTV d2,8
STORED d2,2
SETR d2,gd2
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
STORED d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,1
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,0
LOADD d2,1; if() #145 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3303; Test 'if'
LOADD d2,3; if() #145 Body Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3325; if() #145 Body End
PUSHR d4; if() #146 Test AND if() #145 Else Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOADD d2,6
SUBV2 0,d2
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0341; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3321; Test 'if'
LOADD d2,3; if() #146 Body Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3325; if() #146 Body End
LOADD d2,3; if() #146 Else Start
RSHIFTV d2,3
LSHIFTV d2,3
STORED d2,3; if() #146 Else End
LOADD d2,3; if() #145 Else End
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
GOTO 3415; if() #144 Body End
LOADD d2,6; if() #317 Test AND if() #144 Else Start
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 3415; Test 'if'
SETR d2,gd13; if() #317 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
STORED d2,2
SETR d2,gd2
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
STORED d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,1
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,0
LOADD d2,1; if() #147 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3385; Test 'if'
LOADD d2,3; if() #147 Body Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3408; if() #147 Body End
PUSHR d4; if() #148 Test AND if() #147 Else Start
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOADD d2,6
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0341; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3402; Test 'if'
LOADD d2,3; if() #148 Body Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3408; if() #148 Body End
LOADD d2,3; if() #148 Else Start
ADDV d2,7
RSHIFTV d2,3
LSHIFTV d2,3
SUBV d2,1
STORED d2,3; if() #148 Else End
LOADD d2,3; if() #147 Else End
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2; if() #317 Body End
LOADD d2,5; if() #144 Else End AND if() #149 Test
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 3485; Test 'if'
SETR d2,gd24; if() #149 Body Start
RSHIFTV d2,8
STORED d2,2
SETR d2,gd3
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
STORED d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,1
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,0
LOADD d2,1; if() #150 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3455; Test 'if'
LOADD d2,3; if() #150 Body Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3477; if() #150 Body End
PUSHR d4; if() #151 Test AND if() #150 Else Start
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOADD d2,5
SUBV2 0,d2
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0341; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3473; Test 'if'
LOADD d2,3; if() #151 Body Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3477; if() #151 Body End
LOADD d2,3; if() #151 Else Start
RSHIFTV d2,3
LSHIFTV d2,3
STORED d2,3; if() #151 Else End
LOADD d2,3; if() #150 Else End
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
GOTO 3567; if() #149 Body End
LOADD d2,5; if() #318 Test AND if() #149 Else Start
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 3567; Test 'if'
SETR d2,gd14; if() #318 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
STORED d2,2
SETR d2,gd3
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
STORED d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,1
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,0
LOADD d2,1; if() #152 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3537; Test 'if'
LOADD d2,3; if() #152 Body Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3560; if() #152 Body End
PUSHR d4; if() #153 Test AND if() #152 Else Start
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOADD d2,5
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0341; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3554; Test 'if'
LOADD d2,3; if() #153 Body Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3560; if() #153 Body End
LOADD d2,3; if() #153 Else Start
ADDV d2,7
RSHIFTV d2,3
LSHIFTV d2,3
SUBV d2,1
STORED d2,3; if() #153 Else End
LOADD d2,3; if() #152 Else End
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2; if() #318 Body End
PUSHR d4; if() #149 Else End AND if() #319 Test
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3577
SETR d2,gd18
ANDV d2,4
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3636; Test 'if'
PUSHR d4; if() #154 Test AND if() #319 Body Start
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3601; Test 'if'
PUSHR d4; if() #154 Body Start
LOADD d2,6; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapAngle(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR d2
LOADD d2,5
SETR d1,d2; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapAngle(int)] Params End
WRAPRADIANS d2; InlineFunc[int WrapAngle(int)] Body
MULTV d2,57.2958
PUSHR d2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 0.0104; UsrFunc[int AngleDir8(int)] Call
POP d4
SETR gd5,d2
GOTO 3632; if() #154 Body End
LOADD d2,6; InlineFunc[int Abs(int)] Params AND if() #155 Test AND if() #154 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOADD d2,5; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 3622; Test 'if'
LOADD d2,5; if() #156 Test AND if() #155 Body Start
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 3619; Test 'if'
SETV d2,0; if() #156 Body Start
SETR gd5,d2
GOTO 3621; if() #156 Body End
SETV d2,1; if() #156 Else Start
SETR gd5,d2; if() #156 Else End
GOTO 3632; if() #155 Body End
LOADD d2,6; if() #157 Test AND if() #155 Else Start
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 3630; Test 'if'
SETV d2,2; if() #157 Body Start
SETR gd5,d2
GOTO 3632; if() #157 Body End
SETV d2,3; if() #157 Else Start
SETR gd5,d2; if() #157 Else End
SETR d2,gd2; if() #155 Else End AND if() #154 Else End
SETR gd19,d2
SETR d2,gd3
SETR gd20,d2; if() #319 Body End
POPARGS d5,0.0007
RETURNFUNC; Func[void Ghost_MoveXY(int, int, int)] Body End
PUSHV 0; Func[void __GhCleanUp(FFC)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2
SETV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTWIDTH,d2
SETV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTHEIGHT,d2
SETV d2,16
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFCWIDTH,d2
SETV d2,16
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFCHEIGHT,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DELAY,d2
STOREDV 0,0; for() #170 setup
LOADD d2,0; for() #170 LoopTest
COMPAREV d2,11
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 3770; for() #170 TestFail?
SETV d2,0; for() #170 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
LOADD d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; for() #170 Body End
LOADD d2,0; for() #170 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 3749; for() #170 End
POPARGS d5,0.0002
RETURNFUNC; Func[void __GhCleanUp(FFC)] Body End
SETR d4,SP; Func[void Ghost_ForceDir(int)] Body Start
LOADD d2,0
SETR gd5,d2
SETR d2,gd18
ORV d2,4
SETR gd18,d2
POP d5
RETURNFUNC; Func[void Ghost_ForceDir(int)] Body End
PUSHARGSV 0,0.0002; Func[void Ghost_Move(int, int, int)] Body Start
SETR d4,SP
STOREDV 0,1
STOREDV 0,0
LOADD d2,4; if() #133 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3793; Test 'if'
LOADD d2,3; if() #133 Body Start
SUBV2 0,d2
STORED d2,0
GOTO 3871; if() #133 Body End
LOADD d2,4; if() #134 Test AND if() #133 Else Start
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3801; Test 'if'
LOADD d2,3; if() #134 Body Start
STORED d2,0
GOTO 3871; if() #134 Body End
LOADD d2,4; if() #135 Test AND if() #134 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3810; Test 'if'
LOADD d2,3; if() #135 Body Start
SUBV2 0,d2
STORED d2,1
GOTO 3871; if() #135 Body End
LOADD d2,4; if() #136 Test AND if() #135 Else Start
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3818; Test 'if'
LOADD d2,3; if() #136 Body Start
STORED d2,1
GOTO 3871; if() #136 Body End
LOADD d2,4; if() #137 Test AND if() #136 Else Start
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3832; Test 'if'
LOADD d2,3; if() #137 Body Start
SUBV2 0,d2
MULTV d2,0.7071
STORED d2,1
LOADD d2,3
SUBV2 0,d2
MULTV d2,0.7071
STORED d2,0
GOTO 3871; if() #137 Body End
LOADD d2,4; if() #138 Test AND if() #137 Else Start
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3845; Test 'if'
LOADD d2,3; if() #138 Body Start
MULTV d2,0.7071
STORED d2,1
LOADD d2,3
SUBV2 0,d2
MULTV d2,0.7071
STORED d2,0
GOTO 3871; if() #138 Body End
LOADD d2,4; if() #139 Test AND if() #138 Else Start
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3858; Test 'if'
LOADD d2,3; if() #139 Body Start
SUBV2 0,d2
MULTV d2,0.7071
STORED d2,1
LOADD d2,3
MULTV d2,0.7071
STORED d2,0
GOTO 3871; if() #139 Body End
LOADD d2,4; if() #140 Test AND if() #139 Else Start
COMPAREV d2,7
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3870; Test 'if'
LOADD d2,3; if() #140 Body Start
MULTV d2,0.7071
STORED d2,1
LOADD d2,3
MULTV d2,0.7071
STORED d2,0
GOTO 3871; if() #140 Body End
GOTO 3880; return (Void) AND if() #140 Else
PUSHR d4; if() #139 Else End AND if() #138 Else End AND if() #137 Else End AND if() #136 Else End AND if() #135 Else End AND if() #134 Else End AND if() #133 Else End
LOADD d2,1; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3155; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
POPARGS d5,0.0005
RETURNFUNC; Func[void Ghost_Move(int, int, int)] Body End
SETR d4,SP; Func[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Body Start
LOADD d2,1; if() #631 Test
COMPAREV d2,-1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 3892
LOADD d2,1
COMPAREV d2,-2
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 3897; Test 'if'
SETV d2,1; if() #631 Body Start
STORED d2,1; if() #631 Body End
LOADD d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOADD d2,1
SETR gd11,d2
LOADD d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
LOADD d2,0
SETR gd12,d2
LOADD d2,2; if() #373 Test
COMPAREV d2,0
GOTOTRUE 3943; Test 'if'
LOADD d2,3; if() #373 Body Start
PUSHR d2
POP REFNPC
SETR d2,NPCX
SETR gd2,d2
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCY
SETR gd3,d2
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCZ
SETR gd4,d2
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCJUMP
SETR gd6,d2
GOTO 3975; if() #373 Body End
LOADD d2,4; if() #373 Else Start
PUSHR d2
POP REFFFC
SETR d2,X
SETR gd2,d2
LOADD d2,4
PUSHR d2
POP REFFFC
SETR d2,Y
SETR gd3,d2
SETV d2,0
SETR gd4,d2
SETV d2,0
SETR gd6,d2
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCJUMP,d2; if() #373 Else End
PUSHR d4
LOADD d2,4; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2546; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCDIR
SETR gd5,d2
SETV d2,0
SETR gd7,d2
SETV d2,0
SETR gd8,d2
SETV d2,0
SETR gd9,d2
SETV d2,0
SETR gd10,d2
SETR d2,gd2
SETR gd19,d2
SETR d2,gd3
SETR gd20,d2
LOADD d2,4
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
SETR gd13,d2
LOADD d2,4
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
SETR gd14,d2
SETV d2,0
SETR gd23,d2
SETV d2,0
SETR gd24,d2
LOADD d2,1; if() #632 Test
COMPAREV d2,1
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4093; Test 'if'
SETV d2,3; if(true) #374 [Opt:AlwaysOn] AND if() #632 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCEXTEND,d2
SETV d2,65456
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCOTILE,d2
SETV d2,65456; if(true) #633 [Opt:AlwaysOn]
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTILE,d2
SETR d2,gd13
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTXSZ,d2
SETR d2,gd14
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTYSZ,d2
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHXSZ,d2
SETR d2,gd14
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHYSZ,d2; if() #632 Body End
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
LOADD d2,3; if() #375 Test
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,32
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4124; Test 'if'
SETV d2,1; if() #375 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2
GOTO 4136; if() #375 Body End
SETV d2,0; if() #375 Else Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; if() #375 Else End
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCHP
SETR gd15,d2
SETV d2,0
SETR gd16,d2
SETV d2,0
SETR gd17,d2
SETV d2,0
SETR gd21,d2
SETV d2,0
SETR gd22,d2
SETV d2,0
SETR gd18,d2
SETV d2,0
PUSHR d2
SETR d2,gd26
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
SETV d2,65536
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2
POPARGS d5,0.0005
RETURNFUNC; Func[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Body End
PUSHARGSV 0,0.0008; Func[NPC Ghost_InitAutoGhost(FFC, int)] Body Start
SETR d4,SP
STOREDV 0,7
STOREDV 0,6
SETR d2,NPCCOUNT; InlineFunc[int Screen->NumNPCs()] Body AND for() #55 setup
STORED d2,5
LOADD d2,5; for() #55 LoopTest
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 4271; for() #55 TestFail?
LOADD d2,5; InlineFunc[NPC Screen->LoadNPC(int)] Params AND for() #55 Body Start
SUBV d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Body Start
LOADNPCR d2
SETR d2,REFNPC; InlineFunc[NPC Screen->LoadNPC(int)] Body End
STORED d2,7; if() #131 Test
PUSHR d2
POP REFNPC
SETR d2,NPCID
PUSHR d2
LOADD d2,8
POP d3
COMPARER d3,d2
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4201; Test 'if'
SETV d2,0; if() #131 Body Start
STORED d2,6
GOTO 4267; continue 1;
GOTO 4203; if() #131 Body End
SETV d2,1; if() #131 Else Start
STORED d2,6; if() #131 Else End
LOADD d2,7; if() #308 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65536
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4218; Test 'if'
SETV d2,0; if() #308 Body Start
STORED d2,6
GOTO 4267; continue 1; AND if() #308 Body End
LOADD d2,6; if() #132 Test
COMPAREV d2,0
GOTOTRUE 4266; Test 'if'
PUSHR d4; if() #132 Body Start
LOADD d2,9; UsrFunc[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Params Start
PUSHR d2
LOADD d2,7
PUSHR d2
PUSHV 1
LOADD d2,7
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65535
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFNPC
PUSHR NPCCSET; UsrFunc[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Params End
CALLFUNC 0.3882; UsrFunc[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Call
POP d4
LOADD d2,7; if() #309 Test
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,256
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4263; Test 'if'
SETV d2,1; if() #309 Body Start
PUSHR d2
LOADD d2,9
POP d3
PUSHR d2
PUSHR d3
SETV d2,1
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; if() #309 Body End
LOADD d2,7; return Start
GOTO 4316; return End
GOTO 4267; if() #132 Body End
GOTO 4271; break 1; AND if() #132 Else
LOADD d2,5; for() #55 Body End AND for() #55 LoopIncrement
SUBV d2,1
STORED d2,5
GOTO 4177; for() #55 End
ALLOCATEMEMV d2,60
STORED d2,4
WRITEPODSTRING d2,"ghost.zh: AutoGhost initialization failed - enemy missing.\n"
ALLOCATEMEMV d2,30
STORED d2,2
WRITEPODSTRING d2,"  DMap %d, screen %X\n"
ALLOCATEMEMV d2,30
STORED d2,0
WRITEPODSTRING d2,"  Script %d, enemy ID %d\n"
LOADD d2,4; InlineFunc[void printf(char32)] Params Start
PUSHR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,2; InlineFunc[void printf(char32)] Params Start
PUSHR d2
PUSHVARGR CURDMAP
PUSHVARGR CURDSCR; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,0; InlineFunc[void printf(char32)] Params Start
PUSHR d2
LOADD d2,9
PUSHR d2
POP REFFFC
PUSHVARGR FFSCRIPT
LOADD d2,8
PUSHVARGR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
SETV d2,0
PUSHR d2
LOADD d2,9
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
QUIT; InlineFunc[void Quit()] Body
LOADD d3,0
DEALLOCATEMEMR d3
LOADD d3,2
DEALLOCATEMEMR d3
LOADD d3,4
DEALLOCATEMEMR d3
POPARGS d5,0.0010
RETURNFUNC; Func[NPC Ghost_InitAutoGhost(FFC, int)] Body End
SETR d4,SP; Func[int VectorX(int, int)] Body Start
LOADD d2,0; InlineFunc[int Cos(int)] Params Start AND return Start
SETR d3,d2; InlineFunc[int Cos(int)] Params End
COSR d2,d3; InlineFunc[int Cos(int)] Body
PUSHR d2
LOADD d2,1
POP d3
MULTR d2,d3
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int VectorX(int, int)] Body End
SETR d4,SP; Func[int VectorY(int, int)] Body Start
LOADD d2,0; InlineFunc[int Sin(int)] Params Start AND return Start
SETR d3,d2; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
PUSHR d2
LOADD d2,1
POP d3
MULTR d2,d3
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int VectorY(int, int)] Body End
PUSHV 0; Func[void Ghost_MoveTowardLink(int, int)] Body Start
SETR d4,SP
PUSHR d4
SETR d2,gd2; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR d2
SETR d2,gd13
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd3
PUSHR d2
SETR d2,gd14
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,LINKX
ADDV d2,8
PUSHR d2
SETR d2,LINKY
ADDV d2,8
PUSHR d2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0085; UsrFunc[int Angle(int, int, int, int)] Call
POP d4
STORED d2,0
PUSHARGSR d4,0.0002; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
LOADD d2,2; UsrFunc[int VectorX(int, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.4318; UsrFunc[int VectorX(int, int)] Call
POP d4
PUSHR d2
PUSHR d4
LOADD d2,2; UsrFunc[int VectorY(int, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.4328; UsrFunc[int VectorY(int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3155; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
POPARGS d5,0.0003
RETURNFUNC; Func[void Ghost_MoveTowardLink(int, int)] Body End
SETR d4,SP; Func[bool IsSideview()] Body Start
SETV d2,0; return Start
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,4
PUSHR d2
SETR d2,CURDMAP; InlineFunc[DMapData Game->LoadDMapData(int)] Params
LOADDMAPDATAR d2; InlineFunc[DMapData Game->LoadDMapData(int)] Body Start
SETR d2,REFDMAPDATA; InlineFunc[DMapData Game->LoadDMapData(int)] Body End
PUSHR d2
POP REFDMAPDATA
SETR d2,DMAPDATASIDEVIEW
POP d3
CASTBOOLF d2
CASTBOOLF d3
COMPARER d3,d2
SETCMP d2,0.0011
RETURNFUNC; return End AND Func[bool IsSideview()] Body End
PUSHV 0; Func[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCJUMP,d2
PUSHR d4; unless() #346 Test
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 4563; Test 'unless'
PUSHR d4; if() #161 Test AND unless() #346 Body Start
CALLFUNC 0.4386; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOTRUE 4525; Test 'if'
SETR d2,gd6; if() #347 Test AND if() #161 Body Start
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOFALSE 4438
PUSHR d4
PUSHARGSV 1,0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0341; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 4524; Test 'if'
PUSHR d4; if() #347 Body Start
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
STORED d2,0
PUSHR d4
PUSHV 64; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 0.3128; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP d4
SETR d2,gd6; if() #162 Test
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 4494; Test 'if'
PUSHR d4; if() #162 Body Start
PUSHV 32; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3102; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK d4
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR gd6
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 0.3780; UsrFunc[void Ghost_Move(int, int, int)] Call
POP d4
SETR d2,gd6; InlineFunc[untyped Max(untyped, untyped)] Params Start
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
SETR gd6,d2
SETR d2,gd6; if() #348 Test
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 4483
PUSHR d4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0341; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4489; Test 'if'
SETV d2,0; if() #348 Body Start
SETR gd6,d2; if() #348 Body End
PUSHR d4
PUSHV 32; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 0.3128; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP d4
GOTO 4517; if() #162 Body End
PUSHR d4; if() #162 Else Start
PUSHV 1; UsrFunc[void Ghost_Move(int, int, int)] Params Start
SETR d2,gd6
SUBV2 0,d2
PUSHR d2
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 0.3780; UsrFunc[void Ghost_Move(int, int, int)] Call
PEEK d4
PUSHARGSV 1,0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0341; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 4515; Test 'if'
SETR d2,gd6; InlineFunc[untyped Max(untyped, untyped)] Params Start AND if() #163 Body Start
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
SETR gd6,d2
GOTO 4517; if() #163 Body End
SETV d2,0; if() #163 Else Start
SETR gd6,d2; if() #163 Else End
LOADD d2,0; if() #162 Else End AND if() #349 Test
COMPAREV d2,0
GOTOTRUE 4524; Test 'if'
PUSHR d4; if() #349 Body Start
PUSHV 64; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3102; UsrFunc[void Ghost_SetFlag(int)] Call
POP d4; if() #349 Body End
GOTO 4563; if() #347 Body End AND if() #161 Body End
SETR d2,gd6; if() #350 Test AND if() #161 Else Start
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOFALSE 4534
SETR d2,gd4
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 4563; Test 'if'
SETR d2,gd4; if() #164 Test AND if() #350 Body Start
PUSHR d2
SETR d2,gd6
POP d3
ADDR d2,d3
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 4551; Test 'if'
SETV d2,0; if() #164 Body Start
SETR gd4,d2
SETV d2,0
SETR gd6,d2
GOTO 4563; if() #164 Body End
SETR d2,gd4; if() #164 Else Start
PUSHR d2
SETR d2,gd6
POP d3
ADDR d2,d3
SETR gd4,d2
SETR d2,gd6; InlineFunc[untyped Max(untyped, untyped)] Params Start
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
SETR gd6,d2; if() #164 Else End
SETR d2,gd7; if() #350 Body End AND if() #161 Else End AND unless() #346 Body End AND if() #351 Test
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOFALSE 4572
SETR d2,gd8
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 4579
SETR d2,gd9
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 4586
SETR d2,gd10
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 4610; Test 'if'
SETR d2,gd7; if() #351 Body Start
PUSHR d2
SETR d2,gd9
POP d3
ADDR d2,d3
SETR gd7,d2
SETR d2,gd8
PUSHR d2
SETR d2,gd10
POP d3
ADDR d2,d3
SETR gd8,d2
PUSHR d4
PUSHR gd7; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR gd8
PUSHV 2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3155; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
PEEK d4
PUSHR gd5; UsrFunc[void Ghost_ForceDir(int)] Params
CALLFUNC 0.3772; UsrFunc[void Ghost_ForceDir(int)] Call
POP d4; if() #351 Body End
PUSHR d4
LOADD d2,4; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2546; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
LOADD d2,4; UsrFunc[void __Ghost_WaitframePart1(FFC, NPC, bool)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2
PUSHV 0; UsrFunc[void __Ghost_WaitframePart1(FFC, NPC, bool)] Params End
CALLFUNC 0.4652; UsrFunc[void __Ghost_WaitframePart1(FFC, NPC, bool)] Call
PEEK d4
LOADD d2,4; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params End
CALLFUNC 0.1891; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Call
PEEK d4
LOADD d2,4; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
CALLFUNC 0.2147; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
SETR d2,gd18
ANDV d2,32
SETR gd18,d2
PUSHR d4; return Start
LOADD d2,4; UsrFunc[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,1
PUSHR d2; UsrFunc[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Params End
CALLFUNC 0.5160; UsrFunc[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Call
POP d4
POPARGS d5,0.0005; return End
RETURNFUNC; Func[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Body End
PUSHARGSV 0,0.0002; Func[void __Ghost_WaitframePart1(FFC, NPC, bool)] Body Start
SETR d4,SP
SETR d2,gd18; if() #397 Test
ANDV d2,4
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4670; Test 'if'
SETR d2,gd5; if() #397 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCDIR,d2
GOTO 4770; if() #397 Body End
LOADD d2,2; if() #398 Test AND if() #397 Else Start
COMPAREV d2,0
GOTOTRUE 4679; Test 'if'
LOADD d2,3; if() #398 Body Start
PUSHR d2
POP REFNPC
SETR d2,NPCDIR
SETR gd5,d2
GOTO 4770; if() #398 Body End
PUSHR d4; if() #668 Test AND if() #398 Else Start
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 4701
SETR d2,gd19
PUSHR d2
SETR d2,gd2
POP d3
COMPARER d3,d2
SETCMP d2,0.0011
COMPAREV d2,0
GOTOFALSE 4700
SETR d2,gd20
PUSHR d2
SETR d2,gd3
POP d3
COMPARER d3,d2
SETCMP d2,0.0011
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4770; Test 'if'
SETR d2,gd2; if() #668 Body Start
PUSHR d2
SETR d2,gd19
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,1
SETR d2,gd3
PUSHR d2
SETR d2,gd20
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,0
PUSHR d4; if() #399 Test
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 4739; Test 'if'
PUSHR d4; if() #399 Body Start
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapAngle(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR d2
LOADD d2,0
SETR d1,d2; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapAngle(int)] Params End
WRAPRADIANS d2; InlineFunc[int WrapAngle(int)] Body
MULTV d2,57.2958
PUSHR d2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 0.0104; UsrFunc[int AngleDir8(int)] Call
POP d4
SETR gd5,d2
GOTO 4770; if() #399 Body End
LOADD d2,1; InlineFunc[int Abs(int)] Params AND if() #400 Test AND if() #399 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOADD d2,0; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 4760; Test 'if'
LOADD d2,1; if() #401 Test AND if() #400 Body Start
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 4757; Test 'if'
SETV d2,2; if() #401 Body Start
SETR gd5,d2
GOTO 4759; if() #401 Body End
SETV d2,3; if() #401 Else Start
SETR gd5,d2; if() #401 Else End
GOTO 4770; if() #400 Body End
LOADD d2,0; if() #402 Test AND if() #400 Else Start
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 4768; Test 'if'
SETV d2,0; if() #402 Body Start
SETR gd5,d2
GOTO 4770; if() #402 Body End
SETV d2,1; if() #402 Else Start
SETR gd5,d2; if() #402 Else End
SETR d2,gd5; if() #400 Else End AND if() #399 Else End AND if() #668 Body End AND if() #398 Else End AND if() #397 Else End
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCDIR,d2
SETR d2,gd2
SETR gd19,d2
SETR d2,gd3
SETR gd20,d2
SETR d2,gd11; if() #403 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 4792
SETR d2,gd11
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 4816; Test 'if'
LOADD d2,4; if() #669 Test AND if() #403 Body Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
POP d3
COMPARER d3,d2
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4815; Test 'if'
SETR d2,gd11; if() #669 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #669 Body End
GOTO 4912; if() #403 Body End
PUSHR d4; if() #404 Test AND if() #403 Else Start
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 4854; Test 'if'
LOADD d2,4; if() #670 Test AND if() #404 Body Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
PUSHR d2
SETR d2,gd5
POP d3
ADDR d2,d3
POP d3
COMPARER d3,d2
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4853; Test 'if'
SETR d2,gd11; if() #670 Body Start
PUSHR d2
PUSHR d4
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0417; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #670 Body End
GOTO 4912; if() #404 Body End
PUSHR d4; if() #405 Test AND if() #404 Else Start
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 4892; Test 'if'
LOADD d2,4; if() #671 Test AND if() #405 Body Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
PUSHR d2
SETR d2,gd5
POP d3
ADDR d2,d3
POP d3
COMPARER d3,d2
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4891; Test 'if'
SETR d2,gd11; if() #671 Body Start
PUSHR d2
PUSHR d4
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0417; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #671 Body End
GOTO 4912; if() #405 Body End
LOADD d2,4; if() #672 Test AND if() #405 Else Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
POP d3
COMPARER d3,d2
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4912; Test 'if'
SETR d2,gd11; if() #672 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #672 Body End
LOADD d2,4; if() #405 Else End AND if() #404 Else End AND if() #403 Else End AND if() #673 Test
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
PUSHR d2
SETR d2,gd13
POP d3
COMPARER d3,d2
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4932; Test 'if'
SETR d2,gd13; if() #673 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTWIDTH,d2; if() #673 Body End
LOADD d2,3; if() #674 Test
PUSHR d2
POP REFNPC
SETR d2,NPCTXSZ
PUSHR d2
SETR d2,gd13
POP d3
COMPARER d3,d2
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4976; Test 'if'
SETR d2,gd13; if() #674 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTXSZ,d2
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHXSZ,d2
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHXOFS,d2; if() #674 Body End
LOADD d2,4; if() #675 Test
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
PUSHR d2
SETR d2,gd14
POP d3
COMPARER d3,d2
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4996; Test 'if'
SETR d2,gd14; if() #675 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTHEIGHT,d2; if() #675 Body End
LOADD d2,3; if() #676 Test
PUSHR d2
POP REFNPC
SETR d2,NPCTYSZ
PUSHR d2
SETR d2,gd14
POP d3
COMPARER d3,d2
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 5040; Test 'if'
SETR d2,gd14; if() #676 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTYSZ,d2
SETR d2,gd14
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHYSZ,d2
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHYOFS,d2; if() #676 Body End
PUSHR d4; if() #677 Test
PUSHV 128; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1500; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 5105; Test 'if'
SETR d2,gd4; if() #406 Test AND if() #677 Body Start
COMPAREV d2,32
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 5060
LOADD d2,4
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 5077; Test 'if'
SETV d2,1; if() #406 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2
GOTO 5105; if() #406 Body End
SETR d2,gd4; if() #678 Test AND if() #406 Else Start
COMPAREV d2,32
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 5089
LOADD d2,4
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 5105; Test 'if'
SETV d2,0; if() #678 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; if() #678 Body End
SETR d2,gd15; if() #406 Else End AND if() #677 Body End
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHP,d2
SETR d2,gd12
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCCSET,d2
SETR d2,gd18; if() #407 Test
ANDV d2,8
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 5139; Test 'if'
SETR d2,gd12; if() #407 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
GOTO 5153; if() #407 Body End
SETR d2,gd21; if() #679 Test AND if() #407 Else Start
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 5153; Test 'if'
SETR d2,gd12; if() #679 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2; if() #679 Body End
PUSHR d4; if() #407 Else End
LOADD d2,3; UsrFunc[void __Ghost_DrawShadow(NPC)] Params Start
PUSHR d2; UsrFunc[void __Ghost_DrawShadow(NPC)] Params End
CALLFUNC 0.1974; UsrFunc[void __Ghost_DrawShadow(NPC)] Call
POP d4
POPARGS d5,0.0005
RETURNFUNC; Func[void __Ghost_WaitframePart1(FFC, NPC, bool)] Body End
PUSHV 0; Func[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Body Start
SETR d4,SP
LOADD d2,3; InlineFunc[bool NPC->isValid()] Params AND unless() #680 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOFALSE 5187; Test 'unless'
LOADD d2,2; if() #681 Test AND unless() #680 Body Start
COMPAREV d2,0
GOTOTRUE 5179; Test 'if'
PUSHR d4; if() #681 Body Start
LOADD d2,4; UsrFunc[void __GhCleanUp(FFC)] Params Start
PUSHR d2; UsrFunc[void __GhCleanUp(FFC)] Params End
CALLFUNC 0.3638; UsrFunc[void __GhCleanUp(FFC)] Call
POP d4
SETV d2,0
SETR gd11,d2
PUSHR d4
CALLFUNC 0.3094; UsrFunc[void Ghost_ClearCombos()] Call
POP d4; if() #681 Body End
LOADD d2,1; if() #682 Test
COMPAREV d2,0
GOTOTRUE 5183; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #682 Body
SETV d2,0
SETR gd15,d2
SETV d2,0; return Start
GOTO 5311; return End AND unless() #680 Body End
STOREDV 0,0
LOADD d2,3; if() #683 Test
PUSHR d2
POP REFNPC
SETR d2,NPCHP
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 5198; Test 'if'
SETV d2,1; if() #683 Body Start
STORED d2,0; if() #683 Body End
LOADD d2,0; unless() #684 Test
COMPAREV d2,0
GOTOFALSE 5217; Test 'unless'
PUSHR d4; unless() #684 Body Start
LOADD d2,4; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params End
CALLFUNC 0.2679; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Call
PEEK d4
LOADD d2,4; UsrFunc[bool Ghost_CheckFreeze(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[bool Ghost_CheckFreeze(FFC, NPC)] Params End
CALLFUNC 0.1626; UsrFunc[bool Ghost_CheckFreeze(FFC, NPC)] Call
POP d4
COMPAREV d2,0
SETCMP d2,0.0012
STORED d2,0; unless() #684 Body End
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCHP
SETR gd15,d2
LOADD d2,0; if() #685 Test
COMPAREV d2,0
GOTOTRUE 5310; Test 'if'
LOADD d2,2; if() #686 Test AND if() #685 Body Start
COMPAREV d2,0
GOTOTRUE 5304; Test 'if'
SETV d2,1; if() #686 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTXSZ,d2
SETV d2,1
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTYSZ,d2
SETR d2,gd2
PUSHR d2
SETR d2,gd13
SUBV d2,1
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd13
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETR d2,gd3
PUSHR d2
SETR d2,gd14
SUBV d2,1
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd14
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETR d2,gd4
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2
PUSHR d4
LOADD d2,4; UsrFunc[void __GhCleanUp(FFC)] Params Start
PUSHR d2; UsrFunc[void __GhCleanUp(FFC)] Params End
CALLFUNC 0.3638; UsrFunc[void __GhCleanUp(FFC)] Call
POP d4
SETV d2,0
SETR gd11,d2; if() #686 Body End
LOADD d2,1; if() #687 Test
COMPAREV d2,0
GOTOTRUE 5308; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #687 Body
SETV d2,0; return Start
GOTO 5311; return End AND if() #685 Body End
SETV d2,1; return Start
POPARGS d5,0.0005; return End
RETURNFUNC; Func[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Body End
PUSHARGSV 0,0.0006; Func[void __SetUpDrawingArray(FFC, NPC, int)] Body Start
SETR d4,SP
STOREDV 0,5
LOADD d2,8; if() #707 Test
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOTRUE 5328; Test 'if'
LOADD d2,5; if() #707 Body Start
ORV d2,4
STORED d2,5; if() #707 Body End
LOADD d2,8; if() #708 Test
PUSHR d2
SETV d2,1
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOTRUE 5340; Test 'if'
LOADD d2,5; if() #708 Body Start
ORV d2,1
STORED d2,5; if() #708 Body End
PUSHR d4; if() #709 Test
LOADD d2,7; UsrFunc[bool __Ghost_IsFlickering(NPC)] Params Start
PUSHR d2; UsrFunc[bool __Ghost_IsFlickering(NPC)] Params End
CALLFUNC 0.5653; UsrFunc[bool __Ghost_IsFlickering(NPC)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 5350; Test 'if'
LOADD d2,5; if() #709 Body Start
ORV d2,2
STORED d2,5; if() #709 Body End
LOADD d2,8
PUSHR d2
POP REFFFC
SETR d2,CSET
PUSHR d2
LOADD d2,6
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
LOADD d2,5
PUSHR d2
LOADD d2,6
SETR d0,d2
POP d2
WRITEPODARRAYVR 2,d2
STOREDV 3,4
SETR d2,gd2
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFNPC
SETR d2,NPCXOFS
POP d3
ADDR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFNPC
SETR d2,NPCYOFS
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd4
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFNPC
SETR d2,NPCZOFS
POP d3
ADDR d2,d3
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,2
SETR d2,gd26; if() #710 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 5518; Test 'if'
STOREDV 1,1; if() #710 Body Start
STOREDV 0,0; for() #182 setup
LOADD d2,0; for() #182 LoopTest
PUSHR d2
SETR d2,gd26
PUSHR d2
POP d0
READPODARRAYV d2,0
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 5518; for() #182 TestFail?
SETR d2,gd26; for() #182 Body Start
PUSHR d2
LOADD d2,1
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,3
PUSHR d2
SETR d2,gd26
PUSHR d2
LOADD d2,1
ADDV d2,1
POP d0
READPODARRAYR d2,d2
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,1
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,2
PUSHR d2
SETR d2,gd26
PUSHR d2
LOADD d2,1
ADDV d2,2
POP d0
READPODARRAYR d2,d2
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,2
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
SETR d2,gd26
PUSHR d2
LOADD d2,1
ADDV d2,3
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,3
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
SETR d2,gd26
PUSHR d2
LOADD d2,1
ADDV d2,4
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,4
ADDV d2,6
STORED d2,4
LOADD d2,1
ADDV d2,6
STORED d2,1
LOADD d2,6
PUSHR d2
POP d0
READPODARRAYV d2,0
ADDV d2,1
PUSHR d2
LOADD d2,6
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2; for() #182 Body End
LOADD d2,0; for() #182 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 5406; for() #182 End
LOADD d2,8; if() #710 Body End AND if(true) #711 [Opt:AlwaysOn]
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,3
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,1
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,2
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,2
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,8
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,3
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,8
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,6
PUSHR d2
POP d0
READPODARRAYV d2,0
ADDV d2,1
PUSHR d2
LOADD d2,6
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
POPARGS d5,0.0009
RETURNFUNC; Func[void __SetUpDrawingArray(FFC, NPC, int)] Body End
PUSHV 0; Func[void __HideFFCAndWait(FFC)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,DATA
STORED d2,0
SETV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
WAITFRAME; InlineFunc[void Waitframe()] Body
LOADD d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __HideFFCAndWait(FFC)] Body End
PUSHV 0; Func[bool IsPit(int)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
POP d0
SETR d2,COMBOTD
STORED d2,0; if() #368 Test
COMPAREV d2,41
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 5629; Test 'if'
SETV d2,1; return Start AND if() #368 Body Start
GOTO 5651; return End AND if() #368 Body End
LOADD d2,0; if() #369 Test
COMPAREV d2,93
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 5636; Test 'if'
SETV d2,1; return Start AND if() #369 Body Start
GOTO 5651; return End AND if() #369 Body End
LOADD d2,0; if() #370 Test
COMPAREV d2,80
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 5644
LOADD d2,0
COMPAREV d2,82
SETCMP d2,0.0014
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 5650; Test 'if'
SETV d2,1; return Start AND if() #370 Body Start
GOTO 5651; return End AND if() #370 Body End
SETV d2,0; return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[bool IsPit(int)] Body End
SETR d4,SP; Func[bool __Ghost_IsFlickering(NPC)] Body Start
LOADD d2,0; if() #635 Test
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,128
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 5665; Test 'if'
SETV d2,1; return Start AND if() #635 Body Start
GOTO 5666; return End AND if() #635 Body End
SETV d2,0; return Start
POP d5; return End
RETURNFUNC; Func[bool __Ghost_IsFlickering(NPC)] Body End
PUSHARGSV 0,0.0004; Func[void SpawnAnimation(FFC, NPC)] Body Start
SETR d4,SP
LOADD d2,5
PUSHR d2
POP REFFFC
SETR d2,DATA
STORED d2,3
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCCOLLDET
STORED d2,2
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCXOFS
STORED d2,1
PUSHR d4
LOADD d2,5; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2546; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFNPC
SETR NPCCOLLDET,d2
STOREDV 0,0; for() #257 setup
LOADD d2,0; for() #257 LoopTest
COMPAREV d2,32
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 5813; for() #257 TestFail?
SETV d2,0; for() #257 Body Start
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
SETV d2,32768
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
PUSHR d4
LOADD d2,5; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2546; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
LOADD d2,5; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
CALLFUNC 0.2147; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
LOADD d2,3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOADD d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
PUSHR d4
LOADD d2,5; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2546; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
LOADD d2,5; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
CALLFUNC 0.2147; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
LOADD d2,0; if() #950 Test
COMPAREV d2,29
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 5809; Test 'if'
SETR d2,UNDERCOMBO; if() #950 Body Start
PUSHR d2
PUSHR d4
LOADD d2,5; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR d2
POP REFFFC
PUSHR X
LOADD d2,5
PUSHR d2
POP REFFFC
PUSHR Y; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0239; UsrFunc[int ComboAt(int, int)] Call
POP d4
PUSHR d2
POP d0
POP d2
SETR COMBODD,d2
SETR d2,UNDERCSET
PUSHR d2
PUSHR d4
LOADD d2,5; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR d2
POP REFFFC
PUSHR X
LOADD d2,5
PUSHR d2
POP REFFFC
PUSHR Y; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0239; UsrFunc[int ComboAt(int, int)] Call
POP d4
PUSHR d2
POP d0
POP d2
SETR COMBOCD,d2; if() #950 Body End
LOADD d2,0; for() #257 Body End AND for() #257 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 5703; for() #257 End
LOADD d2,3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOADD d2,2
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFNPC
SETR NPCCOLLDET,d2
LOADD d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
POPARGS d5,0.0006
RETURNFUNC; Func[void SpawnAnimation(FFC, NPC)] Body End


PUSHV 0; void run() Body Start
SETR d4,SP
PUSHR d4
CALLFUNC 0.2427; UsrFunc[void StartGhostZH()] Call
POP d4
PUSHR d4; while(true) #14 Body [Opt:AlwaysOn] Start
CALLFUNC 0.8815; UsrFunc[void UpdateGhostZH1()] Call
POP d4
WAITDRAW; InlineFunc[void Waitdraw()] Body
PUSHR d4
CALLFUNC 0.8877; UsrFunc[void UpdateGhostZH2()] Call
POP d4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #14 Body [Opt:AlwaysOn] End
GOTO 6; while() #14 End AND [Opt:NeverRet] AND void run() Body End
POP d2; Func[int Distance(int, int, int, int)] Body Start
POP d1
POP d0
POP d6
SETR d2,DISTANCE
RETURNFUNC; Func[int Distance(int, int, int, int)] Body End
SETR d4,SP; Func[int RadianAngle(int, int, int, int)] Body Start
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND return Start
PUSHR d2
LOADD d2,3
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
POPARGS d5,0.0004; return End
RETURNFUNC; Func[int RadianAngle(int, int, int, int)] Body End
SETR d4,SP; Func[int Randf(int)] Body Start
SETV d2,0; InlineFunc[long RNG->LRand(long)] Params Start AND return Start
PUSHR d2
LOADD d2,0; InlineFunc[long RNG->LRand(long)] Params End
POP REFRNG; InlineFunc[long RNG->LRand(long)] Body Start
RNGLRAND2 d2; InlineFunc[long RNG->LRand(long)] Body End
POP d5; return End
RETURNFUNC; Func[int Randf(int)] Body End
SETR d4,SP; Func[int Angle(int, int, int, int)] Body Start
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR d2
LOADD d2,3
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
SETR d3,d2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
POPARGS d5,0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
PUSHARGSV 0,0.0007; Func[void AutoGhost()] Body Start
SETR d4,SP
SETR d2,gd27; if() #29 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,2
COMPAREV d2,0
GOTOTRUE 75; Test 'if'
GOTO 420; return (Void) AND if() #29 Body
STOREDV 0,6
STOREDV 0,5
STOREDV 0,4
SETR d2,NPCCOUNT; InlineFunc[int Screen->NumNPCs()] Body AND for() #2 setup
STORED d2,3
LOADD d2,3; for() #2 LoopTest
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 420; for() #2 TestFail?
LOADD d2,3; InlineFunc[NPC Screen->LoadNPC(int)] Params AND for() #2 Body Start
SUBV d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Body Start
LOADNPCR d2
SETR d2,REFNPC; InlineFunc[NPC Screen->LoadNPC(int)] Body End
STORED d2,6; if() #30 Test
PUSHR d2
POP REFNPC
SETR d2,NPCID
COMPAREV d2,20
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 98; Test 'if'
GOTO 416; continue 1; AND if() #30 Body
LOADD d2,6; if() #31 Test
PUSHR d2
POP REFNPC
SETR d2,NPCID
COMPAREV d2,511
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 107; Test 'if'
GOTO 416; continue 1; AND if() #31 Body
LOADD d2,6; if() #32 Test AND if(false) #16 [Opt:AlwaysOff]
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65536
COMPAREV d2,0
GOTOTRUE 118; Test 'if'
GOTO 416; continue 1; AND if() #32 Body
LOADD d2,6; unless() #33 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
COMPAREV d2,0
GOTOFALSE 128; Test 'unless'
GOTO 416; continue 1; AND unless() #33 Body
LOADD d2,6; unless() #34 Test
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
COMPAREV d2,0
GOTOFALSE 138; Test 'unless'
GOTO 416; continue 1; AND unless() #34 Body
STOREDV 0,2
STOREDV 0,1
LOADD d2,6; if(false) #17 [Opt:AlwaysOff]
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
STORED d2,1
LOADD d2,6
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
STORED d2,2; if() #35 Test
COMPAREV d2,-1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 176; Test 'if'
ALLOCATEMEMV d2,2; if() #35 Body Start
STORED d2,0
PUSHR d4
LOADD d2,6; UsrFunc[int __AutoGhostParseName(NPC, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[int __AutoGhostParseName(NPC, int)] Params End
CALLFUNC 0.0422; UsrFunc[int __AutoGhostParseName(NPC, int)] Call
POP d4
LOADD d2,0
PUSHR d2
POP d0
READPODARRAYV d2,0
STORED d2,2
LOADD d3,0
DEALLOCATEMEMR d3; if() #35 Body End
LOADD d2,2; if() #36 Test
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 187; Test 'if'
PUSHR d4; if() #36 Body Start
LOADD d2,6; UsrFunc[void __AutoGhostKill(NPC)] Params Start
PUSHR d2; UsrFunc[void __AutoGhostKill(NPC)] Params End
CALLFUNC 0.0728; UsrFunc[void __AutoGhostKill(NPC)] Call
POP d4
GOTO 416; continue 1; AND if() #36 Body End
LOADD d2,2; if() #37 Test
COMPAREV d2,511
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 198; Test 'if'
PUSHR d4; if() #37 Body Start
LOADD d2,6; UsrFunc[void __AutoGhostKill(NPC)] Params Start
PUSHR d2; UsrFunc[void __AutoGhostKill(NPC)] Params End
CALLFUNC 0.0728; UsrFunc[void __AutoGhostKill(NPC)] Call
POP d4
GOTO 416; continue 1; AND if() #37 Body End
PUSHR d4
LOADD d2,5; UsrFunc[int FindUnusedFFC(int)] Params Start
PUSHR d2; UsrFunc[int FindUnusedFFC(int)] Params End
CALLFUNC 0.0779; UsrFunc[int FindUnusedFFC(int)] Call
POP d4
STORED d2,5; unless() #38 Test
COMPAREV d2,0
GOTOFALSE 212; Test 'unless'
PUSHR d4; unless() #38 Body Start
LOADD d2,6; UsrFunc[void __AutoGhostKill(NPC)] Params Start
PUSHR d2; UsrFunc[void __AutoGhostKill(NPC)] Params End
CALLFUNC 0.0728; UsrFunc[void __AutoGhostKill(NPC)] Call
POP d4
GOTO 416; continue 1; AND unless() #38 Body End
LOADD d2,5; InlineFunc[FFC Screen->LoadFFC(int)] Params
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,4
SETV d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCCSET
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
SETV d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTWIDTH,d2
SETV d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTHEIGHT,d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCX
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCY
PUSHR d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCZ
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2
LOADD d2,2
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFSCRIPT,d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCID
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFINITDD,d2
SETV d2,1; if(true) #39 [Opt:AlwaysOn]
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2
LOADD d2,1; if() #40 Test
COMPAREV d2,1
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 386; Test 'if'
LOADD d2,1; if() #41 Test AND if() #40 Body Start
COMPAREV d2,-1
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 386; Test 'if'
SETV d2,3; if() #41 Body Start
PUSHR d2
LOADD d2,6
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCEXTEND,d2
SETV d2,1024
PUSHR d2
LOADD d2,6
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2; if() #41 Body End
LOADD d2,1; if() #40 Body End AND if() #18 Test
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 404; Test 'if'
SETV d2,1; if() #18 Body Start
PUSHR d2
LOADD d2,6
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2
GOTO 416; if() #18 Body End
LOADD d2,1; if() #18 Else Start
PUSHR d2
LOADD d2,6
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2; if() #18 Else End
LOADD d2,3; for() #2 Body End AND for() #2 LoopIncrement
SUBV d2,1
STORED d2,3
GOTO 80; for() #2 End
POPARGS d5,0.0007
RETURNFUNC; Func[void AutoGhost()] Body End
PUSHARGSV 0,0.0009; Func[int __AutoGhostParseName(NPC, int)] Body Start
SETR d4,SP
ALLOCATEMEMV d2,64
STORED d2,8
ALLOCATEMEMV d2,64
STORED d2,7
SETV d2,1
PUSHR d2
LOADD d2,9
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
LOADD d2,10; InlineFunc[void NPC->GetName(int)] Params Start
PUSHR d2
LOADD d2,8; InlineFunc[void NPC->GetName(int)] Params End
POP REFNPC; InlineFunc[void NPC->GetName(int)] Body Start
NPCNAME d2; InlineFunc[void NPC->GetName(int)] Body End
STOREDV 0,6; for() #151 setup
LOADD d2,6; for() #151 LoopTest
COMPAREV d2,63
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 666; for() #151 TestFail?
LOADD d2,8; if() #581 Test AND for() #151 Body Start
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
COMPAREV d2,64
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 662; Test 'if'
LOADD d2,8; if() #581 Body Start
PUSHR d2
LOADD d2,6
ADDV d2,1
POP d0
READPODARRAYR d2,d2
STORED d2,5
PUSHR d4; if() #345 Test
LOADD d2,5; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 0.8999; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 563; Test 'if'
STOREDV 0,4; if() #345 Body Start
LOADD d2,6; for() #152 setup
ADDV d2,1
STORED d2,6
PUSHR d4; for() #152 LoopTest
LOADD d2,8; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
PUSHR d2
PUSHV 0; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 0.8999; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 505; for() #152 TestFail?
LOADD d2,8; for() #152 Body Start
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,4
ADDV d2,1
STORED d2,4; for() #152 Body End
LOADD d2,6; for() #152 LoopIncrement
ADDV d2,1
STORED d2,6
GOTO 473; for() #152 End
SETV d2,0
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,7; InlineFunc[int Game->GetFFCScript(int)] Params
GETFFCSCRIPT d2; InlineFunc[int Game->GetFFCScript(int)] Body
PUSHR d2
LOADD d2,9
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
LOADD d2,6
SUBV d2,1
STORED d2,6
LOADD d2,9; if() #582 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 562; Test 'if'
ALLOCATEMEMV d2,59; if() #582 Body Start
STORED d2,2
WRITEPODSTRING d2,"ghost.zh: AutoGhost setup failed - script does not exist.\n"
ALLOCATEMEMV d2,80
STORED d2,0
WRITEPODSTRING d2,"  Script name: %s\n"
LOADD d2,2; InlineFunc[void printf(char32)] Params Start
PUSHR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,0; InlineFunc[void printf(char32)] Params Start
PUSHR d2
LOADD d2,7
PUSHVARGR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
SETV d2,0; return Start
LOADD d3,0
DEALLOCATEMEMR d3
LOADD d3,2
DEALLOCATEMEMR d3
LOADD d3,7
DEALLOCATEMEMR d3
LOADD d3,8
DEALLOCATEMEMR d3
GOTO 726; return End
LOADD d3,0
DEALLOCATEMEMR d3
LOADD d3,2
DEALLOCATEMEMR d3; if() #582 Body End
GOTO 662; if() #345 Body End
LOADD d2,5; if() #583 Test AND if() #345 Else Start
COMPAREV d2,48
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 571
LOADD d2,5
COMPAREV d2,57
SETCMP d2,0.0014
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOFALSE 579
LOADD d2,5
COMPAREV d2,45
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 662; Test 'if'
STOREDV 0,4; if() #583 Body Start
LOADD d2,5; if() #584 Test
COMPAREV d2,45
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 599; Test 'if'
SETV d2,45; if() #584 Body Start
PUSHR d2
LOADD d2,7
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
SETV d2,1
STORED d2,4
LOADD d2,6
ADDV d2,1
STORED d2,6; if() #584 Body End
LOADD d2,6; for() #153 setup
ADDV d2,1
STORED d2,6
LOADD d2,8; for() #153 LoopTest
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
COMPAREV d2,48
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 618
LOADD d2,8
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
COMPAREV d2,57
SETCMP d2,0.0014
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 642; for() #153 TestFail?
LOADD d2,8; for() #153 Body Start
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,4
ADDV d2,1
STORED d2,4; for() #153 Body End
LOADD d2,6; for() #153 LoopIncrement
ADDV d2,1
STORED d2,6
GOTO 602; for() #153 End
SETV d2,0
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,7; InlineFunc[int atoi(int)] Params Start
SETR d3,d2; InlineFunc[int atoi(int)] Params End
ATOI d2,d3; InlineFunc[int atoi(int)] Body
PUSHR d2
LOADD d2,9
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
LOADD d2,6
SUBV d2,1
STORED d2,6; if() #583 Body End
LOADD d2,6; if() #345 Else End AND if() #581 Body End AND for() #151 Body End AND for() #151 LoopIncrement
ADDV d2,1
STORED d2,6
GOTO 440; for() #151 End
LOADD d2,9; if() #586 Test AND unless(false) #585 [Opt:AlwaysOn]
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 716; Test 'if'
ALLOCATEMEMV d2,54; if() #586 Body Start
STORED d2,5
WRITEPODSTRING d2,"ghost.zh: AutoGhost setup failed - script not found.\n"
ALLOCATEMEMV d2,80
STORED d2,3
WRITEPODSTRING d2,"  Enemy name: %s\n"
ALLOCATEMEMV d2,55
STORED d2,1
WRITEPODSTRING d2,"  Script name should start after this character: %c\n"
LOADD d2,5; InlineFunc[void printf(char32)] Params Start
PUSHR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,3; InlineFunc[void printf(char32)] Params Start
PUSHR d2
LOADD d2,8
PUSHVARGR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,1; InlineFunc[void printf(char32)] Params Start
PUSHR d2
PUSHVARGV 64; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
SETV d2,0; return Start
LOADD d3,1
DEALLOCATEMEMR d3
LOADD d3,3
DEALLOCATEMEMR d3
LOADD d3,5
DEALLOCATEMEMR d3
LOADD d3,7
DEALLOCATEMEMR d3
LOADD d3,8
DEALLOCATEMEMR d3
GOTO 726; return End
LOADD d3,1
DEALLOCATEMEMR d3
LOADD d3,3
DEALLOCATEMEMR d3
LOADD d3,5
DEALLOCATEMEMR d3; if() #586 Body End
SETV d2,1; return Start
LOADD d3,7
DEALLOCATEMEMR d3
LOADD d3,8
DEALLOCATEMEMR d3
GOTO 726; return End
LOADD d3,7
DEALLOCATEMEMR d3
LOADD d3,8
DEALLOCATEMEMR d3
POPARGS d5,0.0011
RETURNFUNC; Func[int __AutoGhostParseName(NPC, int)] Body End
SETR d4,SP; Func[void __AutoGhostKill(NPC)] Body Start
SETV d2,65536
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2
SETV d2,1024
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETV d2,1024
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETV d2,-1000
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHP,d2
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCITEMSET,d2
POP d5
RETURNFUNC; Func[void __AutoGhostKill(NPC)] Body End
PUSHARGSV 0,0.0002; Func[int FindUnusedFFC(int)] Body Start
SETR d4,SP
STOREDV 0,1
LOADD d2,2; InlineFunc[untyped Max(untyped, untyped)] Params Start AND for() #43 setup
ADDV d2,1
PUSHVARGR d2
PUSHVARGV 1; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
STORED d2,0
LOADD d2,0; for() #43 LoopTest
COMPAREV d2,32
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 834; for() #43 TestFail?
LOADD d2,0; InlineFunc[FFC Screen->LoadFFC(int)] Params AND for() #43 Body Start
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,1; if() #175 Test
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 810
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 830; Test 'if'
LOADD d2,1; unless() #176 Test AND if() #175 Body Start
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
COMPAREV d2,0
GOTOFALSE 830; Test 'unless'
LOADD d2,1; unless() #177 Test AND unless() #176 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOFALSE 830; Test 'unless'
LOADD d2,0; return Start AND unless() #177 Body Start
GOTO 835; return End AND unless() #177 Body End
LOADD d2,0; unless() #176 Body End AND if() #175 Body End AND for() #43 Body End AND for() #43 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 788; for() #43 End
SETV d2,0; return Start
POPARGS d5,0.0003; return End
RETURNFUNC; Func[int FindUnusedFFC(int)] Body End
SETR d4,SP; Func[int CenterX(EWeapon)] Body Start
LOADD d2,0; return Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
POP d5; return End
RETURNFUNC; Func[int CenterX(EWeapon)] Body End
SETR d4,SP; Func[int CenterY(EWeapon)] Body Start
LOADD d2,0; return Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
POP d5; return End
RETURNFUNC; Func[int CenterY(EWeapon)] Body End
PUSHARGSV 0,0.0002; Func[void CleanUpGhostFFCs()] Body Start
SETR d4,SP
SETR d2,LINKHP; if() #86 Test
COMPAREV d2,0
SETCMP d2,0.0014
SETV d2,0
COMPAREV d2,0
GOTOTRUE 938; Test 'if'
STOREDV 0,1; if() #86 Body Start
STOREDV 1,0; for() #3 setup
LOADD d2,0; for() #3 LoopTest
COMPAREV d2,32
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 938; for() #3 TestFail?
LOADD d2,0; InlineFunc[FFC Screen->LoadFFC(int)] Params AND for() #3 Body Start
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,1
SETR d2,gd25; if() #87 Test
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
RSHIFTV d2,4
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
ANDV d2,15
SETV d3,1
LSHIFTR d3,d2
SETR d2,d3
POP d3
ANDR d2,d3
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 934; Test 'if'
SETV d2,0; if() #87 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #87 Body End
LOADD d2,0; for() #3 Body End AND for() #3 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 893; for() #3 End
POPARGS d5,0.0002; if() #86 Body End
RETURNFUNC; Func[void CleanUpGhostFFCs()] Body End
PUSHARGSV 0,0.0002; Func[void DrawEWeaponShadow(EWeapon)] Body Start
SETR d4,SP
PUSHR d4
LOADD d2,2; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0837; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNXOFS
POP d3
ADDR d2,d3
STORED d2,1
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
SUBV d2,1
MULTV d2,16
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNYOFS
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNZOFS
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,0
PUSHV 1; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #35 [Opt:AlwaysOn]
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,2
ADDV d2,27400
PUSHR d2
PUSHARGSV 1,0.0002
PUSHV 7
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0004
PUSHV 1
PUSHV 64; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS d5,0.0003
RETURNFUNC; Func[void DrawEWeaponShadow(EWeapon)] Body End
PUSHARGSV 0,0.0009; Func[void DrawGhostFFCs()] Body Start
SETR d4,SP
SETV d2,1; if() #125 Test
PUSHR d2
POP d0
SETR d2,SCREENEFLAGSD
ANDV d2,4
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1023; Test 'if'
PUSHR d4; unless() #126 Test AND if() #125 Body Start
CALLFUNC 0.1213; UsrFunc[bool __HaveAmulet()] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1023; Test 'unless'
GOTO 1211; return (Void) AND unless() #126 Body
STOREDV 0,8; if() #125 Body End
STOREDV 0,7
STOREDV 0,6
STOREDV 0,5
STOREDV 0,4
STOREDV 0,3
STOREDV 0,2
SETV d2,1; if() #37 Test AND if(true) #36 [Opt:AlwaysOn]
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,16
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1042; Test 'if'
SETV d2,1; if() #37 Body Start
STORED d2,3
GOTO 1044; if() #37 Body End
SETV d2,2; if() #37 Else Start
STORED d2,3; if() #37 Else End
SETV d2,4
STORED d2,2
STOREDV 1,1; for() #20 setup
LOADD d2,1; for() #20 LoopTest
PUSHR d2
SETR d2,NPCCOUNT; InlineFunc[int Screen->NumNPCs()] Body
POP d3
COMPARER d3,d2
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 1211; for() #20 TestFail?
LOADD d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Params AND for() #20 Body Start
SUBV d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Body Start
LOADNPCR d2
SETR d2,REFNPC; InlineFunc[NPC Screen->LoadNPC(int)] Body End
STORED d2,6
PUSHR d4
LOADD d2,6; UsrFunc[int __GetDrawingArray(NPC)] Params Start
PUSHR d2; UsrFunc[int __GetDrawingArray(NPC)] Params End
CALLFUNC 0.1232; UsrFunc[int __GetDrawingArray(NPC)] Call
POP d4
STORED d2,8; if() #127 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1071; Test 'if'
GOTO 1207; continue 1; AND if() #127 Body
SETR d2,gd27; if() #128 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1090; Test 'if'
LOADD d2,8; if() #129 Test AND if() #128 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,2
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1090; Test 'if'
GOTO 1207; continue 1; AND if() #129 Body
LOADD d2,8; if() #128 Body End AND if() #38 Test
PUSHR d2
POP d0
READPODARRAYV d2,2
ANDV d2,1
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1102; Test 'if'
SETV d2,64; if() #38 Body Start
STORED d2,5
GOTO 1104; if() #38 Body End
SETV d2,128; if() #38 Else Start
STORED d2,5; if() #38 Else End
LOADD d2,8; if() #39 Test
PUSHR d2
POP d0
READPODARRAYV d2,2
ANDV d2,4
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1116; Test 'if'
LOADD d2,2; if() #39 Body Start
STORED d2,4
GOTO 1118; if() #39 Body End
LOADD d2,3; if() #39 Else Start
STORED d2,4; if() #39 Else End
SETV d2,3
STORED d2,7
STOREDV 0,0; for() #21 setup
LOADD d2,0; for() #21 LoopTest
PUSHR d2
LOADD d2,8
PUSHR d2
POP d0
READPODARRAYV d2,0
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1207; for() #21 TestFail?
LOADD d2,8; if() #130 Test AND for() #21 Body Start
PUSHR d2
LOADD d2,7
POP d0
READPODARRAYR d2,d2
COMPAREV d2,1
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1148
LOADD d2,8
PUSHR d2
LOADD d2,7
POP d0
READPODARRAYR d2,d2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1200; Test 'if'
LOADD d2,4; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #130 Body Start
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
ADDV d2,1
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
ADDV d2,2
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
ADDV d2,3
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
ADDV d2,4
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
POP d0
READPODARRAYV d2,1
PUSHR d2
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0005
PUSHV 1
LOADD d2,5
PUSHR d2; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBO; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0016; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #130 Body End
LOADD d2,7
ADDV d2,6
STORED d2,7; for() #21 Body End
LOADD d2,0; for() #21 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 1121; for() #21 End
LOADD d2,1; for() #20 Body End AND for() #20 LoopIncrement
ADDV d2,1
STORED d2,1
GOTO 1047; for() #20 End
POPARGS d5,0.0009
RETURNFUNC; Func[void DrawGhostFFCs()] Body End
SETR d4,SP; Func[bool __HaveAmulet()] Body Start
SETV d2,50; if() #688 Test
PUSHR d2
POP d0
SETR d2,LINKITEMD
COMPAREV d2,0
GOTOTRUE 1222; Test 'if'
SETV d2,1; return Start AND if() #688 Body Start
GOTO 1231; return End AND if() #688 Body End
SETV d2,63; if() #689 Test
PUSHR d2
POP d0
SETR d2,LINKITEMD
COMPAREV d2,0
GOTOTRUE 1230; Test 'if'
SETV d2,1; return Start AND if() #689 Body Start
GOTO 1231; return End AND if() #689 Body End
SETV d2,0; return Start
RETURNFUNC; return End AND Func[bool __HaveAmulet()] Body End
PUSHV 0; Func[int __GetDrawingArray(NPC)] Body Start
SETR d4,SP
LOADD d2,1; if() #599 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65536
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1248; Test 'if'
SETV d2,0; return Start AND if() #599 Body Start
GOTO 1268; return End AND if() #599 Body End
LOADD d2,1
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65535
STORED d2,0; if() #600 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1263; Test 'if'
SETV d2,0; return Start AND if() #600 Body Start
GOTO 1268; return End AND if() #600 Body End
LOADD d2,0
PUSHR d2
POP d0
READPODARRAYV d2,23
STORED d2,0; return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int __GetDrawingArray(NPC)] Body End
PUSHARGSV 0,0.0002; Func[int FindUnusedFFC()] Body Start
SETR d4,SP
STOREDV 0,1
STOREDV 1,0; for() #42 setup
LOADD d2,0; for() #42 LoopTest
COMPAREV d2,33
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1320; for() #42 TestFail?
LOADD d2,0; InlineFunc[FFC Screen->LoadFFC(int)] Params AND for() #42 Body Start
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,1; if() #172 Test
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 1296
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1316; Test 'if'
LOADD d2,1; unless() #173 Test AND if() #172 Body Start
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
COMPAREV d2,0
GOTOFALSE 1316; Test 'unless'
LOADD d2,1; unless() #174 Test AND unless() #173 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOFALSE 1316; Test 'unless'
LOADD d2,0; return Start AND unless() #174 Body Start
GOTO 1321; return End AND unless() #174 Body End
LOADD d2,0; unless() #173 Body End AND if() #172 Body End AND for() #42 Body End AND for() #42 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 1274; for() #42 End
SETV d2,0; return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int FindUnusedFFC()] Body End
PUSHV 0; Func[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body Start
SETR d4,SP
LOADD d2,3; if() #198 Test
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1336; Test 'if'
PUSHR d4; if() #198 Body Start
LOADD d2,9; UsrFunc[int GetDefaultEWeaponSprite(int)] Params Start
PUSHR d2; UsrFunc[int GetDefaultEWeaponSprite(int)] Params End
CALLFUNC 0.1482; UsrFunc[int GetDefaultEWeaponSprite(int)] Call
POP d4
STORED d2,3; if() #198 Body End
LOADD d2,2; if() #199 Test
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1347; Test 'if'
PUSHR d4; if() #199 Body Start
LOADD d2,9; UsrFunc[int GetDefaultEWeaponSound(int)] Params Start
PUSHR d2; UsrFunc[int GetDefaultEWeaponSound(int)] Params End
CALLFUNC 0.1646; UsrFunc[int GetDefaultEWeaponSound(int)] Call
POP d4
STORED d2,2; if() #199 Body End
LOADD d2,9; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Params
CREATEEWEAPONR d2; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body Start
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body End
STORED d2,0
LOADD d2,8
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,7
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
LOADD d2,5
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOADD d2,4
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNPOWER,d2
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNANGULAR,d2
LOADD d2,1; if() #51 Test
ANDV d2,1
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1417; Test 'if'
PUSHR d4; if() #51 Body Start
LOADD d2,6; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR d2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.1991; UsrFunc[int __UnblockableDir(int)] Call
POP d4
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDIR,d2
GOTO 1426; if() #51 Body End
LOADD d2,6; if() #51 Else Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDIR,d2; if() #51 Else End
LOADD d2,3; if() #200 Test
COMPAREV d2,0
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 1437; Test 'if'
LOADD d2,0; InlineFunc[void EWeapon->UseSprite(int)] Params Start AND if() #200 Body Start
PUSHR d2
LOADD d2,3; InlineFunc[void EWeapon->UseSprite(int)] Params End
POP d3; InlineFunc[void EWeapon->UseSprite(int)] Body Start
SETR REFEWPN,d3
EWPNUSESPRITER d2; InlineFunc[void EWeapon->UseSprite(int)] Body End AND if() #200 Body End
LOADD d2,1; if() #201 Test
ANDV d2,32
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1453; Test 'if'
SETV d2,0; if() #201 Body Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNCOLLDET,d2; if() #201 Body End
LOADD d2,1; if() #202 Test
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1464; Test 'if'
PUSHR d4; if() #202 Body Start
LOADD d2,0; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1817; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #202 Body End
LOADD d2,1
ORV d2,512
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,2; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
LOADD d2,0; return Start
POPARGS d5,0.0010; return End
RETURNFUNC; Func[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0,0.0003; Func[int GetDefaultEWeaponSprite(int)] Body Start
SETR d4,SP
LOADD d2,3; if() #58 Test
COMPAREV d2,129
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 1493
LOADD d2,3
COMPAREV d2,145
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1498; Test 'if'
SETV d2,17; return Start AND if() #58 Body Start
GOTO 1644; return End AND if() #58 Body End
LOADD d2,3; if() #59 Test AND if() #58 Else Start
COMPAREV d2,133
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1505; Test 'if'
SETV d2,18; return Start AND if() #59 Body Start
GOTO 1644; return End AND if() #59 Body End
LOADD d2,3; if() #60 Test AND if() #59 Else Start
COMPAREV d2,130
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1512; Test 'if'
SETV d2,19; return Start AND if() #60 Body Start
GOTO 1644; return End AND if() #60 Body End
LOADD d2,3; if() #61 Test AND if() #60 Else Start
COMPAREV d2,140
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1519; Test 'if'
SETV d2,35; return Start AND if() #61 Body Start
GOTO 1644; return End AND if() #61 Body End
LOADD d2,3; if() #62 Test AND if() #61 Else Start
COMPAREV d2,142
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1526; Test 'if'
SETV d2,81; return Start AND if() #62 Body Start
GOTO 1644; return End AND if() #62 Body End
LOADD d2,3; if() #63 Test AND if() #62 Else Start
COMPAREV d2,139
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1533; Test 'if'
SETV d2,80; return Start AND if() #63 Body Start
GOTO 1644; return End AND if() #63 Body End
LOADD d2,3; if() #64 Test AND if() #63 Else Start
COMPAREV d2,134
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1540; Test 'if'
SETV d2,21; return Start AND if() #64 Body Start
GOTO 1644; return End AND if() #64 Body End
LOADD d2,3; if() #65 Test AND if() #64 Else Start
COMPAREV d2,132
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1547; Test 'if'
SETV d2,20; return Start AND if() #65 Body Start
GOTO 1644; return End AND if() #65 Body End
LOADD d2,3; if() #66 Test AND if() #65 Else Start
COMPAREV d2,141
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1554; Test 'if'
SETV d2,36; return Start AND if() #66 Body Start
GOTO 1644; return End AND if() #66 Body End
LOADD d2,3; if() #67 Test AND if() #66 Else Start
COMPAREV d2,137
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1561; Test 'if'
SETV d2,76; return Start AND if() #67 Body Start
GOTO 1644; return End AND if() #67 Body End
LOADD d2,3; if() #68 Test AND if() #67 Else Start
COMPAREV d2,138
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1568; Test 'if'
SETV d2,77; return Start AND if() #68 Body Start
GOTO 1644; return End AND if() #68 Body End
LOADD d2,3; if() #69 Test AND if() #68 Else Start
COMPAREV d2,131
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1643; Test 'if'
STOREDV 0,2; if() #69 Body Start
STOREDV 0,1
STOREDV 0,0; for() #48 setup
LOADD d2,0; for() #48 LoopTest
COMPAREV d2,256
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1625; for() #48 TestFail?
LOADD d2,0; unless() #211 Test AND for() #48 Body Start
PUSHR d2
POP d0
SETR d2,LINKITEMD
COMPAREV d2,0
GOTOFALSE 1588; Test 'unless'
GOTO 1621; continue 1; AND unless() #211 Body
LOADD d2,0; InlineFunc[ItemData Game->LoadItemData(int)] Params
LOADITEMDATAR d2; InlineFunc[ItemData Game->LoadItemData(int)] Body Start
SETR d2,REFITEMCLASS; InlineFunc[ItemData Game->LoadItemData(int)] Body End
STORED d2,1; if() #212 Test
PUSHR d2
POP REFITEMCLASS
SETR d2,IDATAFAMILY
COMPAREV d2,1
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1600; Test 'if'
GOTO 1621; continue 1; AND if() #212 Body
LOADD d2,1; if() #213 Test
PUSHR d2
POP REFITEMCLASS
SETR d2,IDATALEVEL
PUSHR d2
LOADD d2,2
POP d3
COMPARER d3,d2
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 1621; Test 'if'
LOADD d2,1; if() #213 Body Start
PUSHR d2
POP REFITEMCLASS
SETR d2,IDATALEVEL
STORED d2,2; if() #214 Test
COMPAREV d2,3
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 1621; Test 'if'
GOTO 1625; break 1; AND if() #214 Body
LOADD d2,0; if() #213 Body End AND for() #48 Body End AND for() #48 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 1576; for() #48 End
LOADD d2,2; if() #70 Test
COMPAREV d2,1
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 1633; Test 'if'
SETV d2,4; return Start AND if() #70 Body Start
GOTO 1644; return End
GOTO 1642; if() #70 Body End
LOADD d2,2; if() #71 Test AND if() #70 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1641; Test 'if'
SETV d2,5; return Start AND if() #71 Body Start
GOTO 1644; return End
GOTO 1642; if() #71 Body End
SETV d2,6; return Start AND if() #71 Else Start
GOTO 1644; return End AND if() #71 Else End AND if() #70 Else End AND if() #69 Body End
SETV d2,0; return Start AND if() #69 Else Start
POPARGS d5,0.0004; return End AND if() #69 Else End AND if() #68 Else End AND if() #67 Else End AND if() #66 Else End AND if() #65 Else End AND if() #64 Else End AND if() #63 Else End AND if() #62 Else End AND if() #61 Else End AND if() #60 Else End AND if() #59 Else End AND if() #58 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSprite(int)] Body End
SETR d4,SP; Func[int GetDefaultEWeaponSound(int)] Body Start
LOADD d2,0; if() #54 Test
COMPAREV d2,129
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 1656
LOADD d2,0
COMPAREV d2,145
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1661; Test 'if'
SETV d2,40; return Start AND if() #54 Body Start
GOTO 1704; return End AND if() #54 Body End
LOADD d2,0; if() #55 Test AND if() #54 Else Start
COMPAREV d2,134
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 1670
LOADD d2,0
COMPAREV d2,141
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1675; Test 'if'
SETV d2,32; return Start AND if() #55 Body Start
GOTO 1704; return End AND if() #55 Body End
LOADD d2,0; if() #56 Test AND if() #55 Else Start
COMPAREV d2,140
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 1684
LOADD d2,0
COMPAREV d2,142
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 1691
LOADD d2,0
COMPAREV d2,139
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1696; Test 'if'
SETV d2,13; return Start AND if() #56 Body Start
GOTO 1704; return End AND if() #56 Body End
LOADD d2,0; if() #57 Test AND if() #56 Else Start
COMPAREV d2,133
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1703; Test 'if'
SETV d2,51; return Start AND if() #57 Body Start
GOTO 1704; return End AND if() #57 Body End
SETV d2,0; return Start AND if() #57 Else Start
POP d5; return End AND if() #57 Else End AND if() #56 Else End AND if() #55 Else End AND if() #54 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSound(int)] Body End
PUSHARGSV 0,0.0002; Func[void SetEWeaponDir(EWeapon)] Body Start
SETR d4,SP
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
MODV d2,6.2832
STORED d2,1
STOREDV 0,0
LOADD d2,1; if() #515 Test
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1723; Test 'if'
LOADD d2,1; if() #515 Body Start
ADDV d2,6.2832
STORED d2,1; if() #515 Body End
LOADD d2,1; if() #243 Test
COMPAREV d2,0.3927
SETCMP d2,0.0010
COMPAREV d2,0
GOTOFALSE 1732
LOADD d2,1
COMPAREV d2,5.8905
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1738; Test 'if'
SETV d2,3; if() #243 Body Start
STORED d2,0
GOTO 1788; if() #243 Body End
LOADD d2,1; if() #244 Test AND if() #243 Else Start
COMPAREV d2,1.1781
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1746; Test 'if'
SETV d2,7; if() #244 Body Start
STORED d2,0
GOTO 1788; if() #244 Body End
LOADD d2,1; if() #245 Test AND if() #244 Else Start
COMPAREV d2,1.9635
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1754; Test 'if'
SETV d2,1; if() #245 Body Start
STORED d2,0
GOTO 1788; if() #245 Body End
LOADD d2,1; if() #246 Test AND if() #245 Else Start
COMPAREV d2,2.7489
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1762; Test 'if'
SETV d2,6; if() #246 Body Start
STORED d2,0
GOTO 1788; if() #246 Body End
LOADD d2,1; if() #247 Test AND if() #246 Else Start
COMPAREV d2,3.5343
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1770; Test 'if'
SETV d2,2; if() #247 Body Start
STORED d2,0
GOTO 1788; if() #247 Body End
LOADD d2,1; if() #248 Test AND if() #247 Else Start
COMPAREV d2,4.3197
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1778; Test 'if'
SETV d2,4; if() #248 Body Start
STORED d2,0
GOTO 1788; if() #248 Body End
LOADD d2,1; if() #249 Test AND if() #248 Else Start
COMPAREV d2,5.1051
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1786; Test 'if'
SETV d2,0; if() #249 Body Start
STORED d2,0
GOTO 1788; if() #249 Body End
SETV d2,5; if() #249 Else Start
STORED d2,0; if() #249 Else End
LOADD d2,2; if() #248 Else End AND if() #247 Else End AND if() #246 Else End AND if() #245 Else End AND if() #244 Else End AND if() #243 Else End AND if() #516 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1806; Test 'if'
PUSHR d4; if() #516 Body Start
LOADD d2,0; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR d2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.1991; UsrFunc[int __UnblockableDir(int)] Call
POP d4
STORED d2,0; if() #516 Body End
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDIR,d2
POPARGS d5,0.0003
RETURNFUNC; Func[void SetEWeaponDir(EWeapon)] Body End
PUSHV 0; Func[void SetEWeaponRotation(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1; if() #267 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOTRUE 1900; Test 'if'
LOADD d2,1; if() #267 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
MODV d2,6.2832
STORED d2,0; if() #521 Test
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1838; Test 'if'
LOADD d2,0; if() #521 Body Start
ADDV d2,6.2832
STORED d2,0; if() #521 Body End
LOADD d2,0; if() #268 Test
COMPAREV d2,0.7854
SETCMP d2,0.0010
COMPAREV d2,0
GOTOFALSE 1847
LOADD d2,0
COMPAREV d2,5.4978
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1860; Test 'if'
SETV d2,4; if() #268 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 1899; if() #268 Body End
LOADD d2,0; if() #269 Test AND if() #268 Else Start
COMPAREV d2,2.3562
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 1875; Test 'if'
SETV d2,3; if() #269 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 1899; if() #269 Body End
LOADD d2,0; if() #270 Test AND if() #269 Else Start
COMPAREV d2,3.9270
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1890; Test 'if'
SETV d2,7; if() #270 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 1899; if() #270 Body End
SETV d2,0; if() #270 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2; if() #270 Else End
GOTO 1989; if() #269 Else End AND if() #268 Else End AND if() #267 Body End
PUSHR d4; if() #267 Else Start
LOADD d2,1; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2051; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,0; if() #271 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 1916
LOADD d2,0
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 1923
LOADD d2,0
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1936; Test 'if'
SETV d2,0; if() #271 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 1989; if() #271 Body End
LOADD d2,0; if() #272 Test AND if() #271 Else Start
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 1945
LOADD d2,0
COMPAREV d2,7
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 1952
LOADD d2,0
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1965; Test 'if'
SETV d2,3; if() #272 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 1989; if() #272 Body End
LOADD d2,0; if() #273 Test AND if() #272 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1980; Test 'if'
SETV d2,7; if() #273 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 1989; if() #273 Body End
SETV d2,4; if() #273 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2; if() #273 Else End
POPARGS d5,0.0002; if() #272 Else End AND if() #271 Else End AND if() #267 Else End
RETURNFUNC; Func[void SetEWeaponRotation(EWeapon)] Body End
SETR d4,SP; Func[int __UnblockableDir(int)] Body Start
LOADD d2,0; if() #712 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1999; Test 'if'
SETV d2,8; return Start AND if() #712 Body Start
GOTO 2049; return End AND if() #712 Body End
LOADD d2,0; if() #713 Test
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2006; Test 'if'
SETV d2,12; return Start AND if() #713 Body Start
GOTO 2049; return End AND if() #713 Body End
LOADD d2,0; if() #714 Test
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2013; Test 'if'
SETV d2,14; return Start AND if() #714 Body Start
GOTO 2049; return End AND if() #714 Body End
LOADD d2,0; if() #715 Test
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2020; Test 'if'
SETV d2,10; return Start AND if() #715 Body Start
GOTO 2049; return End AND if() #715 Body End
LOADD d2,0; if() #716 Test
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2027; Test 'if'
SETV d2,15; return Start AND if() #716 Body Start
GOTO 2049; return End AND if() #716 Body End
LOADD d2,0; if() #717 Test
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2034; Test 'if'
SETV d2,9; return Start AND if() #717 Body Start
GOTO 2049; return End AND if() #717 Body End
LOADD d2,0; if() #718 Test
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2041; Test 'if'
SETV d2,13; return Start AND if() #718 Body Start
GOTO 2049; return End AND if() #718 Body End
LOADD d2,0; if() #719 Test
COMPAREV d2,7
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2048; Test 'if'
SETV d2,11; return Start AND if() #719 Body Start
GOTO 2049; return End AND if() #719 Body End
LOADD d2,0; return Start
POP d5; return End
RETURNFUNC; Func[int __UnblockableDir(int)] Body End
SETR d4,SP; Func[int __NormalizeDir(int)] Body Start
LOADD d2,0; if() #698 Test
COMPAREV d2,0
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 2060
LOADD d2,0
COMPAREV d2,7
SETCMP d2,0.0014
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 2066; Test 'if'
LOADD d2,0; return Start AND if() #698 Body Start
GOTO 2123; return End AND if() #698 Body End
LOADD d2,0; if() #699 Test
COMPAREV d2,8
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2073; Test 'if'
SETV d2,0; return Start AND if() #699 Body Start
GOTO 2123; return End AND if() #699 Body End
LOADD d2,0; if() #700 Test
COMPAREV d2,9
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2080; Test 'if'
SETV d2,5; return Start AND if() #700 Body Start
GOTO 2123; return End AND if() #700 Body End
LOADD d2,0; if() #701 Test
COMPAREV d2,10
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2087; Test 'if'
SETV d2,3; return Start AND if() #701 Body Start
GOTO 2123; return End AND if() #701 Body End
LOADD d2,0; if() #702 Test
COMPAREV d2,11
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2094; Test 'if'
SETV d2,7; return Start AND if() #702 Body Start
GOTO 2123; return End AND if() #702 Body End
LOADD d2,0; if() #703 Test
COMPAREV d2,12
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2101; Test 'if'
SETV d2,1; return Start AND if() #703 Body Start
GOTO 2123; return End AND if() #703 Body End
LOADD d2,0; if() #704 Test
COMPAREV d2,13
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2108; Test 'if'
SETV d2,6; return Start AND if() #704 Body Start
GOTO 2123; return End AND if() #704 Body End
LOADD d2,0; if() #705 Test
COMPAREV d2,14
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2115; Test 'if'
SETV d2,2; return Start AND if() #705 Body Start
GOTO 2123; return End AND if() #705 Body End
LOADD d2,0; if() #706 Test
COMPAREV d2,15
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2122; Test 'if'
SETV d2,4; return Start AND if() #706 Body Start
GOTO 2123; return End AND if() #706 Body End
SETV d2,0; return Start
POP d5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
SETR d4,SP; Func[bool IsSideview()] Body Start
SETV d2,0; return Start
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,4
PUSHR d2
SETR d2,CURDMAP; InlineFunc[DMapData Game->LoadDMapData(int)] Params
LOADDMAPDATAR d2; InlineFunc[DMapData Game->LoadDMapData(int)] Body Start
SETR d2,REFDMAPDATA; InlineFunc[DMapData Game->LoadDMapData(int)] Body End
PUSHR d2
POP REFDMAPDATA
SETR d2,DMAPDATASIDEVIEW
POP d3
CASTBOOLF d2
CASTBOOLF d3
COMPARER d3,d2
SETCMP d2,0.0011
RETURNFUNC; return End AND Func[bool IsSideview()] Body End
SETR d4,SP; Func[void InitializeGhostZHData()] Body Start
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 2,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 3,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 4,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 5,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2
RETURNFUNC; Func[void InitializeGhostZHData()] Body End
SETR d4,SP; Func[void KillEWeapon(EWeapon)] Body Start
LOADD d2,0
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ORV d2,128
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d5
RETURNFUNC; Func[void KillEWeapon(EWeapon)] Body End
PUSHARGSV 0,0.0005; Func[int __GetEWeaponThrowHeight(EWeapon)] Body Start
SETR d4,SP
LOADD d2,5
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
STORED d2,4; if() #601 Test
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 2224; Test 'if'
SETV d2,1; return Start AND if() #601 Body Start
GOTO 2317; return End AND if() #601 Body End
PUSHR d4
LOADD d2,5; Int.Func[int Distance(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,5
PUSHR d2
POP REFEWPN
SETR d2,EWPNHXSZ
DIVV d2,2
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,5
PUSHR d2
POP REFEWPN
SETR d2,EWPNHYSZ
DIVV d2,2
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,LINKX
ADDV d2,8
PUSHR d2
SETR d2,LINKY
ADDV d2,8
PUSHR d2; Int.Func[int Distance(int, int, int, int)] Params End
CALLFUNC 0.0015; Int.Func[int Distance(int, int, int, int)] Call
POP d4
STORED d2,3; if() #602 Test
COMPAREV d2,1
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 2266; Test 'if'
SETV d2,1; return Start AND if() #602 Body Start
GOTO 2317; return End AND if() #602 Body End
LOADD d2,3
PUSHR d2
LOADD d2,4
POP d3
DIVR d3,d2
SETR d2,d3
STORED d2,2
STOREDV 0,1
LOADD d2,1; while() #5 Test
COMPAREV d2,3.2000
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 2292; Test 'while'
LOADD d2,1; while() #5 Body Start
ADDV d2,0.1600
STORED d2,1
LOADD d2,2
SUBV d2,2
STORED d2,2; if() #603 Test
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 2291; Test 'if'
LOADD d2,1; return Start AND if() #603 Body Start
GOTO 2317; return End AND if() #603 Body End
GOTO 2274; while() #5 Body End AND while() #5 End
STOREDV 0,0
LOADD d2,2; while() #6 Test
PUSHR d2
LOADD d2,0
DIVV d2,3.2000
POP d3
COMPARER d3,d2
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 2316; Test 'while'
LOADD d2,1; while() #6 Body Start
ADDV d2,0.1600
STORED d2,1
LOADD d2,0
PUSHR d2
LOADD d2,1
SUBV d2,3.2000
POP d3
ADDR d2,d3
STORED d2,0
LOADD d2,2
SUBV d2,2
STORED d2,2; while() #6 Body End
GOTO 2293; while() #6 End
LOADD d2,1; return Start
POPARGS d5,0.0006; return End
RETURNFUNC; Func[int __GetEWeaponThrowHeight(EWeapon)] Body End
SETR d4,SP; Func[void SetEWeaponRotation(EWeapon, int)] Body Start
PUSHR d4
LOADD d2,0; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2051; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,0; if() #274 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 2334
LOADD d2,0
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 2341
LOADD d2,0
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 2354; Test 'if'
SETV d2,0; if() #274 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2407; if() #274 Body End
LOADD d2,0; if() #275 Test AND if() #274 Else Start
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 2363
LOADD d2,0
COMPAREV d2,7
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 2370
LOADD d2,0
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 2383; Test 'if'
SETV d2,3; if() #275 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2407; if() #275 Body End
LOADD d2,0; if() #276 Test AND if() #275 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2398; Test 'if'
SETV d2,7; if() #276 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2407; if() #276 Body End
SETV d2,4; if() #276 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2; if() #276 Else End
POPARGS d5,0.0002; if() #275 Else End AND if() #274 Else End
RETURNFUNC; Func[void SetEWeaponRotation(EWeapon, int)] Body End
SETR d4,SP; Func[int Sign(int)] Body Start
LOADD d2,0; if() #292 Test
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 2417; Test 'if'
SETV d2,1; return Start AND if() #292 Body Start
GOTO 2425; return End AND if() #292 Body End
LOADD d2,0; if() #293 Test AND if() #292 Else Start
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 2424; Test 'if'
SETV d2,-1; return Start AND if() #293 Body Start
GOTO 2425; return End AND if() #293 Body End
SETV d2,0; return Start AND if() #293 Else Start
POP d5; return End AND if() #293 Else End AND if() #292 Else End
RETURNFUNC; Func[int Sign(int)] Body End
SETR d4,SP; Func[void StartGhostZH()] Body Start
PUSHR d4
CALLFUNC 0.2144; UsrFunc[void InitializeGhostZHData()] Call
POP d4
RETURNFUNC; Func[void StartGhostZH()] Body End
PUSHARGSV 0,0.0007; Func[void UpdateEWeapon(EWeapon)] Body Start
SETR d4,SP
SETR d2,gd27; if() #552 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 2444; Test 'if'
GOTO 3573; return (Void) AND if() #552 Body
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
STORED d2,6
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
STORED d2,5
STOREDV 1,4
LOADD d2,7; if() #302 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,128
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2841; Test 'if'
LOADD d2,7; if() #553 Test AND if() #302 Body Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 2690; Test 'if'
LOADD d2,7; if() #303 Test AND if() #553 Body Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,6
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 2563; Test 'if'
LOADD d2,7; if() #304 Test AND if() #303 Body Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2506; Test 'if'
PUSHR d4; if() #304 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMSineWave(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMSineWave(EWeapon)] Params End
CALLFUNC 0.3575; UsrFunc[void __UpdateEWMSineWave(EWeapon)] Call
POP d4
GOTO 2562; if() #304 Body End
LOADD d2,7; if() #305 Test AND if() #304 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2523; Test 'if'
PUSHR d4; if() #305 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMHoming(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMHoming(EWeapon)] Params End
CALLFUNC 0.3757; UsrFunc[void __UpdateEWMHoming(EWeapon)] Call
POP d4
GOTO 2562; if() #305 Body End
LOADD d2,7; if() #306 Test AND if() #305 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2540; Test 'if'
PUSHR d4; if() #306 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMHomingReaim(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMHomingReaim(EWeapon)] Params End
CALLFUNC 0.3961; UsrFunc[void __UpdateEWMHomingReaim(EWeapon)] Call
POP d4
GOTO 2562; if() #306 Body End
LOADD d2,7; if() #307 Test AND if() #306 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2557; Test 'if'
PUSHR d4; if() #307 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMRandom(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMRandom(EWeapon)] Params End
CALLFUNC 0.4295; UsrFunc[void __UpdateEWMRandom(EWeapon)] Call
POP d4
GOTO 2562; if() #307 Body End
PUSHR d4; if() #307 Else Start
LOADD d2,7; UsrFunc[void __UpdateEWMRandomReaim(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMRandomReaim(EWeapon)] Params End
CALLFUNC 0.4415; UsrFunc[void __UpdateEWMRandomReaim(EWeapon)] Call
POP d4; if() #307 Else End
GOTO 2690; if() #306 Else End AND if() #305 Else End AND if() #304 Else End AND if() #303 Body End
LOADD d2,7; if() #308 Test AND if() #303 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,7
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2598; Test 'if'
LOADD d2,7; if() #308 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,6
LOADD d2,7
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,5
PUSHR d4
LOADD d2,7; UsrFunc[void __UpdateEWMVeer(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMVeer(EWeapon)] Params End
CALLFUNC 0.4726; UsrFunc[void __UpdateEWMVeer(EWeapon)] Call
POP d4
SETV d2,0
STORED d2,4
GOTO 2690; if() #308 Body End
LOADD d2,7; if() #309 Test AND if() #308 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,15
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2615; Test 'if'
PUSHR d4; if() #309 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMThrow(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMThrow(EWeapon)] Params End
CALLFUNC 0.5258; UsrFunc[void __UpdateEWMThrow(EWeapon)] Call
POP d4
GOTO 2690; if() #309 Body End
LOADD d2,7; if() #310 Test AND if() #309 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,19
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2632; Test 'if'
PUSHR d4; if() #310 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMFall(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMFall(EWeapon)] Params End
CALLFUNC 0.5565; UsrFunc[void __UpdateEWMFall(EWeapon)] Call
POP d4
GOTO 2690; if() #310 Body End
LOADD d2,7; if() #311 Test AND if() #310 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,20
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2667; Test 'if'
LOADD d2,7; if() #311 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,6
LOADD d2,7
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,5
PUSHR d4
LOADD d2,7; UsrFunc[void __UpdateEWMDrift(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMDrift(EWeapon)] Params End
CALLFUNC 0.5831; UsrFunc[void __UpdateEWMDrift(EWeapon)] Call
POP d4
SETV d2,0
STORED d2,4
GOTO 2690; if() #311 Body End
LOADD d2,7; if() #311 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,6
LOADD d2,7
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,5
PUSHR d4
LOADD d2,7; UsrFunc[void __UpdateEWMDriftWait(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMDriftWait(EWeapon)] Params End
CALLFUNC 0.6335; UsrFunc[void __UpdateEWMDriftWait(EWeapon)] Call
POP d4
SETV d2,0
STORED d2,4; if() #311 Else End
LOADD d2,7; if() #310 Else End AND if() #309 Else End AND if() #308 Else End AND if() #303 Else End AND if() #553 Body End AND if() #554 Test
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 2840; Test 'if'
LOADD d2,7; if() #312 Test AND if() #554 Body Start
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2748; Test 'if'
LOADD d2,7; if() #312 Body Start
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
SETV d2,12
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,7; if() #555 Test
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 2747; Test 'if'
PUSHR d4; if() #555 Body Start
LOADD d2,7; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2188; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #555 Body End
GOTO 2840; if() #312 Body End
LOADD d2,7; if() #313 Test AND if() #312 Else Start
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2791; Test 'if'
PUSHR d4; if() #556 Test AND if() #313 Body Start
LOADD d2,7; Int.Func[int Distance(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; Int.Func[int Distance(int, int, int, int)] Params End
CALLFUNC 0.0015; Int.Func[int Distance(int, int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,7
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 2790; Test 'if'
PUSHR d4; if() #556 Body Start
LOADD d2,7; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2188; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #556 Body End
GOTO 2840; if() #313 Body End
LOADD d2,7; if() #557 Test AND if() #313 Else Start
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2840; Test 'if'
PUSHVARGV 0; InlineFunc[untyped Max(untyped, untyped)] Params Start AND if() #557 Body Start
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
PUSHR d2
LOADD d2,7
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
PUSHVARGR d3; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOADD d2,7; if() #558 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 2840; Test 'if'
PUSHR d4; if() #558 Body Start
LOADD d2,7; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2188; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #558 Body End
GOTO 3152; if() #557 Body End AND if() #313 Else End AND if() #312 Else End AND if() #554 Body End AND if() #302 Body End
LOADD d2,7; if() #559 Test AND if() #302 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 2862
LOADD d2,7
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1024
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3152; Test 'if'
LOADD d2,7; if() #314 Test AND if() #559 Body Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 2883; Test 'if'
PUSHR d4; if() #314 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathPrototype(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathPrototype(EWeapon)] Params End
CALLFUNC 0.6870; UsrFunc[void __DoEWeaponDeathPrototype(EWeapon)] Call
POP d4
GOTO 3152; if() #314 Body End
LOADD d2,7; if() #315 Test AND if() #314 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,8
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 3017; Test 'if'
LOADD d2,7; if() #316 Test AND if() #315 Body Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2915; Test 'if'
SETV d2,0; if() #316 Body Start
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
GOTO 3016; if() #316 Body End
LOADD d2,7; if() #317 Test AND if() #316 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2932; Test 'if'
PUSHR d4; if() #317 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathAimAtLink(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathAimAtLink(EWeapon)] Params End
CALLFUNC 0.7271; UsrFunc[void __DoEWeaponDeathAimAtLink(EWeapon)] Call
POP d4
GOTO 3016; if() #317 Body End
LOADD d2,7; if() #318 Test AND if() #317 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2949; Test 'if'
PUSHR d4; if() #318 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathExplode(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathExplode(EWeapon)] Params End
CALLFUNC 0.7437; UsrFunc[void __DoEWeaponDeathExplode(EWeapon)] Call
POP d4
GOTO 3016; if() #318 Body End
LOADD d2,7; if() #319 Test AND if() #318 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2966; Test 'if'
PUSHR d4; if() #319 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathSBombExplode(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathSBombExplode(EWeapon)] Params End
CALLFUNC 0.7481; UsrFunc[void __DoEWeaponDeathSBombExplode(EWeapon)] Call
POP d4
GOTO 3016; if() #319 Body End
LOADD d2,7; if() #320 Test AND if() #319 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2983; Test 'if'
PUSHR d4; if() #320 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FireballsHV(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FireballsHV(EWeapon)] Params End
CALLFUNC 0.7525; UsrFunc[void __DoEWeaponDeath4FireballsHV(EWeapon)] Call
POP d4
GOTO 3016; if() #320 Body End
LOADD d2,7; if() #321 Test AND if() #320 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3000; Test 'if'
PUSHR d4; if() #321 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Params End
CALLFUNC 0.7583; UsrFunc[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Call
POP d4
GOTO 3016; if() #321 Body End
LOADD d2,7; if() #560 Test AND if() #321 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,7
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3016; Test 'if'
PUSHR d4; if() #560 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FireballsRand(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FireballsRand(EWeapon)] Params End
CALLFUNC 0.7641; UsrFunc[void __DoEWeaponDeath4FireballsRand(EWeapon)] Call
POP d4; if() #560 Body End
GOTO 3152; if() #321 Else End AND if() #320 Else End AND if() #319 Else End AND if() #318 Else End AND if() #317 Else End AND if() #316 Else End AND if() #315 Body End
LOADD d2,7; if() #322 Test AND if() #315 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,8
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3034; Test 'if'
PUSHR d4; if() #322 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath8Fireballs(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath8Fireballs(EWeapon)] Params End
CALLFUNC 0.7751; UsrFunc[void __DoEWeaponDeath8Fireballs(EWeapon)] Call
POP d4
GOTO 3152; if() #322 Body End
LOADD d2,7; if() #323 Test AND if() #322 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,9
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3051; Test 'if'
PUSHR d4; if() #323 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FiresHV(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FiresHV(EWeapon)] Params End
CALLFUNC 0.7809; UsrFunc[void __DoEWeaponDeath4FiresHV(EWeapon)] Call
POP d4
GOTO 3152; if() #323 Body End
LOADD d2,7; if() #324 Test AND if() #323 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,10
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3068; Test 'if'
PUSHR d4; if() #324 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FiresDiag(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FiresDiag(EWeapon)] Params End
CALLFUNC 0.7869; UsrFunc[void __DoEWeaponDeath4FiresDiag(EWeapon)] Call
POP d4
GOTO 3152; if() #324 Body End
LOADD d2,7; if() #325 Test AND if() #324 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,11
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3085; Test 'if'
PUSHR d4; if() #325 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FiresRand(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FiresRand(EWeapon)] Params End
CALLFUNC 0.7929; UsrFunc[void __DoEWeaponDeath4FiresRand(EWeapon)] Call
POP d4
GOTO 3152; if() #325 Body End
LOADD d2,7; if() #326 Test AND if() #325 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,12
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3102; Test 'if'
PUSHR d4; if() #326 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath8Fires(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath8Fires(EWeapon)] Params End
CALLFUNC 0.8041; UsrFunc[void __DoEWeaponDeath8Fires(EWeapon)] Call
POP d4
GOTO 3152; if() #326 Body End
LOADD d2,7; if() #327 Test AND if() #326 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,13
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3119; Test 'if'
PUSHR d4; if() #327 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathSpawnNPC(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathSpawnNPC(EWeapon)] Params End
CALLFUNC 0.8146; UsrFunc[void __DoEWeaponDeathSpawnNPC(EWeapon)] Call
POP d4
GOTO 3152; if() #327 Body End
LOADD d2,7; if() #328 Test AND if() #327 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,14
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3136; Test 'if'
PUSHR d4; if() #328 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathSingleFire(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathSingleFire(EWeapon)] Params End
CALLFUNC 0.8193; UsrFunc[void __DoEWeaponDeathSingleFire(EWeapon)] Call
POP d4
GOTO 3152; if() #328 Body End
LOADD d2,7; if() #561 Test AND if() #328 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,15
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3152; Test 'if'
PUSHR d4; if() #561 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathRunScript(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathRunScript(EWeapon)] Params End
CALLFUNC 0.8244; UsrFunc[void __DoEWeaponDeathRunScript(EWeapon)] Call
POP d4; if() #561 Body End
LOADD d2,7; if() #328 Else End AND if() #327 Else End AND if() #326 Else End AND if() #325 Else End AND if() #324 Else End AND if() #323 Else End AND if() #322 Else End AND if() #315 Else End AND if() #314 Else End AND if() #559 Body End AND if() #302 Else End AND if() #562 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,8
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3177; Test 'if'
LOADD d2,7; if() #563 Test AND if() #562 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 3177; Test 'if'
PUSHR d4; if() #563 Body Start
LOADD d2,7; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params Start
PUSHR d2; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params End
CALLFUNC 0.0940; UsrFunc[void DrawEWeaponShadow(EWeapon)] Call
POP d4; if() #563 Body End
LOADD d2,7; if() #562 Body End AND if() #329 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3464; Test 'if'
SETV d2,1000; if() #329 Body Start
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
SETR d2,LINKHP; if() #564 Test
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 3204; Test 'if'
GOTO 3573; return (Void) AND if() #564 Body
LOADD d2,7; if() #565 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3223
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3228; Test 'if'
GOTO 3573; return (Void) AND if() #565 Body
STOREDV 0,3
STOREDV 0,2
STOREDV 0,1
LOADD d2,7; if() #330 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOTRUE 3244; Test 'if'
LOADD d2,7; InlineFunc[int RadtoDeg(int)] Params Start AND if() #330 Body Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
STORED d2,1
GOTO 3309; if() #330 Body End
PUSHR d4; if() #330 Else Start
LOADD d2,7; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2051; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,0; if() #331 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3259; Test 'if'
SETV d2,-90; if() #331 Body Start
STORED d2,1
GOTO 3309; if() #331 Body End
LOADD d2,0; if() #332 Test AND if() #331 Else Start
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3267; Test 'if'
SETV d2,-45; if() #332 Body Start
STORED d2,1
GOTO 3309; if() #332 Body End
LOADD d2,0; if() #333 Test AND if() #332 Else Start
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3275; Test 'if'
SETV d2,0; if() #333 Body Start
STORED d2,1
GOTO 3309; if() #333 Body End
LOADD d2,0; if() #334 Test AND if() #333 Else Start
COMPAREV d2,7
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3283; Test 'if'
SETV d2,45; if() #334 Body Start
STORED d2,1
GOTO 3309; if() #334 Body End
LOADD d2,0; if() #335 Test AND if() #334 Else Start
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3291; Test 'if'
SETV d2,90; if() #335 Body Start
STORED d2,1
GOTO 3309; if() #335 Body End
LOADD d2,0; if() #336 Test AND if() #335 Else Start
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3299; Test 'if'
SETV d2,135; if() #336 Body Start
STORED d2,1
GOTO 3309; if() #336 Body End
LOADD d2,0; if() #337 Test AND if() #336 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3307; Test 'if'
SETV d2,180; if() #337 Body Start
STORED d2,1
GOTO 3309; if() #337 Body End
SETV d2,-135; if() #337 Else Start
STORED d2,1; if() #337 Else End
LOADD d2,4; if() #336 Else End AND if() #335 Else End AND if() #334 Else End AND if() #333 Else End AND if() #332 Else End AND if() #331 Else End AND if() #330 Else End AND if() #338 Test
COMPAREV d2,0
GOTOTRUE 3351; Test 'if'
LOADD d2,7; if() #338 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int Cos(int)] Params Start
SETR d3,d2; InlineFunc[int Cos(int)] Params End
COSR d2,d3; InlineFunc[int Cos(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,3
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int Sin(int)] Params Start
SETR d3,d2; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,2
GOTO 3367; if() #338 Body End
LOADD d2,7; if() #338 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,3
LOADD d2,7
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,2; if() #338 Else End
LOADD d2,6; unless() #566 Test
PUSHR d2
LOADD d2,3
POP d3
COMPARER d3,d2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3381
LOADD d2,5
PUSHR d2
LOADD d2,2
POP d3
COMPARER d3,d2
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOFALSE 3397; Test 'unless'
PUSHR d4; unless() #566 Body Start
LOADD d2,6; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0046; UsrFunc[int Angle(int, int, int, int)] Call
POP d4
STORED d2,1; unless() #566 Body End
STOREDV 0,0
LOADD d2,1; if() #339 Test
COMPAREV d2,0
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 3406
LOADD d2,1
COMPAREV d2,180
SETCMP d2,0.0010
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3413; Test 'if'
SETV d2,0; if() #339 Body Start
STORED d2,0
GOTO 3415; if() #339 Body End
SETV d2,2; if() #339 Else Start
STORED d2,0; if() #339 Else End
PUSHV 4; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNTILE
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNTXSZ
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNTYSZ
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNCSET
PUSHARGSV -1,0.0002
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 1
PUSHV 128; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 3521; if() #329 Body End
LOADD d2,7; if() #567 Test AND if() #329 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3504; Test 'if'
SETR d2,gd27; if() #340 Test AND if() #567 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3495; Test 'if'
SETV d2,1000; if() #340 Body Start
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
GOTO 3504; if() #340 Body End
SETV d2,0; if() #340 Else Start
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2; if() #340 Else End
LOADD d2,7; if() #567 Body End AND if() #568 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3521; Test 'if'
PUSHR d4; if() #568 Body Start
LOADD d2,7; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1817; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #568 Body End
LOADD d2,7; if() #329 Else End AND if() #569 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,64
COMPAREV d2,0
SETCMP d2,0.0011
CASTBOOLI d2
COMPAREV d2,0
GOTOTRUE 3573; Test 'if'
LOADD d2,7; if() #569 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
SUBV2 0,d2
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZOFS,d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
SUBV2 0,d2
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHYOFS,d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
SUBV2 0,d2
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNYOFS,d2; if() #569 Body End
POPARGS d5,0.0008
RETURNFUNC; Func[void UpdateEWeapon(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMSineWave(EWeapon)] Body Start
SETR d4,SP
STOREDV 0,0
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1; InlineFunc[int Sin(int)] Params Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d3,EWPNMISCD; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
POP d3
MULTR d2,d3
STORED d2,0
LOADD d2,1
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,1.5708
SETR d3,d2; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,1.5708
SETR d3,d2; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __UpdateEWMSineWave(EWeapon)] Body End
PUSHARGSV 0,0.0003; Func[void __UpdateEWMHoming(EWeapon)] Body Start
SETR d4,SP
LOADD d2,3
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
MODV d2,6.2832
STORED d2,2; if() #723 Test
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 3772; Test 'if'
LOADD d2,2; if() #723 Body Start
ADDV d2,6.2832
STORED d2,2; if() #723 Body End
PUSHR d4
LOADD d2,3; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,3
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0021; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP d4
STORED d2,1; if() #724 Test
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 3793; Test 'if'
LOADD d2,1; if() #724 Body Start
ADDV d2,6.2832
STORED d2,1; if() #724 Body End
LOADD d2,2; InlineFunc[int Abs(int)] Params Start
PUSHR d2
LOADD d2,1
POP d3
SUBR d3,d2
SETR d2,d3; InlineFunc[int Abs(int)] Params End
ABS d2; InlineFunc[int Abs(int)] Body
STORED d2,0; if() #429 Test
PUSHR d2
LOADD d2,3
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOFALSE 3828
LOADD d2,0
PUSHR d2
LOADD d2,3
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 6.2832,d2
POP d3
COMPARER d3,d2
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 3841; Test 'if'
LOADD d2,1; if() #429 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 3908; if() #429 Body End
PUSHR d4; if() #430 Test AND if() #429 Else Start
LOADD d2,2; UsrFunc[int Sign(int)] Params Start
PUSHR d2
LOADD d2,1
POP d3
SUBR d3,d2
PUSHR d3; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.2409; UsrFunc[int Sign(int)] Call
POP d4
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int Sign(int)] Params Start
SUBV d2,3.1416
PUSHR d2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.2409; UsrFunc[int Sign(int)] Call
POP d4
POP d3
COMPARER d3,d2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3885; Test 'if'
LOADD d2,3; if() #430 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
PUSHR d2
LOADD d2,3
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 3908; if() #430 Body End
LOADD d2,3; if() #430 Else Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
PUSHR d2
LOADD d2,3
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2; if() #430 Else End
PUSHR d4; if() #429 Else End
LOADD d2,3; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1706; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,3; if() #725 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 3959; Test 'if'
LOADD d2,3; if() #725 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
SETV d2,10
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,3; if() #726 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 3959; Test 'if'
PUSHR d4; if() #726 Body Start
LOADD d2,3; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2188; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #726 Body End
POPARGS d5,0.0004; if() #725 Body End
RETURNFUNC; Func[void __UpdateEWMHoming(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMHomingReaim(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1; if() #727 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3992; Test 'if'
LOADD d2,1; if() #727 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #727 Body End
LOADD d2,1; if() #431 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 4091; Test 'if'
LOADD d2,1; if() #431 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1; if() #728 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4090; Test 'if'
LOADD d2,1; if() #432 Test AND if() #728 Body Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 4050; Test 'if'
PUSHR d4; if() #432 Body Start
LOADD d2,1; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2188; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 4090; if() #432 Body End
LOADD d2,1; if() #432 Else Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
SETV d2,-20
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #432 Else End
GOTO 4293; if() #728 Body End AND if() #431 Body End
LOADD d2,1; if() #431 Else Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ADDV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1; if() #729 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4191; Test 'if'
SETV d2,45; if() #729 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
PUSHR d4
LOADD d2,1; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0021; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
LOADD d2,1
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
PUSHR d4
LOADD d2,1; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1706; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,1; if() #730 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4191; Test 'if'
PUSHR d4; if() #730 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1817; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #730 Body End
LOADD d2,1; if() #729 Body End AND if() #433 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4217; Test 'if'
LOADD d2,1; if() #433 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.3000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 4293; if() #433 Body End
LOADD d2,1; if() #731 Test AND if() #433 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4293; Test 'if'
LOADD d2,1; if() #731 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.2000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 0,d2
ANDV d2,6
STORED d2,0; if() #434 Test
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4263; Test 'if'
PUSHR d4; if() #434 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 0; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2319; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4293; if() #434 Body End
LOADD d2,0; if() #435 Test AND if() #434 Else Start
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4275; Test 'if'
PUSHR d4; if() #435 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2319; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4293; if() #435 Body End
LOADD d2,0; if() #436 Test AND if() #435 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4287; Test 'if'
PUSHR d4; if() #436 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2319; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4293; if() #436 Body End
PUSHR d4; if() #436 Else Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 2; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2319; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4; if() #436 Else End
POPARGS d5,0.0002; if() #435 Else End AND if() #434 Else End AND if() #731 Body End AND if() #433 Else End AND if() #431 Else End
RETURNFUNC; Func[void __UpdateEWMHomingReaim(EWeapon)] Body End
SETR d4,SP; Func[void __UpdateEWMRandom(EWeapon)] Body Start
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int Randf(int)] Params Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,2
SETV d2,2
PUSHR d2
LOADD d2,0
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
MULTR d2,d3
PUSHR d2; UsrFunc[int Randf(int)] Params End
CALLFUNC 0.0038; UsrFunc[int Randf(int)] Call
POP d4
PUSHR d2
LOADD d2,0
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
LOADD d2,0; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1706; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,0; if() #732 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4367; Test 'if'
PUSHR d4; if() #732 Body Start
LOADD d2,0; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1817; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #732 Body End
LOADD d2,0; if() #733 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 4413; Test 'if'
LOADD d2,0; if() #733 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,10
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0; if() #734 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 4413; Test 'if'
PUSHR d4; if() #734 Body Start
LOADD d2,0; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2188; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #734 Body End
POP d5; if() #733 Body End
RETURNFUNC; Func[void __UpdateEWMRandom(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMRandomReaim(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1; if() #735 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4446; Test 'if'
LOADD d2,1; if() #735 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #735 Body End
LOADD d2,1; if() #437 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 4545; Test 'if'
LOADD d2,1; if() #437 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1; if() #736 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4544; Test 'if'
LOADD d2,1; if() #438 Test AND if() #736 Body Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 4504; Test 'if'
PUSHR d4; if() #438 Body Start
LOADD d2,1; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2188; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 4544; if() #438 Body End
LOADD d2,1; if() #438 Else Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
SETV d2,-20
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #438 Else End
GOTO 4724; if() #736 Body End AND if() #437 Body End
LOADD d2,1; if() #437 Else Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ADDV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1; if() #737 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4635; Test 'if'
SETV d2,45; if() #737 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d3,62832; InlineFunc[int Rand(int)] Params
RNDR d2,d3; InlineFunc[int Rand(int)] Body
MULTV d2,0.0001
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
LOADD d2,1
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
PUSHR d4
LOADD d2,1; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1706; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,1; if() #738 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4635; Test 'if'
PUSHR d4; if() #738 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1817; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #738 Body End
LOADD d2,1; if() #737 Body End AND if() #439 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4661; Test 'if'
LOADD d2,1; if() #439 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.3000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 4724; if() #439 Body End
LOADD d2,1; if() #739 Test AND if() #439 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4724; Test 'if'
LOADD d2,1; if() #739 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 0,d2
ANDV d2,6
STORED d2,0; if() #440 Test
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4694; Test 'if'
PUSHR d4; if() #440 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 0; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2319; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4724; if() #440 Body End
LOADD d2,0; if() #441 Test AND if() #440 Else Start
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4706; Test 'if'
PUSHR d4; if() #441 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2319; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4724; if() #441 Body End
LOADD d2,0; if() #442 Test AND if() #441 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4718; Test 'if'
PUSHR d4; if() #442 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2319; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4724; if() #442 Body End
PUSHR d4; if() #442 Else Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 2; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2319; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4; if() #442 Else End
POPARGS d5,0.0002; if() #441 Else End AND if() #440 Else End AND if() #739 Body End AND if() #439 Else End AND if() #437 Else End
RETURNFUNC; Func[void __UpdateEWMRandomReaim(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMVeer(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,0
LOADD d2,1
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0; if() #450 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4841; Test 'if'
LOADD d2,1; if() #450 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5198; if() #450 Body End
LOADD d2,0; if() #451 Test AND if() #450 Else Start
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4875; Test 'if'
LOADD d2,1; if() #451 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5198; if() #451 Body End
LOADD d2,0; if() #452 Test AND if() #451 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4910; Test 'if'
LOADD d2,1; if() #452 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5198; if() #452 Body End
LOADD d2,0; if() #453 Test AND if() #452 Else Start
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4944; Test 'if'
LOADD d2,1; if() #453 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5198; if() #453 Body End
LOADD d2,0; if() #454 Test AND if() #453 Else Start
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 5010; Test 'if'
LOADD d2,1; if() #454 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5198; if() #454 Body End
LOADD d2,0; if() #455 Test AND if() #454 Else Start
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 5075; Test 'if'
LOADD d2,1; if() #455 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5198; if() #455 Body End
LOADD d2,0; if() #456 Test AND if() #455 Else Start
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 5140; Test 'if'
LOADD d2,1; if() #456 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5198; if() #456 Body End
LOADD d2,1; if() #456 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #456 Else End
LOADD d2,1; if() #455 Else End AND if() #454 Else End AND if() #453 Else End AND if() #452 Else End AND if() #451 Else End AND if() #450 Else End
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __UpdateEWMVeer(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMThrow(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNJUMP,d2
LOADD d2,1; if() #740 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 5289
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 5323; Test 'if'
LOADD d2,1; if() #740 Body Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #740 Body End
LOADD d2,1; InlineFunc[untyped Max(untyped, untyped)] Params Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHVARGR d2
PUSHVARGV 0; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
PUSHR d4; unless() #444 Test AND if(true) #443 [Opt:AlwaysOn]
CALLFUNC 0.2125; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOFALSE 5375; Test 'unless'
LOADD d2,1; unless() #444 Body Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
GOTO 5391; unless() #444 Body End
LOADD d2,1; unless() #444 Else Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 176,d2
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2; unless() #444 Else End
LOADD d2,1; if() #445 Test
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 5454; Test 'if'
PUSHR d4; unless() #741 Test AND if(true) #446 [Opt:AlwaysOn] AND if() #445 Body Start
LOADD d2,1; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNY
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHXOFS
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHYOFS
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHYSZ
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHXSZ; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 0.9545; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 5453; Test 'unless'
LOADD d2,1; InlineFunc[untyped Max(untyped, untyped)] Params Start AND unless() #741 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; unless() #741 Body End
GOTO 5563; if() #445 Body End
STOREDV 0,0; if() #445 Else Start
LOADD d2,1; if() #447 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
GOTOTRUE 5512; Test 'if'
LOADD d2,1; if() #448 Test AND if() #447 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,-0.5000
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 5509; Test 'if'
LOADD d2,1; if() #448 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,-0.5000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
MULTV d2,0.7500
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
GOTO 5511; if() #448 Body End
SETV d2,1; if() #448 Else Start
STORED d2,0; if() #448 Else End
GOTO 5514; if() #447 Body End
SETV d2,1; if() #447 Else Start
STORED d2,0; if() #447 Else End
LOADD d2,0; if() #742 Test
COMPAREV d2,0
GOTOTRUE 5563; Test 'if'
LOADD d2,1; if() #449 Test AND if() #742 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1
COMPAREV d2,0
GOTOTRUE 5542; Test 'if'
SETV d2,0; if() #449 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
PUSHR d4
LOADD d2,1; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2188; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 5563; if() #449 Body End
SETV d2,0; if() #449 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,8
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2; if() #449 Else End
POPARGS d5,0.0002; if() #742 Body End AND if() #445 Else End
RETURNFUNC; Func[void __UpdateEWMThrow(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMFall(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNJUMP,d2
LOADD d2,1
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
PUSHR d4; unless() #424 Test AND if(true) #423 [Opt:AlwaysOn]
CALLFUNC 0.2125; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOFALSE 5626; Test 'unless'
LOADD d2,1; unless() #424 Body Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
GOTO 5656; unless() #424 Body End
LOADD d2,1; unless() #424 Else Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHYOFS,d2
LOADD d2,1
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNYOFS,d2; unless() #424 Else End
LOADD d2,1; InlineFunc[untyped Min(untyped, untyped)] Params Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ADDV d2,0.1600
PUSHVARGR d2
PUSHVARGV 3.2000; InlineFunc[untyped Min(untyped, untyped)] Params End
MINVARG; InlineFunc[untyped Min(untyped, untyped)] Body
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1; if() #720 Test AND if(true) #425 [Opt:AlwaysOn]
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 5829; Test 'if'
PUSHR d4; unless() #721 Test AND if() #720 Body Start
LOADD d2,1; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNY
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHXOFS
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHYOFS
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHYSZ
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHXSZ; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 0.9545; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 5829; Test 'unless'
STOREDV 0,0; unless() #721 Body Start
LOADD d2,1; if() #426 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 5778; Test 'if'
LOADD d2,1; if() #427 Test AND if() #426 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,-0.5000
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 5775; Test 'if'
LOADD d2,1; if() #427 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,-0.5000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
MULTV d2,0.7500
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
GOTO 5777; if() #427 Body End
SETV d2,1; if() #427 Else Start
STORED d2,0; if() #427 Else End
GOTO 5780; if() #426 Body End
SETV d2,1; if() #426 Else Start
STORED d2,0; if() #426 Else End
LOADD d2,0; if() #722 Test
COMPAREV d2,0
GOTOTRUE 5829; Test 'if'
LOADD d2,1; if() #428 Test AND if() #722 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1
COMPAREV d2,0
GOTOTRUE 5808; Test 'if'
SETV d2,0; if() #428 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
PUSHR d4
LOADD d2,1; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2188; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 5829; if() #428 Body End
SETV d2,0; if() #428 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,8
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2; if() #428 Else End
POPARGS d5,0.0002; if() #722 Body End AND unless() #721 Body End AND if() #720 Body End
RETURNFUNC; Func[void __UpdateEWMFall(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMDrift(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,0
LOADD d2,1
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0; if() #408 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 5946; Test 'if'
LOADD d2,1; if() #408 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6303; if() #408 Body End
LOADD d2,0; if() #409 Test AND if() #408 Else Start
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 5980; Test 'if'
LOADD d2,1; if() #409 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6303; if() #409 Body End
LOADD d2,0; if() #410 Test AND if() #409 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6015; Test 'if'
LOADD d2,1; if() #410 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6303; if() #410 Body End
LOADD d2,0; if() #411 Test AND if() #410 Else Start
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6049; Test 'if'
LOADD d2,1; if() #411 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6303; if() #411 Body End
LOADD d2,0; if() #412 Test AND if() #411 Else Start
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6115; Test 'if'
LOADD d2,1; if() #412 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6303; if() #412 Body End
LOADD d2,0; if() #413 Test AND if() #412 Else Start
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6180; Test 'if'
LOADD d2,1; if() #413 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6303; if() #413 Body End
LOADD d2,0; if() #414 Test AND if() #413 Else Start
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6245; Test 'if'
LOADD d2,1; if() #414 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6303; if() #414 Body End
LOADD d2,1; if() #414 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #414 Else End
LOADD d2,1; if() #413 Else End AND if() #412 Else End AND if() #411 Else End AND if() #410 Else End AND if() #409 Else End AND if() #408 Else End
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __UpdateEWMDrift(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMDriftWait(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,0
LOADD d2,1; if() #415 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,16
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 6427; Test 'if'
LOADD d2,1; if() #415 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6446; if() #415 Body End
LOADD d2,1; if() #415 Else Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ADDV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #415 Else End
LOADD d2,0; if() #416 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6481; Test 'if'
LOADD d2,1; if() #416 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6838; if() #416 Body End
LOADD d2,0; if() #417 Test AND if() #416 Else Start
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6515; Test 'if'
LOADD d2,1; if() #417 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6838; if() #417 Body End
LOADD d2,0; if() #418 Test AND if() #417 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6550; Test 'if'
LOADD d2,1; if() #418 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6838; if() #418 Body End
LOADD d2,0; if() #419 Test AND if() #418 Else Start
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6584; Test 'if'
LOADD d2,1; if() #419 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6838; if() #419 Body End
LOADD d2,0; if() #420 Test AND if() #419 Else Start
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6650; Test 'if'
LOADD d2,1; if() #420 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6838; if() #420 Body End
LOADD d2,0; if() #421 Test AND if() #420 Else Start
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6715; Test 'if'
LOADD d2,1; if() #421 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6838; if() #421 Body End
LOADD d2,0; if() #422 Test AND if() #421 Else Start
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6780; Test 'if'
LOADD d2,1; if() #422 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6838; if() #422 Body End
LOADD d2,1; if() #422 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #422 Else End
LOADD d2,1; if() #421 Else End AND if() #420 Else End AND if() #419 Else End AND if() #418 Else End AND if() #417 Else End AND if() #416 Else End
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __UpdateEWMDriftWait(EWeapon)] Body End
PUSHARGSV 0,0.0011; Func[void __DoEWeaponDeathPrototype(EWeapon)] Body Start
SETR d4,SP
STOREDV 0,10
STOREDV 0,9
STOREDV 0,8
STOREDV 0,7
STOREDV 0,6
STOREDV 0,5
STOREDV 0,4
STOREDV 0,3
STOREDV 0,2
LOADD d2,11; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,10
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #165 setup
STORED d2,2
LOADD d2,2; for() #165 LoopTest
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 6933; for() #165 TestFail?
LOADD d2,2; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #165 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORED d2,9; if() #591 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,768
COMPAREV d2,768
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 6914; Test 'if'
GOTO 6929; continue 1; AND if() #591 Body
LOADD d2,9; if() #592 Test
PUSHR d2
SETV d2,3
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,10
POP d3
COMPARER d3,d2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6929; Test 'if'
GOTO 6933; break 1; AND if() #592 Body
LOADD d2,2; for() #165 Body End AND for() #165 LoopIncrement
SUBV d2,1
STORED d2,2
GOTO 6892; for() #165 End
LOADD d2,2; if() #593 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6959; Test 'if'
ALLOCATEMEMV d2,43; if() #593 Body Start
STORED d2,0
WRITEPODSTRING d2,"ghost.zh: Failed to find prototype eweapon"
LOADD d2,0; InlineFunc[void TraceS(int)] Params Start
SETR d0,d2; InlineFunc[void TraceS(int)] Params End
TRACE6 d3; InlineFunc[void TraceS(int)] Body
TRACE3; InlineFunc[void TraceNL()] Body
SETV d2,0
PUSHR d2
LOADD d2,11
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
LOADD d3,0
DEALLOCATEMEMR d3
GOTO 7269; return (Void)
LOADD d3,0
DEALLOCATEMEMR d3; if() #593 Body End
LOADD d2,11
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MODV d2,10
SUBV d2,6.2832
STORED d2,4
LOADD d2,11
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,10
POP d3
SUBR d3,d2
SETR d2,d3
MULTV d2,10000
STORED d2,3
LOADD d2,11
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,4
POP d3
SUBR d3,d2
SETR d2,d3
DIVV d2,100
RSHIFTV d2,0
STORED d2,7
LOADD d2,11; if() #355 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNEXTEND
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 7049; Test 'if'
LOADD d2,11; if() #355 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,6
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,5
GOTO 7061; if() #355 Body End
LOADD d2,11; if() #355 Else Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
ADDV d2,8
STORED d2,6
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
ADDV d2,8
STORED d2,5; if() #355 Else End
LOADD d2,7; if() #356 Test
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 7114; Test 'if'
STOREDV 0,1; for() #166 setup AND if() #356 Body Start
LOADD d2,1; for() #166 LoopTest
PUSHR d2
LOADD d2,3
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 7105; for() #166 TestFail?
PUSHR d4; for() #166 Body Start
LOADD d2,9; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,5
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,1
MULTV d2,6.2832
SETV d2,6.2832
PUSHR d2
LOADD d2,1
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
DIVR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
CALLFUNC 0.9049; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; for() #166 Body End
LOADD d2,1; for() #166 LoopIncrement
ADDV d2,1
STORED d2,1
GOTO 7067; for() #166 End
LOADD d2,9; InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,2
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
GOTO 7260; if() #356 Body End
LOADD d2,7; if() #357 Test AND if() #356 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 7154; Test 'if'
STOREDV 0,1; for() #167 setup AND if() #357 Body Start
LOADD d2,1; for() #167 LoopTest
PUSHR d2
LOADD d2,3
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 7145; for() #167 TestFail?
PUSHR d4; for() #167 Body Start
LOADD d2,9; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,5
PUSHR d2
SETV d3,31416; InlineFunc[int Rand(int)] Params
RNDR d2,d3; InlineFunc[int Rand(int)] Body
DIVV d2,5000
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
CALLFUNC 0.9049; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; for() #167 Body End
LOADD d2,1; for() #167 LoopIncrement
ADDV d2,1
STORED d2,1
GOTO 7120; for() #167 End
LOADD d2,9; InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,2
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
GOTO 7260; if() #357 Body End
LOADD d2,3; if() #358 Test AND if() #357 Else Start
COMPAREV d2,1
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 7221; Test 'if'
SETR d2,LINKX; InlineFunc[int ArcTan(int, int)] Params Start AND if() #358 Body Start
ADDV d2,8
PUSHR d2
LOADD d2,6
POP d3
SUBR d3,d2
PUSHR d3
SETR d2,LINKY
ADDV d2,8
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR d2
LOADD d2,4
DIVV d2,2
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,1
STOREDV 0,0; for() #168 setup
LOADD d2,0; for() #168 LoopTest
PUSHR d2
LOADD d2,3
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 7220; for() #168 TestFail?
PUSHR d4; for() #168 Body Start
LOADD d2,9; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,5
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,0
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
SUBV d2,1
POP d3
DIVR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
CALLFUNC 0.9049; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; for() #168 Body End
LOADD d2,0; for() #168 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7183; for() #168 End
GOTO 7252; if() #358 Body End
LOADD d2,3; if() #594 Test AND if() #358 Else Start
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 7252; Test 'if'
PUSHR d4; if() #594 Body Start
LOADD d2,9; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,5
PUSHR d2
SETR d2,LINKX; InlineFunc[int ArcTan(int, int)] Params Start
ADDV d2,8
PUSHR d2
LOADD d2,6
POP d3
SUBR d3,d2
PUSHR d3
SETR d2,LINKY
ADDV d2,8
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
CALLFUNC 0.9049; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; if() #594 Body End
LOADD d2,9; if() #358 Else End AND InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,2
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body AND if() #357 Else End
SETV d2,0; if() #356 Else End
PUSHR d2
LOADD d2,11
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0012
RETURNFUNC; Func[void __DoEWeaponDeathPrototype(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathAimAtLink(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,14
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1; if() #350 Test
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 7360; Test 'if'
PUSHR d4; if() #350 Body Start
LOADD d2,1; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0021; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
LOADD d2,1; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1706; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
SETV d2,300
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,13
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7435; if() #350 Body End
LOADD d2,1; if() #351 Test AND if() #350 Else Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOTRUE 7385; Test 'if'
LOADD d2,1; if() #351 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.3000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
LOADD d2,1; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1706; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
GOTO 7435; if() #351 Body End
LOADD d2,1; if() #351 Else Start
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,6
STORED d2,0; if() #352 Test
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 7405; Test 'if'
PUSHR d4; if() #352 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 0; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2319; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 7435; if() #352 Body End
LOADD d2,0; if() #353 Test AND if() #352 Else Start
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 7417; Test 'if'
PUSHR d4; if() #353 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2319; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 7435; if() #353 Body End
LOADD d2,0; if() #354 Test AND if() #353 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 7429; Test 'if'
PUSHR d4; if() #354 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2319; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 7435; if() #354 Body End
PUSHR d4; if() #354 Else Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 2; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2319; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4; if() #354 Else End
POPARGS d5,0.0002; if() #353 Else End AND if() #352 Else End AND if() #351 Else End AND if() #350 Else End
RETURNFUNC; Func[void __DoEWeaponDeathAimAtLink(EWeapon)] Body End
SETR d4,SP; Func[void __DoEWeaponDeathExplode(EWeapon)] Body Start
PUSHR d4
PUSHV 135; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,0; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0837; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0860; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOADD d2,0
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHV -1
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1323; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POP d5
RETURNFUNC; Func[void __DoEWeaponDeathExplode(EWeapon)] Body End
SETR d4,SP; Func[void __DoEWeaponDeathSBombExplode(EWeapon)] Body Start
PUSHR d4
PUSHV 136; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,0; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0837; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0860; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOADD d2,0
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHV -1
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1323; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POP d5
RETURNFUNC; Func[void __DoEWeaponDeathSBombExplode(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsHV(EWeapon)] Body Start
SETR d4,SP
STOREDV 0,0; for() #155 setup
LOADD d2,0; for() #155 LoopTest
COMPAREV d2,4
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 7572; for() #155 TestFail?
PUSHR d4; for() #155 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0837; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0860; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1323; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #155 Body End
LOADD d2,0; for() #155 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7528; for() #155 End
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsHV(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Body Start
SETR d4,SP
STOREDV 4,0; for() #154 setup
LOADD d2,0; for() #154 LoopTest
COMPAREV d2,8
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 7630; for() #154 TestFail?
PUSHR d4; for() #154 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0837; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0860; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1323; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #154 Body End
LOADD d2,0; for() #154 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7586; for() #154 End
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsRand(EWeapon)] Body Start
SETR d4,SP
SETV d3,2; InlineFunc[int Rand(int)] Params AND if() #348 Test
RNDR d2,d3; InlineFunc[int Rand(int)] Body
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 7695; Test 'if'
STOREDV 0,0; for() #156 setup AND if() #348 Body Start
LOADD d2,0; for() #156 LoopTest
COMPAREV d2,4
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 7694; for() #156 TestFail?
PUSHR d4; for() #156 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0837; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0860; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1323; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #156 Body End
LOADD d2,0; for() #156 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7650; for() #156 End
GOTO 7740; if() #348 Body End
STOREDV 4,0; for() #157 setup AND if() #348 Else Start
LOADD d2,0; for() #157 LoopTest
COMPAREV d2,8
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 7740; for() #157 TestFail?
PUSHR d4; for() #157 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0837; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0860; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1323; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #157 Body End
LOADD d2,0; for() #157 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7696; for() #157 End
SETV d2,0; if() #348 Else End
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsRand(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fireballs(EWeapon)] Body Start
SETR d4,SP
STOREDV 0,0; for() #162 setup
LOADD d2,0; for() #162 LoopTest
COMPAREV d2,8
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 7798; for() #162 TestFail?
PUSHR d4; for() #162 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0837; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0860; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1323; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #162 Body End
LOADD d2,0; for() #162 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7754; for() #162 End
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fireballs(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresHV(EWeapon)] Body Start
SETR d4,SP
STOREDV 0,0; for() #159 setup
LOADD d2,0; for() #159 LoopTest
COMPAREV d2,4
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 7856; for() #159 TestFail?
PUSHR d4; for() #159 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0837; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0860; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 100
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1323; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #159 Body End
LOADD d2,0; for() #159 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7812; for() #159 End
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresHV(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresDiag(EWeapon)] Body Start
SETR d4,SP
STOREDV 4,0; for() #158 setup
LOADD d2,0; for() #158 LoopTest
COMPAREV d2,8
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 7916; for() #158 TestFail?
PUSHR d4; for() #158 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0837; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0860; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 71
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1323; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #158 Body End
LOADD d2,0; for() #158 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7872; for() #158 End
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresDiag(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresRand(EWeapon)] Body Start
SETR d4,SP
SETV d3,2; InlineFunc[int Rand(int)] Params AND if() #349 Test
RNDR d2,d3; InlineFunc[int Rand(int)] Body
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 7983; Test 'if'
STOREDV 0,0; for() #160 setup AND if() #349 Body Start
LOADD d2,0; for() #160 LoopTest
COMPAREV d2,4
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 7982; for() #160 TestFail?
PUSHR d4; for() #160 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0837; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0860; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 100
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1323; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #160 Body End
LOADD d2,0; for() #160 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7938; for() #160 End
GOTO 8028; if() #349 Body End
STOREDV 4,0; for() #161 setup AND if() #349 Else Start
LOADD d2,0; for() #161 LoopTest
COMPAREV d2,8
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 8028; for() #161 TestFail?
PUSHR d4; for() #161 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0837; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0860; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 71
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1323; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #161 Body End
LOADD d2,0; for() #161 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7984; for() #161 End
SETV d2,13; if() #349 Else End AND InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresRand(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fires(EWeapon)] Body Start
SETR d4,SP
STOREDV 0,0; for() #163 setup
LOADD d2,0; for() #163 LoopTest
COMPAREV d2,4
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 8088; for() #163 TestFail?
PUSHR d4; for() #163 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0837; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0860; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 100
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1323; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #163 Body End
LOADD d2,0; for() #163 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 8044; for() #163 End
STOREDV 4,0; for() #164 setup
LOADD d2,0; for() #164 LoopTest
COMPAREV d2,8
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 8133; for() #164 TestFail?
PUSHR d4; for() #164 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0837; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0860; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 71
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1323; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #164 Body End
LOADD d2,0; for() #164 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 8089; for() #164 End
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fires(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathSpawnNPC(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1; InlineFunc[NPC Screen->CreateNPC(int)] Params Start
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[NPC Screen->CreateNPC(int)] Params End
CREATENPCR d2; InlineFunc[NPC Screen->CreateNPC(int)] Body Start
SETR d2,REFNPC; InlineFunc[NPC Screen->CreateNPC(int)] Body End
STORED d2,0
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeathSpawnNPC(EWeapon)] Body End
SETR d4,SP; Func[void __DoEWeaponDeathSingleFire(EWeapon)] Body Start
PUSHR d4
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,0; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0837; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0860; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,0
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1323; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POP d5
RETURNFUNC; Func[void __DoEWeaponDeathSingleFire(EWeapon)] Body End
PUSHARGSV 0,0.0005; Func[void __DoEWeaponDeathRunScript(EWeapon)] Body Start
SETR d4,SP
STOREDV 0,4
STOREDV 0,3
STOREDV 0,2
STOREDV 0,1
PUSHR d4
CALLFUNC 0.1270; UsrFunc[int FindUnusedFFC()] Call
POP d4
STORED d2,4; if() #595 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 8268; Test 'if'
SETV d2,0; if() #595 Body Start
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
GOTO 8407; return (Void) AND if() #595 Body End
LOADD d2,4; InlineFunc[FFC Screen->LoadFFC(int)] Params
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,3
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #169 setup
STORED d2,0
LOADD d2,0; for() #169 LoopTest
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 8310; for() #169 TestFail?
LOADD d2,0; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #169 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORED d2,2; if() #596 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,768
COMPAREV d2,512
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 8295; Test 'if'
GOTO 8306; continue 1; AND if() #596 Body
LOADD d2,1; InlineFunc[untyped Min(untyped, untyped)] Params Start
PUSHVARGR d2
LOADD d2,2
PUSHR d2
SETV d2,3
PUSHR d2
POP d0
POP REFEWPN
PUSHVARGR EWPNMISCD; InlineFunc[untyped Min(untyped, untyped)] Params End
MINVARG; InlineFunc[untyped Min(untyped, untyped)] Body
STORED d2,1; for() #169 Body End
LOADD d2,0; for() #169 LoopIncrement
SUBV d2,1
STORED d2,0
GOTO 8273; for() #169 End
LOADD d2,1
SUBV d2,1
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
SETV d2,3
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,5
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ORV d2,1024
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,1
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
PUSHR d4
LOADD d2,5; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0837; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
PUSHR d4
LOADD d2,5; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0860; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
LOADD d2,5
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFSCRIPT,d2
LOADD d2,1
SUBV d2,1
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFINITDD,d2
POPARGS d5,0.0006
RETURNFUNC; Func[void __DoEWeaponDeathRunScript(EWeapon)] Body End
PUSHARGSV 0,0.0002; Func[void UpdateEWeapons()] Body Start
SETR d4,SP
STOREDV 0,1
SETR d2,LINKACTION; unless() #341 Test
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 8421
SETR d2,LINKACTION
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 8428
SETR d2,LINKACTION
COMPAREV d2,14
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 8435
SETR d2,LINKACTION
COMPAREV d2,15
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 8486; Test 'unless'
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #149 setup AND unless() #341 Body Start
STORED d2,0
LOADD d2,0; for() #149 LoopTest
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 8485; for() #149 TestFail?
LOADD d2,0; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #149 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORED d2,1; if() #570 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,512
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 8472
LOADD d2,1
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,256
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 8476; Test 'if'
GOTO 8481; continue 1; AND if() #570 Body
PUSHR d4
LOADD d2,1; UsrFunc[void UpdateEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void UpdateEWeapon(EWeapon)] Params End
CALLFUNC 0.2432; UsrFunc[void UpdateEWeapon(EWeapon)] Call
POP d4; for() #149 Body End
LOADD d2,0; for() #149 LoopIncrement
SUBV d2,1
STORED d2,0
GOTO 8440; for() #149 End
GOTO 8533; unless() #341 Body End
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #150 setup AND unless() #341 Else Start
STORED d2,0
LOADD d2,0; for() #150 LoopTest
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 8533; for() #150 TestFail?
LOADD d2,0; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #150 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORED d2,1; if() #571 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,512
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 8520
LOADD d2,1
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,256
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 8524; Test 'if'
GOTO 8529; continue 1; AND if() #571 Body
PUSHR d4
LOADD d2,1; UsrFunc[void __UpdateEWeaponVisualFlags(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWeaponVisualFlags(EWeapon)] Params End
CALLFUNC 0.8535; UsrFunc[void __UpdateEWeaponVisualFlags(EWeapon)] Call
POP d4; for() #150 Body End
LOADD d2,0; for() #150 LoopIncrement
SUBV d2,1
STORED d2,0
GOTO 8488; for() #150 End
POPARGS d5,0.0002; unless() #341 Else End
RETURNFUNC; Func[void UpdateEWeapons()] Body End
PUSHARGSV 0,0.0002; Func[void __UpdateEWeaponVisualFlags(EWeapon)] Body Start
SETR d4,SP
LOADD d2,2; if() #743 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,8
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 8562; Test 'if'
LOADD d2,2; if() #744 Test AND if() #743 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 8562; Test 'if'
PUSHR d4; if() #744 Body Start
LOADD d2,2; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params Start
PUSHR d2; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params End
CALLFUNC 0.0940; UsrFunc[void DrawEWeaponShadow(EWeapon)] Call
POP d4; if() #744 Body End
LOADD d2,2; if() #743 Body End AND if() #457 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 8756; Test 'if'
SETV d2,1000; if() #457 Body Start
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
LOADD d2,2; if() #745 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 8602
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 8607; Test 'if'
GOTO 8813; return (Void) AND if() #745 Body
STOREDV 0,1
LOADD d2,2; if() #458 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOTRUE 8621; Test 'if'
LOADD d2,2; InlineFunc[int RadtoDeg(int)] Params Start AND if() #458 Body Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
STORED d2,1
GOTO 8686; if() #458 Body End
PUSHR d4; if() #458 Else Start
LOADD d2,2; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2051; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,0; if() #459 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 8636; Test 'if'
SETV d2,-90; if() #459 Body Start
STORED d2,1
GOTO 8686; if() #459 Body End
LOADD d2,0; if() #460 Test AND if() #459 Else Start
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 8644; Test 'if'
SETV d2,-45; if() #460 Body Start
STORED d2,1
GOTO 8686; if() #460 Body End
LOADD d2,0; if() #461 Test AND if() #460 Else Start
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 8652; Test 'if'
SETV d2,0; if() #461 Body Start
STORED d2,1
GOTO 8686; if() #461 Body End
LOADD d2,0; if() #462 Test AND if() #461 Else Start
COMPAREV d2,7
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 8660; Test 'if'
SETV d2,45; if() #462 Body Start
STORED d2,1
GOTO 8686; if() #462 Body End
LOADD d2,0; if() #463 Test AND if() #462 Else Start
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 8668; Test 'if'
SETV d2,90; if() #463 Body Start
STORED d2,1
GOTO 8686; if() #463 Body End
LOADD d2,0; if() #464 Test AND if() #463 Else Start
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 8676; Test 'if'
SETV d2,135; if() #464 Body Start
STORED d2,1
GOTO 8686; if() #464 Body End
LOADD d2,0; if() #465 Test AND if() #464 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 8684; Test 'if'
SETV d2,180; if() #465 Body Start
STORED d2,1
GOTO 8686; if() #465 Body End
SETV d2,-135; if() #465 Else Start
STORED d2,1; if() #465 Else End
STOREDV 0,0; if() #464 Else End AND if() #463 Else End AND if() #462 Else End AND if() #461 Else End AND if() #460 Else End AND if() #459 Else End AND if() #458 Else End
LOADD d2,1; if() #466 Test
COMPAREV d2,0
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 8695
LOADD d2,1
COMPAREV d2,180
SETCMP d2,0.0010
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 8702; Test 'if'
SETV d2,0; if() #466 Body Start
STORED d2,0
GOTO 8704; if() #466 Body End
SETV d2,2; if() #466 Else Start
STORED d2,0; if() #466 Else End
PUSHV 4; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOADD d2,2
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,2
PUSHR d2
POP REFEWPN
PUSHR EWPNTILE
PUSHARGSV 1,0.0002
LOADD d2,2
PUSHR d2
POP REFEWPN
PUSHR EWPNCSET
PUSHARGSV -1,0.0002
LOADD d2,2
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 1
PUSHV 128; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 8813; if() #457 Body End
LOADD d2,2; if() #746 Test AND if() #457 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 8796; Test 'if'
SETR d2,gd27; if() #467 Test AND if() #746 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 8787; Test 'if'
SETV d2,1000; if() #467 Body Start
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
GOTO 8796; if() #467 Body End
SETV d2,0; if() #467 Else Start
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2; if() #467 Else End
LOADD d2,2; if() #746 Body End AND if() #747 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 8813; Test 'if'
PUSHR d4; if() #747 Body Start
LOADD d2,2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1817; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #747 Body End
POPARGS d5,0.0003; if() #457 Else End
RETURNFUNC; Func[void __UpdateEWeaponVisualFlags(EWeapon)] Body End
SETR d4,SP; Func[void UpdateGhostZH1()] Body Start
PUSHR d4
CALLFUNC 0.8409; UsrFunc[void UpdateEWeapons()] Call
PEEK d4
CALLFUNC 0.0883; UsrFunc[void CleanUpGhostFFCs()] Call
PEEK d4
CALLFUNC 0.8824; UsrFunc[void UpdateGhostZHData1()] Call
POP d4
RETURNFUNC; Func[void UpdateGhostZH1()] Body End
PUSHV 0; Func[void UpdateGhostZHData1()] Body Start
SETR d4,SP
SETR d2,CURDMAP; InlineFunc[int Game->GetCurDMap()] Body
LSHIFTV d2,8
PUSHR d2
SETR d2,CURDSCR; InlineFunc[int Game->GetCurDMapScreen()] Body
POP d3
ADDR d2,d3
STORED d2,0
SETR d2,gd27; if() #342 Test
PUSHR d2
POP d0
READPODARRAYV d2,7
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 8857; Test 'if'
SETV d2,0; if() #342 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2
LOADD d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 7,d2
GOTO 8875; if() #342 Body End
SETR d2,gd27; if() #572 Test AND if() #342 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,6
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 8875; Test 'if'
SETR d2,gd27; if() #572 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,6
SUBV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2; if() #572 Body End
POP d5; if() #342 Else End
RETURNFUNC; Func[void UpdateGhostZHData1()] Body End
SETR d4,SP; Func[void UpdateGhostZH2()] Body Start
PUSHR d4
CALLFUNC 0.1006; UsrFunc[void DrawGhostFFCs()] Call
PEEK d4
CALLFUNC 0.0065; UsrFunc[void AutoGhost()] Call
PEEK d4
CALLFUNC 0.8886; UsrFunc[void UpdateGhostZHData2()] Call
POP d4
RETURNFUNC; Func[void UpdateGhostZH2()] Body End
SETR d4,SP; Func[void UpdateGhostZHData2()] Body Start
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,1
ADDV d2,1
MODV d2,8
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
SETR d2,gd27; if() #343 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 8918; Test 'if'
SETR d2,gd27; if() #343 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ORV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
GOTO 8928; if() #343 Body End
SETR d2,gd27; if() #343 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,-2
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2; if() #343 Else End
SETR d2,gd27; if(true) #573 [Opt:AlwaysOn]
PUSHR d2
POP d0
READPODARRAYV d2,3
ADDV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 3,d2
SETR d2,gd27; if() #574 Test
PUSHR d2
POP d0
READPODARRAYV d2,3
COMPAREV d2,8
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 8963; Test 'if'
SETV d2,0; if() #574 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 3,d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,2
ADDV d2,1
MODV d2,4
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 2,d2; if() #574 Body End
SETR d2,gd27; if(true) #575 [Opt:AlwaysOn]
PUSHR d2
POP d0
READPODARRAYV d2,5
ADDV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 5,d2
SETR d2,gd27; if() #576 Test
PUSHR d2
POP d0
READPODARRAYV d2,5
COMPAREV d2,8
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 8998; Test 'if'
SETV d2,0; if() #576 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 5,d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,4
ADDV d2,1
MODV d2,4
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 4,d2; if() #576 Body End
RETURNFUNC; Func[void UpdateGhostZHData2()] Body End
SETR d4,SP; Func[bool __IsScriptNameChar(int, bool)] Body Start
LOADD d2,1; if() #690 Test
COMPAREV d2,97
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 9012; Test 'if'
LOADD d2,1; if() #691 Test AND if() #690 Body Start
COMPAREV d2,122
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 9012; Test 'if'
SETV d2,1; return Start AND if() #691 Body Start
GOTO 9047; return End AND if() #691 Body End
LOADD d2,1; if() #690 Body End AND if() #692 Test
COMPAREV d2,65
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 9024; Test 'if'
LOADD d2,1; if() #693 Test AND if() #692 Body Start
COMPAREV d2,90
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 9024; Test 'if'
SETV d2,1; return Start AND if() #693 Body Start
GOTO 9047; return End AND if() #693 Body End
LOADD d2,1; if() #692 Body End AND if() #694 Test
COMPAREV d2,95
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 9031; Test 'if'
SETV d2,1; return Start AND if() #694 Body Start
GOTO 9047; return End AND if() #694 Body End
LOADD d2,0; unless() #695 Test
COMPAREV d2,0
GOTOFALSE 9046; Test 'unless'
LOADD d2,1; if() #696 Test AND unless() #695 Body Start
COMPAREV d2,48
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 9046; Test 'if'
LOADD d2,1; if() #697 Test AND if() #696 Body Start
COMPAREV d2,57
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 9046; Test 'if'
SETV d2,1; return Start AND if() #697 Body Start
GOTO 9047; return End AND if() #697 Body End
SETV d2,0; if() #696 Body End AND unless() #695 Body End AND return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[bool __IsScriptNameChar(int, bool)] Body End
PUSHV 0; Func[void __CopyEWeapon(EWeapon, int, int, int)] Body Start
SETR d4,SP
LOADD d2,4; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNID; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Params End
CREATEEWEAPONR d2; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body Start
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body End
STORED d2,0
LOADD d2,4; if() #587 Test
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 9081; Test 'if'
LOADD d2,0; InlineFunc[void EWeapon->UseSprite(int)] Params Start AND if() #587 Body Start
PUSHR d2
LOADD d2,4
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void EWeapon->UseSprite(int)] Params End
POP d3; InlineFunc[void EWeapon->UseSprite(int)] Body Start
SETR REFEWPN,d3
EWPNUSESPRITER d2; InlineFunc[void EWeapon->UseSprite(int)] Body End AND if() #587 Body End
LOADD d2,4; if() #346 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNEXTEND
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 9217; Test 'if'
SETV d2,3; if() #346 Body Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNEXTEND,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNTXSZ,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNTYSZ,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,16
SETV d2,16
PUSHR d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHXSZ,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
MULTV d2,16
SETV d2,16
PUSHR d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHYSZ,d2
LOADD d2,3
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,2
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
GOTO 9237; if() #346 Body End
LOADD d2,3; if() #346 Else Start
SUBV d2,8
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,2
SUBV d2,8
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2; if() #346 Else End
LOADD d2,4
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNPOWER,d2
SETV d2,1
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNANGULAR,d2
LOADD d2,1
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
LOADD d2,0; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1706; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,8
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,10
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4; if() #347 Test
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,15
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 9374
LOADD d2,4
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,-1
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 9395; Test 'if'
PUSHR d4; if() #347 Body Start
LOADD d2,0; UsrFunc[int __GetEWeaponThrowHeight(EWeapon)] Params Start
PUSHR d2; UsrFunc[int __GetEWeaponThrowHeight(EWeapon)] Params End
CALLFUNC 0.2210; UsrFunc[int __GetEWeaponThrowHeight(EWeapon)] Call
POP d4
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 9413; if() #347 Body End
LOADD d2,4; if() #347 Else Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #347 Else End
LOADD d2,4
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,11
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,12
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,13
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,14
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,-257
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0; if() #588 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,32
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 9526; Test 'if'
SETV d2,0; if() #588 Body Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNCOLLDET,d2; if() #588 Body End
LOADD d2,0; if() #589 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 9543; Test 'if'
PUSHR d4; if() #589 Body Start
LOADD d2,0; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1817; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #589 Body End
POPARGS d5,0.0005
RETURNFUNC; Func[void __CopyEWeapon(EWeapon, int, int, int)] Body End
PUSHV 0; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body Start
SETR d4,SP
STOREDV 0,0; for() #189 setup
LOADD d2,0; for() #189 LoopTest
PUSHR d2
LOADD d2,1
SUBV d2,1
POP d3
COMPARER d3,d2
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 9594; for() #189 TestFail?
LOADD d2,6; InlineFunc[bool Screen->isSolid(int, int)] Params Start AND if() #758 Test AND for() #189 Body Start
PUSHR d2
LOADD d2,4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,0
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
GOTOTRUE 9590; Test 'if'
SETV d2,0; if() #759 Test AND if() #758 Body Start
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,4
COMPAREV d2,0
GOTOTRUE 9590; Test 'if'
SETV d2,1; return Start AND if() #759 Body Start
GOTO 9595; return End AND if() #759 Body End
LOADD d2,0; if() #758 Body End AND for() #189 Body End AND for() #189 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 9548; for() #189 End
SETV d2,0; return Start
POPARGS d5,0.0007; return End
RETURNFUNC; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body End


PUSHR d0; void run(int) Params
PUSHR REFITEMCLASS; void run(int) Body Start
SETR d4,SP
LOADD d2,1; if() #520 Test
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 16; Test 'if'
SETV d2,-1; if() #520 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2
GOTO 22; if() #520 Body End
LOADD d2,1; if() #520 Else Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2; if() #520 Else End
POPARGS d5,0.0002
QUIT; void run(int) Body End


SETV gd9,0; void run() Body Start
SETV gd10,0
SETV gd12,0
SETV gd11,0
SETV gd5,0
SETV gd15,0
SETV gd6,0
SETV gd14,0
SETV gd13,0
SETV gd7,0
SETV gd8,0
SETV gd2,0
SETV gd3,0
SETV gd4,0
ALLOCATEGMEMV d2,25
SETR gd26,d2
SETV gd16,0
SETV gd17,0
SETV gd21,0
SETV gd18,0
SETV gd22,0
SETV gd19,0
SETV gd20,0
ALLOCATEGMEMV d2,32
SETR gd25,d2
SETV gd23,0
SETV gd24,0
ALLOCATEGMEMV d2,8
SETR gd27,d2
ALLOCATEGMEMV d2,1000
SETR gd28,d2
ALLOCATEGMEMV d2,4096
SETR gd1,d2
QUIT; void run() Body End