Compiling 'armos.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

PUSHR d0; void run(int) Params
PUSHR REFFFC; void run(int) Body Start
PUSHARGSV 0,0.0003
SETR d4,SP2
PUSHR d4
LOAD d2,0.0003; UsrFunc[NPC Ghost_InitAutoGhost(FFC, int)] Params Start
PUSHR d2
LOAD d2,0.0004
PUSHR d2; UsrFunc[NPC Ghost_InitAutoGhost(FFC, int)] Params End
CALLFUNC 0.4093; UsrFunc[NPC Ghost_InitAutoGhost(FFC, int)] Call
POP d4
STORE d2,0.0002
PUSHR d4
PUSHV 89; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3031; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK d4
PUSHV 3; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3031; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK d4
PUSHV 16384; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3031; UsrFunc[void Ghost_SetFlag(int)] Call
POP d4
LOAD d2,0.0002; InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
PUSHR d4
LOAD d2,0.0003; UsrFunc[void SpawnAnimation(FFC, NPC)] Params Start
PUSHR d2
LOAD d2,0.0002
PUSHR d2; UsrFunc[void SpawnAnimation(FFC, NPC)] Params End
CALLFUNC 0.5570; UsrFunc[void SpawnAnimation(FFC, NPC)] Call
POP d4
LOAD d2,0.0002
PUSHR d2
POP REFNPC
SETR d2,NPCSTEP
DIVV d2,100
STORE d2,0.0001
LOAD d2,0.0002
PUSHR d2
SETV d2,1
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
STORE d2,0
SETR d2,gd4; if() #954 Test AND while(true) #15 Body [Opt:AlwaysOn] Start
COMPAREV d2,0
GOTOCMP 60,!=
SETR d2,gd6
COMPAREV d2,0
GOTOCMP 60,>
SETV d2,1
GOTO 61
SETV d2,0
COMPAREV d2,0
GOTOCMP 67,==; Test 'if'
SETV d2,1.5000; if() #954 Body Start
SETR gd6,d2
LOAD d2,0; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body AND if() #954 Body End
PUSHR d4
LOAD d2,0.0001; UsrFunc[void Ghost_MoveTowardLink(int, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void Ghost_MoveTowardLink(int, int)] Params End
CALLFUNC 0.4259; UsrFunc[void Ghost_MoveTowardLink(int, int)] Call
PEEK d4
LOAD d2,0.0003; UsrFunc[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Params Start
PUSHR d2
LOAD d2,0.0002
PUSHR d2
PUSHARGSV 1,0.0002; UsrFunc[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Params End
CALLFUNC 0.4324; UsrFunc[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Call
POP d4; while(true) #15 Body [Opt:AlwaysOn] End
GOTO 52; while() #15 End AND [Opt:NeverRet] AND void run(int) Body End
SETR d4,SP2; Func[int Angle(int, int, int, int)] Body Start
LOAD d2,0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR d2
LOAD d2,0.0003
POP d3
SUBR d3,d2
PUSHR d3
LOAD d2,0
PUSHR d2
LOAD d2,0.0002
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
SETR d3,d2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
POPARGS d5,0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
SETR d4,SP2; Func[int AngleDir8(int)] Body Start
LOAD d2,0; if() #7 Test
COMPAREV d2,157.5000
GOTOCMP 109,>
LOAD d2,0
COMPAREV d2,112.5000
GOTOCMP 109,<=
SETV d2,1
GOTO 110
SETV d2,0
COMPAREV d2,0
GOTOCMP 114,==; Test 'if'
SETV d2,6; return Start AND if() #7 Body Start
GOTO 193; return End AND if() #7 Body End
LOAD d2,0; if() #8 Test AND if() #7 Else Start
COMPAREV d2,112.5000
GOTOCMP 122,>
LOAD d2,0
COMPAREV d2,67.5000
GOTOCMP 122,<=
SETV d2,1
GOTO 123
SETV d2,0
COMPAREV d2,0
GOTOCMP 127,==; Test 'if'
SETV d2,1; return Start AND if() #8 Body Start
GOTO 193; return End AND if() #8 Body End
LOAD d2,0; if() #9 Test AND if() #8 Else Start
COMPAREV d2,67.5000
GOTOCMP 135,>
LOAD d2,0
COMPAREV d2,22.5000
GOTOCMP 135,<=
SETV d2,1
GOTO 136
SETV d2,0
COMPAREV d2,0
GOTOCMP 140,==; Test 'if'
SETV d2,7; return Start AND if() #9 Body Start
GOTO 193; return End AND if() #9 Body End
LOAD d2,0; if() #10 Test AND if() #9 Else Start
COMPAREV d2,22.5000
GOTOCMP 148,>
LOAD d2,0
COMPAREV d2,-22.5000
GOTOCMP 148,<=
SETV d2,1
GOTO 149
SETV d2,0
COMPAREV d2,0
GOTOCMP 153,==; Test 'if'
SETV d2,3; return Start AND if() #10 Body Start
GOTO 193; return End AND if() #10 Body End
LOAD d2,0; if() #11 Test AND if() #10 Else Start
COMPAREV d2,-22.5000
GOTOCMP 161,>
LOAD d2,0
COMPAREV d2,-67.5000
GOTOCMP 161,<=
SETV d2,1
GOTO 162
SETV d2,0
COMPAREV d2,0
GOTOCMP 166,==; Test 'if'
SETV d2,5; return Start AND if() #11 Body Start
GOTO 193; return End AND if() #11 Body End
LOAD d2,0; if() #12 Test AND if() #11 Else Start
COMPAREV d2,-67.5000
GOTOCMP 174,>
LOAD d2,0
COMPAREV d2,-112.5000
GOTOCMP 174,<=
SETV d2,1
GOTO 175
SETV d2,0
COMPAREV d2,0
GOTOCMP 179,==; Test 'if'
SETV d2,0; return Start AND if() #12 Body Start
GOTO 193; return End AND if() #12 Body End
LOAD d2,0; if() #13 Test AND if() #12 Else Start
COMPAREV d2,-112.5000
GOTOCMP 187,>
LOAD d2,0
COMPAREV d2,-157.5000
GOTOCMP 187,<=
SETV d2,1
GOTO 188
SETV d2,0
COMPAREV d2,0
GOTOCMP 192,==; Test 'if'
SETV d2,4; return Start AND if() #13 Body Start
GOTO 193; return End AND if() #13 Body End
SETV d2,2; return Start AND if() #13 Else Start
POP d5; return End AND if() #13 Else End AND if() #12 Else End AND if() #11 Else End AND if() #10 Else End AND if() #9 Else End AND if() #8 Else End AND if() #7 Else End
RETURNFUNC; Func[int AngleDir8(int)] Body End
SETR d4,SP2; Func[int Clamp(int, int, int)] Body Start
LOAD d2,0.0002; if() #20 Test
PUSHR d2
LOAD d2,0.0001
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 207,==; Test 'if'
LOAD d2,0.0001; if() #20 Body Start
STORE d2,0.0002
GOTO 217; if() #20 Body End
LOAD d2,0.0002; if() #85 Test AND if() #20 Else Start
PUSHR d2
LOAD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 217,==; Test 'if'
LOAD d2,0; if() #85 Body Start
STORE d2,0.0002; if() #85 Body End
LOAD d2,0.0002; if() #20 Else End AND return Start
POPARGS d5,0.0003; return End
RETURNFUNC; Func[int Clamp(int, int, int)] Body End
SETR d4,SP2; Func[bool ClockIsActive()] Body Start
SETR d2,gd27; return Start
PUSHR d2
POP d0
READPODARRAYV d2,6
COMPAREV d2,0
SETCMP d2,I!=
RETURNFUNC; return End AND Func[bool ClockIsActive()] Body End
SETR d4,SP2; Func[int ComboAt(int, int)] Body Start
PUSHR d4
LOAD d2,0.0001; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR d2
PUSHV 255
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0254; UsrFunc[int VBound(int, int, int)] Call
POP d4
STORE d2,0.0001
PUSHR d4
LOAD d2,0; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR d2
PUSHV 175
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0254; UsrFunc[int VBound(int, int, int)] Call
POP d4
STORE d2,0
LOAD d2,0; return Start
ANDV d2,240
PUSHR d2
LOAD d2,0.0001
RSHIFTV d2,4
POP d3
ADDR d2,d3
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int ComboAt(int, int)] Body End
SETR d4,SP2; Func[int VBound(int, int, int)] Body Start
LOAD d2,0.0002; if() #348 Test
PUSHR d2
LOAD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 266,==; Test 'if'
LOAD d2,0; if() #348 Body Start
STORE d2,0.0002
GOTO 276; if() #348 Body End
LOAD d2,0.0002; if() #581 Test AND if() #348 Else Start
PUSHR d2
LOAD d2,0.0001
POP d3
COMPARER d3,d2
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 276,==; Test 'if'
LOAD d2,0.0001; if() #581 Body Start
STORE d2,0.0002; if() #581 Body End
LOAD d2,0.0002; if() #348 Else End AND return Start
POPARGS d5,0.0003; return End
RETURNFUNC; Func[int VBound(int, int, int)] Body End
PUSHV 0; Func[bool IsWater(int)] Body Start
SETR d4,SP2
LOAD d2,0.0001
PUSHR d2
POP d0
SETR d2,COMBOTD
STORE d2,0
LOAD d2,0; if() #371 Test
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 293,==; Test 'if'
SETV d2,1; return Start AND if() #371 Body Start
GOTO 321; return End AND if() #371 Body End
LOAD d2,0; if() #372 Test
COMPAREV d2,18
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 300,==; Test 'if'
SETV d2,1; return Start AND if() #372 Body Start
GOTO 321; return End AND if() #372 Body End
LOAD d2,0; if() #373 Test
COMPAREV d2,19
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 307,==; Test 'if'
SETV d2,1; return Start AND if() #373 Body Start
GOTO 321; return End AND if() #373 Body End
LOAD d2,0; if() #374 Test
COMPAREV d2,86
GOTOCMP 315,<
LOAD d2,0
COMPAREV d2,91
GOTOCMP 315,>
SETV d2,1
GOTO 316
SETV d2,0
COMPAREV d2,0
GOTOCMP 320,==; Test 'if'
SETV d2,1; return Start AND if() #374 Body Start
GOTO 321; return End AND if() #374 Body End
SETV d2,0; return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[bool IsWater(int)] Body End
SETR d4,SP2; Func[bool __IsPit(int)] Body Start
PUSHR d4; return Start
LOAD d2,0; UsrFunc[bool IsPit(int)] Params Start
PUSHR d2; UsrFunc[bool IsPit(int)] Params End
CALLFUNC 0.5518; UsrFunc[bool IsPit(int)] Call
POP d4
POP d5; return End
RETURNFUNC; Func[bool __IsPit(int)] Body End
SETR d4,SP2; Func[bool Ghost_CanMove(int, int, int)] Body Start
PUSHR d4; return Start
LOAD d2,0.0002; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
PUSHR d2
LOAD d2,0.0001
PUSHR d2
LOAD d2,0
PUSHR d2
SETR d2,gd4
COMPAREV d2,0
SETCMP d2,I>
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0347; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
POPARGS d5,0.0003; return End
RETURNFUNC; Func[bool Ghost_CanMove(int, int, int)] Body End
SETR d4,SP2; Func[bool Ghost_CanMove(int, int, int, bool)] Body Start
LOAD d2,0.0002; if() #241 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 355,==; Test 'if'
SETV d2,1; return Start AND if() #241 Body Start
GOTO 405; return End AND if() #241 Body End
LOAD d2,0.0003; if() #242 Test
COMPAREV d2,4
SETCMP d2,I>=
COMPAREV d2,0
GOTOCMP 363,==; Test 'if'
LOAD d2,0.0002; if() #242 Body Start
MULTV d2,0.7071
STORE d2,0.0002; if() #242 Body End
PUSHR d4
LOAD d2,0.0003; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.0407; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORE d2,0.0003
LOAD d2,0.0002; while() #1 Test
COMPAREV d2,8
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 394,==; Test 'while'
PUSHR d4; unless() #243 Test AND while() #1 Body Start
LOAD d2,0.0003; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR d2
LOAD d2,0.0002
SUBV d2,8
PUSHR d2
LOAD d2,0.0001
PUSHR d2
LOAD d2,0
PUSHR d2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 0.0480; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 390,!=; Test 'unless'
SETV d2,0; return Start AND unless() #243 Body Start
GOTO 405; return End AND unless() #243 Body End
LOAD d2,0.0002
SUBV d2,8
STORE d2,0.0002; while() #1 Body End
GOTO 369; while() #1 End
PUSHR d4; return Start
LOAD d2,0.0003; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR d2
LOAD d2,0.0002
PUSHR d2
LOAD d2,0.0001
PUSHR d2
LOAD d2,0
PUSHR d2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 0.0480; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP d4
POPARGS d5,0.0004; return End
RETURNFUNC; Func[bool Ghost_CanMove(int, int, int, bool)] Body End
SETR d4,SP2; Func[int __NormalizeDir(int)] Body Start
LOAD d2,0; if() #701 Test
COMPAREV d2,0
GOTOCMP 416,<
LOAD d2,0
COMPAREV d2,7
GOTOCMP 416,>
SETV d2,1
GOTO 417
SETV d2,0
COMPAREV d2,0
GOTOCMP 421,==; Test 'if'
LOAD d2,0; return Start AND if() #701 Body Start
GOTO 478; return End AND if() #701 Body End
LOAD d2,0; if() #702 Test
COMPAREV d2,8
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 428,==; Test 'if'
SETV d2,0; return Start AND if() #702 Body Start
GOTO 478; return End AND if() #702 Body End
LOAD d2,0; if() #703 Test
COMPAREV d2,9
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 435,==; Test 'if'
SETV d2,5; return Start AND if() #703 Body Start
GOTO 478; return End AND if() #703 Body End
LOAD d2,0; if() #704 Test
COMPAREV d2,10
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 442,==; Test 'if'
SETV d2,3; return Start AND if() #704 Body Start
GOTO 478; return End AND if() #704 Body End
LOAD d2,0; if() #705 Test
COMPAREV d2,11
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 449,==; Test 'if'
SETV d2,7; return Start AND if() #705 Body Start
GOTO 478; return End AND if() #705 Body End
LOAD d2,0; if() #706 Test
COMPAREV d2,12
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 456,==; Test 'if'
SETV d2,1; return Start AND if() #706 Body Start
GOTO 478; return End AND if() #706 Body End
LOAD d2,0; if() #707 Test
COMPAREV d2,13
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 463,==; Test 'if'
SETV d2,6; return Start AND if() #707 Body Start
GOTO 478; return End AND if() #707 Body End
LOAD d2,0; if() #708 Test
COMPAREV d2,14
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 470,==; Test 'if'
SETV d2,2; return Start AND if() #708 Body Start
GOTO 478; return End AND if() #708 Body End
LOAD d2,0; if() #709 Test
COMPAREV d2,15
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 477,==; Test 'if'
SETV d2,4; return Start AND if() #709 Body Start
GOTO 478; return End AND if() #709 Body End
SETV d2,0; return Start
POP d5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
PUSHARGSV 0,0.0006; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body Start
SETR d4,SP2
LOAD d2,0.0009; if() #363 Test
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 604,==; Test 'if'
SETR d2,gd14; if() #363 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORE d2,0.0003
SETR d2,gd2
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0008
POP d3
SUBR d3,d2
SETR d2,d3
STORE d2,0.0004
SETR d2,gd3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORE d2,0.0002
LOAD d2,0.0003
DIVV d2,8
SUBV d2,1
STORE d2,0.0001
SETV d2,1; for() #171 setup
STORE d2,0.0005
LOAD d2,0.0005; for() #171 LoopTest
PUSHR d2
LOAD d2,0.0001
POP d3
COMPARER d3,d2
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 562,==; for() #171 TestFail?
PUSHR d4; unless() #610 Test AND for() #171 Body Start
LOAD d2,0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOAD d2,0.0002
PUSHR d2
LOAD d2,0.0005
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0006
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1256; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 558,!=; Test 'unless'
SETV d2,0; return Start AND unless() #610 Body Start
GOTO 1254; return End AND unless() #610 Body End
LOAD d2,0.0005; for() #171 Body End AND for() #171 LoopIncrement
ADDV d2,1
STORE d2,0.0005
GOTO 532; for() #171 End
PUSHR d4; unless() #611 Test
LOAD d2,0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOAD d2,0.0002
PUSHR d2
LOAD d2,0.0007
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0006
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1256; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 579,!=; Test 'unless'
SETV d2,0; return Start AND unless() #611 Body Start
GOTO 1254; return End AND unless() #611 Body End
PUSHR d4; unless() #612 Test
LOAD d2,0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOAD d2,0.0002
PUSHR d2
LOAD d2,0.0003
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0007
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOAD d2,0.0006
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1256; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 602,!=; Test 'unless'
SETV d2,0; return Start AND unless() #612 Body Start
GOTO 1254; return End AND unless() #612 Body End
SETV d2,1; return Start
GOTO 1254; return End AND if() #363 Body End
LOAD d2,0.0009; if() #364 Test AND if() #363 Else Start
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 737,==; Test 'if'
SETR d2,gd14; if() #364 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORE d2,0.0003
SETR d2,gd2
PUSHR d2
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOAD d2,0.0008
POP d3
ADDR d2,d3
STORE d2,0.0004
SETR d2,gd3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORE d2,0.0002
LOAD d2,0.0003
DIVV d2,8
SUBV d2,1
STORE d2,0.0001
SETV d2,1; for() #172 setup
STORE d2,0.0005
LOAD d2,0.0005; for() #172 LoopTest
PUSHR d2
LOAD d2,0.0001
POP d3
COMPARER d3,d2
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 695,==; for() #172 TestFail?
PUSHR d4; unless() #613 Test AND for() #172 Body Start
LOAD d2,0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOAD d2,0.0002
PUSHR d2
LOAD d2,0.0005
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0006
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1256; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 691,!=; Test 'unless'
SETV d2,0; return Start AND unless() #613 Body Start
GOTO 1254; return End AND unless() #613 Body End
LOAD d2,0.0005; for() #172 Body End AND for() #172 LoopIncrement
ADDV d2,1
STORE d2,0.0005
GOTO 665; for() #172 End
PUSHR d4; unless() #614 Test
LOAD d2,0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOAD d2,0.0002
PUSHR d2
LOAD d2,0.0007
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0006
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1256; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 712,!=; Test 'unless'
SETV d2,0; return Start AND unless() #614 Body Start
GOTO 1254; return End AND unless() #614 Body End
PUSHR d4; unless() #615 Test
LOAD d2,0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOAD d2,0.0002
PUSHR d2
LOAD d2,0.0003
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0007
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOAD d2,0.0006
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1256; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 735,!=; Test 'unless'
SETV d2,0; return Start AND unless() #615 Body Start
GOTO 1254; return End AND unless() #615 Body End
SETV d2,1; return Start
GOTO 1254; return End AND if() #364 Body End
LOAD d2,0.0009; if() #365 Test AND if() #364 Else Start
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 877,==; Test 'if'
PUSHR d4; if() #616 Test AND if() #365 Body Start
CALLFUNC 0.4307; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOCMP 755,==
PUSHR d4
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 755,!=
SETV d2,1
GOTO 756
SETV d2,0
COMPAREV d2,0
GOTOCMP 760,==; Test 'if'
SETV d2,0; return Start AND if() #616 Body Start
GOTO 1254; return End AND if() #616 Body End
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORE d2,0.0003
SETR d2,gd3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0008
POP d3
SUBR d3,d2
SETR d2,d3
STORE d2,0.0004
SETR d2,gd2
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORE d2,0.0002
LOAD d2,0.0003
DIVV d2,8
SUBV d2,1
STORE d2,0.0001
SETV d2,1; for() #173 setup
STORE d2,0.0005
LOAD d2,0.0005; for() #173 LoopTest
PUSHR d2
LOAD d2,0.0001
POP d3
COMPARER d3,d2
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 835,==; for() #173 TestFail?
PUSHR d4; unless() #617 Test AND for() #173 Body Start
LOAD d2,0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOAD d2,0.0005
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0004
PUSHR d2
LOAD d2,0.0006
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1256; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 831,!=; Test 'unless'
SETV d2,0; return Start AND unless() #617 Body Start
GOTO 1254; return End AND unless() #617 Body End
LOAD d2,0.0005; for() #173 Body End AND for() #173 LoopIncrement
ADDV d2,1
STORE d2,0.0005
GOTO 805; for() #173 End
PUSHR d4; unless() #618 Test
LOAD d2,0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOAD d2,0.0007
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0004
PUSHR d2
LOAD d2,0.0006
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1256; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 852,!=; Test 'unless'
SETV d2,0; return Start AND unless() #618 Body Start
GOTO 1254; return End AND unless() #618 Body End
PUSHR d4; unless() #619 Test
LOAD d2,0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOAD d2,0.0003
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0007
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOAD d2,0.0004
PUSHR d2
LOAD d2,0.0006
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1256; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 875,!=; Test 'unless'
SETV d2,0; return Start AND unless() #619 Body Start
GOTO 1254; return End AND unless() #619 Body End
SETV d2,1; return Start
GOTO 1254; return End AND if() #365 Body End
LOAD d2,0.0009; if() #366 Test AND if() #365 Else Start
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1010,==; Test 'if'
SETR d2,gd13; if() #366 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORE d2,0.0003
SETR d2,gd3
PUSHR d2
SETR d2,gd14
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOAD d2,0.0008
POP d3
ADDR d2,d3
STORE d2,0.0004
SETR d2,gd2
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORE d2,0.0002
LOAD d2,0.0003
DIVV d2,8
SUBV d2,1
STORE d2,0.0001
SETV d2,1; for() #174 setup
STORE d2,0.0005
LOAD d2,0.0005; for() #174 LoopTest
PUSHR d2
LOAD d2,0.0001
POP d3
COMPARER d3,d2
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 968,==; for() #174 TestFail?
PUSHR d4; unless() #620 Test AND for() #174 Body Start
LOAD d2,0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOAD d2,0.0005
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0004
PUSHR d2
LOAD d2,0.0006
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1256; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 964,!=; Test 'unless'
SETV d2,0; return Start AND unless() #620 Body Start
GOTO 1254; return End AND unless() #620 Body End
LOAD d2,0.0005; for() #174 Body End AND for() #174 LoopIncrement
ADDV d2,1
STORE d2,0.0005
GOTO 938; for() #174 End
PUSHR d4; unless() #621 Test
LOAD d2,0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOAD d2,0.0007
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0004
PUSHR d2
LOAD d2,0.0006
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1256; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 985,!=; Test 'unless'
SETV d2,0; return Start AND unless() #621 Body Start
GOTO 1254; return End AND unless() #621 Body End
PUSHR d4; unless() #622 Test
LOAD d2,0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOAD d2,0.0003
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0007
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOAD d2,0.0004
PUSHR d2
LOAD d2,0.0006
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1256; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1008,!=; Test 'unless'
SETV d2,0; return Start AND unless() #622 Body Start
GOTO 1254; return End AND unless() #622 Body End
SETV d2,1; return Start
GOTO 1254; return End AND if() #366 Body End
LOAD d2,0.0009; if() #367 Test AND if() #366 Else Start
COMPAREV d2,4
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1070,==; Test 'if'
SETR d2,gd2; if() #367 Body Start
PUSHR d2
LOAD d2,0.0008
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD d2,0.0008
PUSHR d2
LOAD d2,0.0007
PUSHR d2
LOAD d2,0.0006
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0347; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORE d2,0
SETR d2,gd2
PUSHR d2
LOAD d2,0.0008
POP d3
ADDR d2,d3
SETR gd2,d2
LOAD d2,0; unless() #623 Test
COMPAREV d2,0
GOTOCMP 1044,!=; Test 'unless'
SETV d2,0; return Start AND unless() #623 Body Start
GOTO 1254; return End AND unless() #623 Body End
SETR d2,gd3
PUSHR d2
LOAD d2,0.0008
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD d2,0.0008
PUSHR d2
LOAD d2,0.0007
PUSHR d2
LOAD d2,0.0006
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0347; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORE d2,0
SETR d2,gd3
PUSHR d2
LOAD d2,0.0008
POP d3
ADDR d2,d3
SETR gd3,d2
LOAD d2,0; return Start
GOTO 1254; return End AND if() #367 Body End
LOAD d2,0.0009; if() #368 Test AND if() #367 Else Start
COMPAREV d2,5
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1131,==; Test 'if'
STOREV 0,0; if() #368 Body Start
SETR d2,gd2
PUSHR d2
LOAD d2,0.0008
POP d3
ADDR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD d2,0.0008
PUSHR d2
LOAD d2,0.0007
PUSHR d2
LOAD d2,0.0006
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0347; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORE d2,0
SETR d2,gd2
PUSHR d2
LOAD d2,0.0008
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
LOAD d2,0; unless() #624 Test
COMPAREV d2,0
GOTOCMP 1105,!=; Test 'unless'
SETV d2,0; return Start AND unless() #624 Body Start
GOTO 1254; return End AND unless() #624 Body End
SETR d2,gd3
PUSHR d2
LOAD d2,0.0008
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD d2,0.0008
PUSHR d2
LOAD d2,0.0007
PUSHR d2
LOAD d2,0.0006
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0347; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORE d2,0
SETR d2,gd3
PUSHR d2
LOAD d2,0.0008
POP d3
ADDR d2,d3
SETR gd3,d2
LOAD d2,0; return Start
GOTO 1254; return End AND if() #368 Body End
LOAD d2,0.0009; if() #369 Test AND if() #368 Else Start
COMPAREV d2,6
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1192,==; Test 'if'
STOREV 0,0; if() #369 Body Start
SETR d2,gd2
PUSHR d2
LOAD d2,0.0008
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD d2,0.0008
PUSHR d2
LOAD d2,0.0007
PUSHR d2
LOAD d2,0.0006
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0347; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORE d2,0
SETR d2,gd2
PUSHR d2
LOAD d2,0.0008
POP d3
ADDR d2,d3
SETR gd2,d2
LOAD d2,0; unless() #625 Test
COMPAREV d2,0
GOTOCMP 1166,!=; Test 'unless'
SETV d2,0; return Start AND unless() #625 Body Start
GOTO 1254; return End AND unless() #625 Body End
SETR d2,gd3
PUSHR d2
LOAD d2,0.0008
POP d3
ADDR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD d2,0.0008
PUSHR d2
LOAD d2,0.0007
PUSHR d2
LOAD d2,0.0006
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0347; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORE d2,0
SETR d2,gd3
PUSHR d2
LOAD d2,0.0008
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
LOAD d2,0; return Start
GOTO 1254; return End AND if() #369 Body End
LOAD d2,0.0009; if() #370 Test AND if() #369 Else Start
COMPAREV d2,7
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1253,==; Test 'if'
STOREV 0,0; if() #370 Body Start
SETR d2,gd2
PUSHR d2
LOAD d2,0.0008
POP d3
ADDR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD d2,0.0008
PUSHR d2
LOAD d2,0.0007
PUSHR d2
LOAD d2,0.0006
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0347; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORE d2,0
SETR d2,gd2
PUSHR d2
LOAD d2,0.0008
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
LOAD d2,0; unless() #626 Test
COMPAREV d2,0
GOTOCMP 1227,!=; Test 'unless'
SETV d2,0; return Start AND unless() #626 Body Start
GOTO 1254; return End AND unless() #626 Body End
SETR d2,gd3
PUSHR d2
LOAD d2,0.0008
POP d3
ADDR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD d2,0.0008
PUSHR d2
LOAD d2,0.0007
PUSHR d2
LOAD d2,0.0006
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0347; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORE d2,0
SETR d2,gd3
PUSHR d2
LOAD d2,0.0008
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
LOAD d2,0; return Start
GOTO 1254; return End AND if() #370 Body End
SETV d2,0; return Start AND if() #370 Else Start
POPARGS d5,0.0010; return End AND if() #370 Else End AND if() #369 Else End AND if() #368 Else End AND if() #367 Else End AND if() #366 Else End AND if() #365 Else End AND if() #364 Else End AND if() #363 Else End
RETURNFUNC; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body End
PUSHV 0; Func[bool Ghost_CanMovePixel(int, int, bool)] Body Start
SETR d4,SP2
LOAD d2,0.0003; if() #244 Test
COMPAREV d2,0
GOTOCMP 1272,<
LOAD d2,0.0003
COMPAREV d2,255
GOTOCMP 1272,>
LOAD d2,0.0002
COMPAREV d2,0
GOTOCMP 1272,<
LOAD d2,0.0002
COMPAREV d2,175
GOTOCMP 1272,>
SETV d2,0
GOTO 1273
SETV d2,1
COMPAREV d2,0
GOTOCMP 1280,==; Test 'if'
PUSHR d4; return Start AND if() #244 Body Start
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1474; return End AND if() #244 Body End
PUSHR d4
LOAD d2,0.0003; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR d2
LOAD d2,0.0002
PUSHR d2; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0228; UsrFunc[int ComboAt(int, int)] Call
POP d4
STORE d2,0
PUSHR d4; unless() #245 Test
PUSHV 65537; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1385,!=; Test 'unless'
LOAD d2,0; if() #246 Test AND unless() #245 Body Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,110
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1304,==; Test 'if'
SETV d2,0; return Start AND if() #246 Body Start
GOTO 1474; return End AND if() #246 Body End
LOAD d2,0; if() #247 Test
PUSHR d2
POP d0
SETR d2,COMBOFD
COMPAREV d2,96
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1314,==; Test 'if'
SETV d2,0; return Start AND if() #247 Body Start
GOTO 1474; return End AND if() #247 Body End
LOAD d2,0; if() #248 Test
PUSHR d2
POP d0
SETR d2,COMBOID
COMPAREV d2,96
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1324,==; Test 'if'
SETV d2,0; return Start AND if() #248 Body Start
GOTO 1474; return End AND if() #248 Body End
PUSHR d4; if() #80 Test
PUSHV 65536; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1341,==; Test 'if'
LOAD d2,0; if() #249 Test AND if() #80 Body Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,44
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1385,==; Test 'if'
SETV d2,0; return Start AND if() #249 Body Start
GOTO 1474; return End AND if() #249 Body End
GOTO 1385; if() #80 Body End
LOAD d2,0.0001; if() #81 Test AND if() #80 Else Start
COMPAREV d2,0
GOTOCMP 1355,==; Test 'if'
LOAD d2,0; if() #250 Test AND if() #81 Body Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,54
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1385,==; Test 'if'
SETV d2,0; return Start AND if() #250 Body Start
GOTO 1474; return End AND if() #250 Body End
GOTO 1385; if() #81 Body End
LOAD d2,0; if() #251 Test AND if() #81 Else Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,128
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1365,==; Test 'if'
SETV d2,0; return Start AND if() #251 Body Start
GOTO 1474; return End AND if() #251 Body End
LOAD d2,0; if() #252 Test
PUSHR d2
POP d0
SETR d2,COMBOFD
COMPAREV d2,97
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1375,==; Test 'if'
SETV d2,0; return Start AND if() #252 Body Start
GOTO 1474; return End AND if() #252 Body End
LOAD d2,0; if() #253 Test
PUSHR d2
POP d0
SETR d2,COMBOID
COMPAREV d2,97
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1385,==; Test 'if'
SETV d2,0; return Start AND if() #253 Body Start
GOTO 1474; return End AND if() #253 Body End
PUSHR d4; if() #81 Else End AND if() #80 Else End AND unless() #245 Body End AND if() #254 Test
PUSHV 65539; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1397,==; Test 'if'
PUSHR d4; return Start AND if() #254 Body Start
LOAD d2,0; UsrFunc[bool IsWater(int)] Params Start
PUSHR d2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 0.0279; UsrFunc[bool IsWater(int)] Call
POP d4
GOTO 1474; return End AND if() #254 Body End
PUSHR d4; if() #255 Test
PUSHV 65538; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1420,==; Test 'if'
PUSHR d4; return Start AND if() #255 Body Start
LOAD d2,0; UsrFunc[bool IsWater(int)] Params Start
PUSHR d2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 0.0279; UsrFunc[bool IsWater(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1418,!=
LOAD d2,0
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,58
GOTOCMP 1418,==
SETV d2,0
GOTO 1474
SETV d2,1
GOTO 1474; return End AND if() #255 Body End
PUSHR d4; if() #256 Test
LOAD d2,0; UsrFunc[bool IsWater(int)] Params Start
PUSHR d2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 0.0279; UsrFunc[bool IsWater(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1432,==; Test 'if'
PUSHR d4; return Start AND if() #256 Body Start
PUSHV 2048; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1474; return End AND if() #256 Body End
PUSHR d4; if() #257 Test
LOAD d2,0; UsrFunc[bool __IsPit(int)] Params Start
PUSHR d2; UsrFunc[bool __IsPit(int)] Params End
CALLFUNC 0.0323; UsrFunc[bool __IsPit(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1444,==; Test 'if'
PUSHR d4; return Start AND if() #257 Body Start
PUSHV 4096; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1474; return End AND if() #257 Body End
PUSHR d4; if() #82 Test
PUSHV 1024; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1452,==; Test 'if'
SETV d2,1; return Start AND if() #82 Body Start
GOTO 1474; return End AND if() #82 Body End
PUSHR d4; if() #83 Test AND if() #82 Else Start
PUSHV 32768; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1466,==; Test 'if'
PUSHR d4; return Start AND if() #83 Body Start
LOAD d2,0.0003; UsrFunc[bool __FullTileWalkable(int, int)] Params Start
PUSHR d2
LOAD d2,0.0002
PUSHR d2; UsrFunc[bool __FullTileWalkable(int, int)] Params End
CALLFUNC 0.1507; UsrFunc[bool __FullTileWalkable(int, int)] Call
POP d4
GOTO 1474; return End AND if() #83 Body End
LOAD d2,0.0003; InlineFunc[bool Screen->isSolid(int, int)] Params Start AND return Start AND if() #83 Else Start
PUSHR d2
LOAD d2,0.0002
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
SETCMP d2,I==
POPARGS d5,0.0004; return End AND if() #83 Else End AND if() #82 Else End
RETURNFUNC; Func[bool Ghost_CanMovePixel(int, int, bool)] Body End
SETR d4,SP2; Func[bool Ghost_FlagIsSet(int)] Body Start
LOAD d2,0; if() #116 Test
ANDV d2,65536
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1495,==; Test 'if'
SETR d2,gd17; return Start AND if() #116 Body Start
PUSHR d2
LOAD d2,0
ANDV d2,65535
SETV d3,1
LSHIFTR d3,d2
SETR d2,d3
POP d3
ANDR d2,d3
COMPAREV d2,0
SETCMP d2,I!=
GOTO 1505; return End AND if() #116 Body End
SETR d2,gd16; return Start AND if() #116 Else Start
PUSHR d2
LOAD d2,0
POP d3
ANDR d2,d3
PUSHR d2
LOAD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,I==
POP d5; return End AND if() #116 Else End
RETURNFUNC; Func[bool Ghost_FlagIsSet(int)] Body End
SETR d4,SP2; Func[bool __FullTileWalkable(int, int)] Body Start
LOAD d2,0.0001; if() #600 Test
COMPAREV d2,0
GOTOCMP 1522,<
LOAD d2,0
COMPAREV d2,0
GOTOCMP 1522,<
LOAD d2,0.0001
COMPAREV d2,256
GOTOCMP 1522,>=
LOAD d2,0
COMPAREV d2,176
GOTOCMP 1522,>=
SETV d2,0
GOTO 1523
SETV d2,1
COMPAREV d2,0
GOTOCMP 1530,==; Test 'if'
PUSHR d4; return Start AND if() #600 Body Start
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1590; return End AND if() #600 Body End
LOAD d2,0.0001
PUSHR d2
LOAD d2,0.0001
MODV d2,16
POP d3
SUBR d3,d2
SETR d2,d3
STORE d2,0.0001
LOAD d2,0
PUSHR d2
LOAD d2,0
MODV d2,16
POP d3
SUBR d3,d2
SETR d2,d3
STORE d2,0
LOAD d2,0.0001; InlineFunc[bool Screen->isSolid(int, int)] Params Start AND if() #601 Test
PUSHR d2
LOAD d2,0
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
GOTOCMP 1584,!=
LOAD d2,0.0001; InlineFunc[bool Screen->isSolid(int, int)] Params Start
ADDV d2,8
PUSHR d2
LOAD d2,0
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
GOTOCMP 1584,!=
LOAD d2,0.0001; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOAD d2,0
ADDV d2,8
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
GOTOCMP 1584,!=
LOAD d2,0.0001; InlineFunc[bool Screen->isSolid(int, int)] Params Start
ADDV d2,8
PUSHR d2
LOAD d2,0
ADDV d2,8
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
GOTOCMP 1584,!=
SETV d2,0
GOTO 1585
SETV d2,1
COMPAREV d2,0
GOTOCMP 1589,==; Test 'if'
SETV d2,0; return Start AND if() #601 Body Start
GOTO 1590; return End AND if() #601 Body End
SETV d2,1; return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[bool __FullTileWalkable(int, int)] Body End
PUSHARGSV 0,0.0004; Func[bool Ghost_CheckFreeze(FFC, NPC)] Body Start
SETR d4,SP2
PUSHR d4; if() #258 Test
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1605,==
PUSHR d4
CALLFUNC 0.0220; UsrFunc[bool ClockIsActive()] Call
POP d4
COMPAREV d2,0
GOTOCMP 1619,!=
PUSHR d4
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1617,==
LOAD d2,0.0004
PUSHR d2
POP REFNPC
SETR d2,NPCSTUN
COMPAREV d2,0
GOTOCMP 1619,>
SETV d2,0
GOTO 1620
SETV d2,1
COMPAREV d2,0
GOTOCMP 1848,==; Test 'if'
LOAD d2,0.0005; if() #258 Body Start
PUSHR d2
POP REFFFC
SETR d2,XD
STORE d2,0.0003
LOAD d2,0.0005
PUSHR d2
POP REFFFC
SETR d2,YD
STORE d2,0.0002
LOAD d2,0.0005
PUSHR d2
POP REFFFC
SETR d2,XD2
STORE d2,0.0001
LOAD d2,0.0005
PUSHR d2
POP REFFFC
SETR d2,YD2
STORE d2,0
SETV d2,0
PUSHR d2
LOAD d2,0.0005
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
SETV d2,0
PUSHR d2
LOAD d2,0.0005
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
SETV d2,0
PUSHR d2
LOAD d2,0.0005
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
SETV d2,0
PUSHR d2
LOAD d2,0.0005
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2
SETR d2,gd18
ORV d2,2
SETR gd18,d2
PUSHR d4; while() #2 Test
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1692,==
PUSHR d4
CALLFUNC 0.0220; UsrFunc[bool ClockIsActive()] Call
POP d4
COMPAREV d2,0
GOTOCMP 1706,!=
PUSHR d4
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1704,==
LOAD d2,0.0004
PUSHR d2
POP REFNPC
SETR d2,NPCSTUN
COMPAREV d2,0
GOTOCMP 1706,>
SETV d2,0
GOTO 1707
SETV d2,1
COMPAREV d2,0
GOTOCMP 1812,==; Test 'while'
PUSHR d4; while() #2 Body Start
LOAD d2,0.0005; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params Start
PUSHR d2
LOAD d2,0.0004
PUSHR d2; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params End
CALLFUNC 0.1851; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Call
PEEK d4
LOAD d2,0.0004; UsrFunc[void __Ghost_DrawShadow(NPC)] Params Start
PUSHR d2; UsrFunc[void __Ghost_DrawShadow(NPC)] Params End
CALLFUNC 0.1935; UsrFunc[void __Ghost_DrawShadow(NPC)] Call
PEEK d4
LOAD d2,0.0005; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOAD d2,0.0004
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
CALLFUNC 0.2096; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
LOAD d2,0.0004; InlineFunc[bool NPC->isValid()] Params AND unless() #84 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOCMP 1733,!=; Test 'unless'
SETV d2,0; return Start AND unless() #84 Body Start
GOTO 1849; return End
GOTO 1743; unless() #84 Body End
LOAD d2,0.0004; if() #259 Test AND unless() #84 Else Start
PUSHR d2
POP REFNPC
SETR d2,NPCHP
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 1743,==; Test 'if'
SETV d2,0; return Start AND if() #259 Body Start
GOTO 1849; return End AND if() #259 Body End
PUSHR d4; unless() #84 Else End
LOAD d2,0.0005; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOAD d2,0.0004
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2493; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1772,==; Test 'if'
SETR d2,gd11; if() #85 Body Start
PUSHR d2
PUSHR d4
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0407; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0005
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
GOTO 1804; if() #85 Body End
PUSHR d4; if() #86 Test AND if() #85 Else Start
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1795,==; Test 'if'
SETR d2,gd11; if() #86 Body Start
PUSHR d2
PUSHR d4
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0407; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0005
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
GOTO 1804; if() #86 Body End
SETR d2,gd11; if() #86 Else Start
PUSHR d2
LOAD d2,0.0005
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #86 Else End
PUSHR d4; if() #85 Else End
LOAD d2,0.0005; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params Start
PUSHR d2
LOAD d2,0.0004
PUSHR d2; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params End
CALLFUNC 0.2627; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Call
POP d4; while() #2 Body End
GOTO 1681; while() #2 End
LOAD d2,0.0003
PUSHR d2
LOAD d2,0.0005
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
LOAD d2,0.0002
PUSHR d2
LOAD d2,0.0005
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
LOAD d2,0.0001
PUSHR d2
LOAD d2,0.0005
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
LOAD d2,0
PUSHR d2
LOAD d2,0.0005
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2; if() #258 Body End
SETV d2,1; return Start
POPARGS d5,0.0006; return End
RETURNFUNC; Func[bool Ghost_CheckFreeze(FFC, NPC)] Body End
PUSHV 0; Func[void __Ghost_UpdateFlashing(FFC, NPC)] Body Start
SETR d4,SP2
SETR d2,gd21; if() #667 Test
COMPAREV d2,1
SETCMP d2,I>=
COMPAREV d2,0
GOTOCMP 1868,==; Test 'if'
SETR d2,gd21; if() #667 Body Start
SUBV d2,1
SETR gd21,d2
SETR d2,gd21; if() #668 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1868,==; Test 'if'
SETV d2,1; if() #668 Body Start
STORE d2,0; if() #668 Body End
SETR d2,gd18; if() #667 Body End AND if() #669 Test
ANDV d2,8
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1933,==; Test 'if'
SETR d2,gd21; if() #399 Test AND if() #669 Body Start
COMPAREV d2,0
GOTOCMP 1879,<=
SETV d2,1
GOTO 1880
SETV d2,0
COMPAREV d2,0
GOTOCMP 1897,==; Test 'if'
SETR d2,gd27; if() #399 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,1
RSHIFTV d2,1
SUBV2 9,d2
PUSHR d2
LOAD d2,0.0002
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
GOTO 1933; if() #399 Body End
LOAD d2,0.0001; if() #400 Test AND if() #399 Else Start
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,64
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1921,==; Test 'if'
SETR d2,gd27; if() #400 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,1
ANDV d2,3
ADDV d2,6
PUSHR d2
LOAD d2,0.0002
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
GOTO 1933; if() #400 Body End
LOAD d2,0; if() #670 Test AND if() #400 Else Start
COMPAREV d2,0
GOTOCMP 1933,==; Test 'if'
SETR d2,gd12; if() #670 Body Start
PUSHR d2
LOAD d2,0.0002
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2; if() #670 Body End
POPARGS d5,0.0003; if() #400 Else End AND if() #399 Else End AND if() #669 Body End
RETURNFUNC; Func[void __Ghost_UpdateFlashing(FFC, NPC)] Body End
PUSHARGSV 0,0.0004; Func[void __Ghost_DrawShadow(NPC)] Body Start
SETR d4,SP2
SETR d2,gd4; if() #627 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2094,!=; Test 'if' AND return (Void) AND if() #627 Body
PUSHR d4; unless() #628 Test
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1962,!=
LOAD d2,0.0004
PUSHR d2
POP REFNPC
SETR d2,NPCEXTEND
COMPAREV d2,4
GOTOCMP 1962,==
LOAD d2,0.0004
PUSHR d2
POP REFNPC
SETR d2,NPCTYPE
COMPAREV d2,40
GOTOCMP 1962,==
SETV d2,0
GOTO 1963
SETV d2,1
COMPAREV d2,0
GOTOCMP 2094,==; Test 'unless' AND return (Void) AND unless() #628 Body
SETR d2,gd13; if() #371 Test
COMPAREV d2,3
GOTOCMP 1973,<
SETR d2,gd14
COMPAREV d2,3
GOTOCMP 1973,<
SETV d2,0
GOTO 1974
SETV d2,1
COMPAREV d2,0
GOTOCMP 2022,==; Test 'if'
SETR d2,gd2; if() #371 Body Start
PUSHR d2
SETR d2,gd13
SUBV d2,1
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd13
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORE d2,0.0003
SETR d2,gd3
PUSHR d2
SETR d2,gd14
SUBV d2,1
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORE d2,0.0002
SETV d2,1
STORE d2,0
PUSHR d4; if() #372 Test
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 2015,==; Test 'if'
SETV d2,27400; if() #372 Body Start
STORE d2,0.0001
GOTO 2076; if() #372 Body End
SETR d2,gd27; if() #372 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,2
ADDV d2,27400
STORE d2,0.0001; if() #372 Else End
GOTO 2076; if() #371 Body End
SETR d2,gd2; if() #371 Else Start
PUSHR d2
SETR d2,gd13
SUBV d2,2
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd13
SUBV d2,2
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORE d2,0.0003
SETR d2,gd3
PUSHR d2
SETR d2,gd14
SUBV d2,2
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
SUBV d2,2
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORE d2,0.0002
SETV d2,2
STORE d2,0
PUSHR d4; if() #373 Test
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 2061,==; Test 'if'
SETV d2,27392; if() #373 Body Start
STORE d2,0.0001
GOTO 2076; if() #373 Body End
SETR d2,gd27; if() #373 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,4
MULTV d2,2
SETV d2,2
PUSHR d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,4
POP d3
MULTR d2,d3
ADDV d2,27392
STORE d2,0.0001; if() #373 Else End
PUSHV 1; if() #371 Else End AND InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #374 [Opt:AlwaysOn]
LOAD d2,0.0003
PUSHR d2
LOAD d2,0.0002
PUSHR d2
LOAD d2,0.0001
PUSHR d2
LOAD d2,0
PUSHR d2
LOAD d2,0
PUSHR d2
PUSHV 7
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0004
PUSHV 1
PUSHV 64; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS d5,0.0005
RETURNFUNC; Func[void __Ghost_DrawShadow(NPC)] Body End
PUSHARGSV 0,0.0004; Func[void Ghost_WaitframeLight(FFC, NPC)] Body Start
SETR d4,SP2
ALLOCATEMEMV d2,24
STORE d2,0.0002
SETR d0,d2
PUSHR d0
SETR d2,gd2
POP d0
WRITEPODARRAYVR 0,d2
PUSHR d0
SETR d2,gd3
POP d0
WRITEPODARRAYVR 1,d2
PUSHR d0
SETR d2,gd4
POP d0
WRITEPODARRAYVR 2,d2
PUSHR d0
SETR d2,gd6
POP d0
WRITEPODARRAYVR 3,d2
PUSHR d0
SETR d2,gd7
POP d0
WRITEPODARRAYVR 4,d2
PUSHR d0
SETR d2,gd8
POP d0
WRITEPODARRAYVR 5,d2
PUSHR d0
SETR d2,gd9
POP d0
WRITEPODARRAYVR 6,d2
PUSHR d0
SETR d2,gd10
POP d0
WRITEPODARRAYVR 7,d2
PUSHR d0
SETR d2,gd19
POP d0
WRITEPODARRAYVR 8,d2
PUSHR d0
SETR d2,gd20
POP d0
WRITEPODARRAYVR 9,d2
PUSHR d0
SETR d2,gd12
POP d0
WRITEPODARRAYVR 10,d2
PUSHR d0
SETR d2,gd5
POP d0
WRITEPODARRAYVR 11,d2
PUSHR d0
SETR d2,gd11
POP d0
WRITEPODARRAYVR 12,d2
PUSHR d0
SETR d2,gd13
POP d0
WRITEPODARRAYVR 13,d2
PUSHR d0
SETR d2,gd14
POP d0
WRITEPODARRAYVR 14,d2
PUSHR d0
SETR d2,gd16
POP d0
WRITEPODARRAYVR 15,d2
PUSHR d0
SETR d2,gd17
POP d0
WRITEPODARRAYVR 16,d2
PUSHR d0
SETR d2,gd18
POP d0
WRITEPODARRAYVR 17,d2
PUSHR d0
SETR d2,gd21
POP d0
WRITEPODARRAYVR 18,d2
PUSHR d0
SETR d2,gd22
POP d0
WRITEPODARRAYVR 19,d2
PUSHR d0
SETR d2,gd15
POP d0
WRITEPODARRAYVR 20,d2
PUSHR d0
SETR d2,gd23
POP d0
WRITEPODARRAYVR 21,d2
PUSHR d0
SETR d2,gd24
POP d0
WRITEPODARRAYVR 22,d2
ALLOCATEMEMV d2,21
STORE d2,0.0001
SETR d2,gd26; if() #355 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 2225,==; Test 'if'
LOAD d2,0; for() #67 LoopTest AND if() #355 Body Start
COMPAREV d2,21
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 2225,==; for() #67 TestFail?
SETR d2,gd26; for() #67 Body Start
PUSHR d2
LOAD d2,0
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOAD d2,0.0001
PUSHR d2
LOAD d2,0
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2; for() #67 Body End
LOAD d2,0; for() #67 LoopIncrement
ADDV d2,1
STORE d2,0
GOTO 2203; for() #67 End
LOAD d2,0.0004; if() #355 Body End AND InlineFunc[bool NPC->isValid()] Params AND if() #356 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOCMP 2242,==; Test 'if'
LOAD d2,0.0002; if() #356 Body Start
ORV d2,65536
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2; if() #356 Body End
LOAD d2,0.0004; InlineFunc[bool NPC->isValid()] Params AND if() #165 Test AND do-while() #2 Body Start
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOCMP 2304,==; Test 'if'
SETR d2,gd26; if() #167 Test AND if(true) #166 [Opt:AlwaysOn] AND if() #165 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 2279,==; Test 'if'
ALLOCATEMEMV d2,34; if() #167 Body Start
STORE d2,0
PUSHR d4
LOAD d2,0.0005; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params Start
PUSHR d2
LOAD d2,0.0004
PUSHR d2
LOAD d2,0
PUSHR d2; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params End
CALLFUNC 0.5217; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Call
POP d4
LOAD d2,0
PUSHR d2
LOAD d2,0.0002
SETR d0,d2
POP d2
WRITEPODARRAYVR 23,d2
PUSHR d4
LOAD d2,0.0005; UsrFunc[void __HideFFCAndWait(FFC)] Params Start
PUSHR d2; UsrFunc[void __HideFFCAndWait(FFC)] Params End
CALLFUNC 0.5490; UsrFunc[void __HideFFCAndWait(FFC)] Call
POP d4
LOAD d3,0
DEALLOCATEMEMR d3
GOTO 2309; if() #167 Body End
ALLOCATEMEMV d2,10; if() #167 Else Start
STORE d2,0
PUSHR d4
LOAD d2,0.0005; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params Start
PUSHR d2
LOAD d2,0.0004
PUSHR d2
LOAD d2,0
PUSHR d2; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params End
CALLFUNC 0.5217; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Call
POP d4
LOAD d2,0
PUSHR d2
LOAD d2,0.0002
SETR d0,d2
POP d2
WRITEPODARRAYVR 23,d2
PUSHR d4
LOAD d2,0.0005; UsrFunc[void __HideFFCAndWait(FFC)] Params Start
PUSHR d2; UsrFunc[void __HideFFCAndWait(FFC)] Params End
CALLFUNC 0.5490; UsrFunc[void __HideFFCAndWait(FFC)] Call
POP d4
LOAD d3,0
DEALLOCATEMEMR d3; if() #167 Else End
GOTO 2309; if() #165 Body End
PUSHR d4; if() #165 Else Start
LOAD d2,0.0005; UsrFunc[void __HideFFCAndWait(FFC)] Params Start
PUSHR d2; UsrFunc[void __HideFFCAndWait(FFC)] Params End
CALLFUNC 0.5490; UsrFunc[void __HideFFCAndWait(FFC)] Call
POP d4; if() #165 Else End
LOAD d2,0.0002
PUSHR d2
POP d0
READPODARRAYV d2,0
SETR gd2,d2
LOAD d2,0.0002
PUSHR d2
POP d0
READPODARRAYV d2,1
SETR gd3,d2
LOAD d2,0.0002
PUSHR d2
POP d0
READPODARRAYV d2,2
SETR gd4,d2
LOAD d2,0.0002
PUSHR d2
POP d0
READPODARRAYV d2,3
SETR gd6,d2
LOAD d2,0.0002
PUSHR d2
POP d0
READPODARRAYV d2,4
SETR gd7,d2
LOAD d2,0.0002
PUSHR d2
POP d0
READPODARRAYV d2,5
SETR gd8,d2
LOAD d2,0.0002
PUSHR d2
POP d0
READPODARRAYV d2,6
SETR gd9,d2
LOAD d2,0.0002
PUSHR d2
POP d0
READPODARRAYV d2,7
SETR gd10,d2
LOAD d2,0.0002
PUSHR d2
POP d0
READPODARRAYV d2,8
SETR gd19,d2
LOAD d2,0.0002
PUSHR d2
POP d0
READPODARRAYV d2,9
SETR gd20,d2
LOAD d2,0.0002
PUSHR d2
POP d0
READPODARRAYV d2,10
SETR gd12,d2
LOAD d2,0.0002
PUSHR d2
POP d0
READPODARRAYV d2,11
SETR gd5,d2
LOAD d2,0.0002
PUSHR d2
POP d0
READPODARRAYV d2,12
SETR gd11,d2
LOAD d2,0.0002
PUSHR d2
POP d0
READPODARRAYV d2,13
SETR gd13,d2
LOAD d2,0.0002
PUSHR d2
POP d0
READPODARRAYV d2,14
SETR gd14,d2
LOAD d2,0.0002
PUSHR d2
POP d0
READPODARRAYV d2,15
SETR gd16,d2
LOAD d2,0.0002
PUSHR d2
POP d0
READPODARRAYV d2,16
SETR gd17,d2
LOAD d2,0.0002
PUSHR d2
POP d0
READPODARRAYV d2,17
SETR gd18,d2
LOAD d2,0.0002
PUSHR d2
POP d0
READPODARRAYV d2,18
SETR gd21,d2
LOAD d2,0.0002
PUSHR d2
POP d0
READPODARRAYV d2,19
SETR gd22,d2
LOAD d2,0.0002
PUSHR d2
POP d0
READPODARRAYV d2,20
SETR gd15,d2
LOAD d2,0.0002
PUSHR d2
POP d0
READPODARRAYV d2,21
SETR gd23,d2
LOAD d2,0.0002
PUSHR d2
POP d0
READPODARRAYV d2,22
SETR gd24,d2
LOAD d2,0.0001; if() #168 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 2456,==; Test 'if'
STOREV 0,0; for() #68 setup AND if() #168 Body Start
LOAD d2,0; for() #68 LoopTest
COMPAREV d2,21
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 2462,==; for() #68 TestFail?
LOAD d2,0.0001; for() #68 Body Start
PUSHR d2
LOAD d2,0
POP d0
READPODARRAYR d2,d2
PUSHR d2
SETR d2,gd26
PUSHR d2
LOAD d2,0
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2; for() #68 Body End
LOAD d2,0; for() #68 LoopIncrement
ADDV d2,1
STORE d2,0
GOTO 2433; for() #68 End
GOTO 2462; if() #168 Body End
SETV d2,0; if() #168 Else Start
PUSHR d2
SETR d2,gd26
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2; if() #168 Else End
SETR d2,gd27; do-while() #2 Body End AND do-while() #2 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 2242,!=; Test 'while'
LOAD d2,0.0004; InlineFunc[bool NPC->isValid()] Params AND if() #357 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOCMP 2487,==; Test 'if'
SETV d2,65536; if() #357 Body Start
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2; if() #357 Body End
LOAD d3,0.0001
DEALLOCATEMEMR d3
LOAD d3,0.0002
DEALLOCATEMEMR d3
POPARGS d5,0.0006
RETURNFUNC; Func[void Ghost_WaitframeLight(FFC, NPC)] Body End
SETR d4,SP2; Func[void Ghost_SetPosition(FFC, NPC)] Body Start
LOAD d2,0; InlineFunc[bool NPC->isValid()] Params AND unless() #324 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOCMP 2625,==; Test 'unless' AND return (Void) AND unless() #324 Body
PUSHR d4; if() #159 Test
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 2506,!=
SETV d2,1
GOTO 2507
SETV d2,0
COMPAREV d2,0
GOTOCMP 2537,==; Test 'if'
SETR d2,gd2; if() #159 Body Start
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETR d2,gd3
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETR d2,gd4
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2
GOTO 2569; if() #159 Body End
SETR d2,gd2; if() #159 Else Start
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETR d2,gd3
PUSHR d2
SETR d2,gd4
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETV d2,0
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2; if() #159 Else End
PUSHR d4
SETR d2,gd2; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR d2
LOAD d2,0
PUSHR d2
POP REFNPC
SETR d2,NPCXOFS
POP d3
ADDR d2,d3
PUSHR d2
PUSHV -64
PUSHV 256; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0195; UsrFunc[int Clamp(int, int, int)] Call
POP d4
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
PUSHR d4
SETR d2,gd3; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR d2
SETR d2,gd4
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOAD d2,0
PUSHR d2
POP REFNPC
SETR d2,NPCYOFS
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0
PUSHR d2
POP REFNPC
SETR d2,NPCZOFS
POP d3
SUBR d3,d2
PUSHR d3
PUSHV -64
PUSHV 176; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0195; UsrFunc[int Clamp(int, int, int)] Call
POP d4
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void Ghost_SetPosition(FFC, NPC)] Body End
PUSHARGSV 0,0.0005; Func[void Ghost_CheckHit(FFC, NPC)] Body Start
SETR d4,SP2
LOAD d2,0.0005; if() #260 Test
PUSHR d2
POP REFNPC
SETR d2,NPCHP
PUSHR d2
SETR d2,gd15
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 2796,==; Test 'if'
SETR d2,gd18; if() #260 Body Start
ORV d2,1
SETR gd18,d2
LOAD d2,0.0005
PUSHR d2
POP REFNPC
SETR d2,NPCHP
SETR gd15,d2
SETR d2,gd21; if() #261 Test
COMPAREV d2,32
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 2655,==; Test 'if'
SETV d2,32; if() #261 Body Start
SETR gd21,d2; if() #261 Body End
PUSHR d4; if() #262 Test
PUSHV 1; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 2796,==; Test 'if'
SETR d2,LINKX; if() #262 Body Start
PUSHR d2
SETR d2,gd2
POP d3
SUBR d3,d2
SETR d2,d3
STORE d2,0.0004
SETR d2,LINKY
PUSHR d2
SETR d2,gd3
POP d3
SUBR d3,d2
SETR d2,d3
STORE d2,0.0003
LOAD d2,0.0004; InlineFunc[int Abs(int)] Params AND if() #87 Test
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
SETR d2,gd13
ADDV d2,1
MULTV d2,16
POP d3
COMPARER d3,d2
GOTOCMP 2695,>=
LOAD d2,0.0003; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
SETR d2,gd14
ADDV d2,1
MULTV d2,16
POP d3
COMPARER d3,d2
GOTOCMP 2695,>=
SETV d2,1
GOTO 2696
SETV d2,0
COMPAREV d2,0
GOTOCMP 2725,==; Test 'if'
SETR d2,LINKDIR; if() #263 Test AND if() #87 Body Start
ANDV d2,2
PUSHR d2
SETR d2,gd5
ANDV d2,2
POP d3
COMPARER d3,d2
GOTOCMP 2717,==
SETR d2,gd5
COMPAREV d2,3
GOTOCMP 2717,>
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 2717,!=
SETV d2,0
GOTO 2718
SETV d2,1
COMPAREV d2,0
GOTOCMP 2796,==; Test 'if'
SETR d2,LINKDIR; if() #263 Body Start
LSHIFTV d2,12
ORV d2,16
SETR gd22,d2; if() #263 Body End
GOTO 2796; if() #87 Body End
LOAD d2,0.0004; InlineFunc[int Abs(int)] Params AND if() #88 Test AND if() #87 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOAD d2,0.0003; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 2766,==; Test 'if'
SETR d2,gd5; if() #264 Test AND if() #88 Body Start
COMPAREV d2,0
GOTOCMP 2752,==
SETR d2,gd5
COMPAREV d2,1
GOTOCMP 2752,==
SETR d2,gd5
COMPAREV d2,3
GOTOCMP 2752,>
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 2752,!=
SETV d2,0
GOTO 2753
SETV d2,1
COMPAREV d2,0
GOTOCMP 2796,==; Test 'if'
LOAD d2,0.0003; if() #89 Test AND if() #264 Body Start
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 2763,==; Test 'if'
SETV d2,16; if() #89 Body Start
SETR gd22,d2
GOTO 2796; if() #89 Body End
SETV d2,4112; if() #89 Else Start
SETR gd22,d2; if() #89 Else End
GOTO 2796; if() #264 Body End AND if() #88 Body End
SETR d2,gd5; if() #265 Test AND if() #88 Else Start
COMPAREV d2,2
GOTOCMP 2783,==
SETR d2,gd5
COMPAREV d2,3
GOTOCMP 2783,==
SETR d2,gd5
COMPAREV d2,3
GOTOCMP 2783,>
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 2783,!=
SETV d2,0
GOTO 2784
SETV d2,1
COMPAREV d2,0
GOTOCMP 2796,==; Test 'if'
LOAD d2,0.0004; if() #90 Test AND if() #265 Body Start
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 2794,==; Test 'if'
SETV d2,8208; if() #90 Body Start
SETR gd22,d2
GOTO 2796; if() #90 Body End
SETV d2,12304; if() #90 Else Start
SETR gd22,d2; if() #90 Else End
SETR d2,gd22; if() #265 Body End AND if() #88 Else End AND if() #87 Else End AND if() #262 Body End AND if() #260 Body End AND if() #266 Test
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 3021,==; Test 'if'
SETR d2,gd22; if() #266 Body Start
RSHIFTV d2,12
STORE d2,0.0004
SETR d2,gd22
ANDV d2,4095
STORE d2,0.0003
STOREV 4,0.0002
PUSHR d4; if() #267 Test
PUSHV 5; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 2817,==; Test 'if'
LOAD d2,0.0002; if() #267 Body Start
DIVV d2,2
STORE d2,0.0002; if() #267 Body End
PUSHR d4; if() #91 Test
LOAD d2,0.0004; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR d2
LOAD d2,0.0002
PUSHR d2
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0331; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 2923,==; Test 'if'
LOAD d2,0.0003; if() #91 Body Start
SUBV d2,1
STORE d2,0.0003
LOAD d2,0.0003; if() #92 Test
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 2843,==; Test 'if'
LOAD d2,0.0004; if() #92 Body Start
LSHIFTV d2,12
PUSHR d2
LOAD d2,0.0003
POP d3
ORR d2,d3
SETR gd22,d2
GOTO 2845; if() #92 Body End
SETV d2,0; if() #92 Else Start
SETR gd22,d2; if() #92 Else End
LOAD d2,0.0004; if() #93 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2854,==; Test 'if'
LOAD d2,0.0002; if() #93 Body Start
SUBV2 0,d2
STORE d2,0
GOTO 2873; if() #93 Body End
LOAD d2,0.0004; if() #94 Test AND if() #93 Else Start
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2862,==; Test 'if'
LOAD d2,0.0002; if() #94 Body Start
STORE d2,0
GOTO 2873; if() #94 Body End
LOAD d2,0.0004; if() #95 Test AND if() #94 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2871,==; Test 'if'
LOAD d2,0.0002; if() #95 Body Start
SUBV2 0,d2
STORE d2,0.0001
GOTO 2873; if() #95 Body End
LOAD d2,0.0002; if() #95 Else Start
STORE d2,0.0001; if() #95 Else End
LOAD d2,0.0001; if() #94 Else End AND if() #93 Else End AND if() #96 Test
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 2898,==; Test 'if'
SETR d2,gd2; if() #96 Body Start
PUSHR d2
LOAD d2,0.0001
POP d3
ADDR d2,d3
SETR gd2,d2
SETR d2,gd19
PUSHR d2
LOAD d2,0.0001
POP d3
ADDR d2,d3
SETR gd19,d2
PUSHR d4
LOAD d2,0.0006; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOAD d2,0.0005
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2493; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
GOTO 3021; if() #96 Body End
LOAD d2,0; if() #268 Test AND if() #96 Else Start
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 3021,==; Test 'if'
SETR d2,gd3; if() #268 Body Start
PUSHR d2
LOAD d2,0
POP d3
ADDR d2,d3
SETR gd3,d2
SETR d2,gd20
PUSHR d2
LOAD d2,0
POP d3
ADDR d2,d3
SETR gd20,d2
PUSHR d4
LOAD d2,0.0006; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOAD d2,0.0005
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2493; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4; if() #268 Body End
GOTO 3021; if() #96 Else End AND if() #91 Body End
STOREV -1,0.0001; if() #91 Else Start
STOREV -1,0
SETV d2,0
SETR gd22,d2
SETR d2,gd18
ORV d2,16
SETR gd18,d2
LOAD d2,0.0004; if() #97 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2941,==; Test 'if'
SETR d2,gd3; InlineFunc[untyped Floor(untyped)] Params Start AND if() #97 Body Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
MULTV d2,8
STORE d2,0
GOTO 2970; if() #97 Body End
LOAD d2,0.0004; if() #98 Test AND if() #97 Else Start
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2953,==; Test 'if'
SETR d2,gd3; InlineFunc[untyped Ceiling(untyped)] Params Start AND if() #98 Body Start
LSHIFTV d2,0
DIVV d2,8; InlineFunc[untyped Ceiling(untyped)] Params End
CEILING d2; InlineFunc[untyped Ceiling(untyped)] Body
MULTV d2,8
STORE d2,0
GOTO 2970; if() #98 Body End
LOAD d2,0.0004; if() #99 Test AND if() #98 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2964,==; Test 'if'
SETR d2,gd2; InlineFunc[untyped Floor(untyped)] Params Start AND if() #99 Body Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
MULTV d2,8
STORE d2,0.0001
GOTO 2970; if() #99 Body End
SETR d2,gd2; InlineFunc[untyped Ceiling(untyped)] Params Start AND if() #99 Else Start
LSHIFTV d2,0
DIVV d2,8; InlineFunc[untyped Ceiling(untyped)] Params End
CEILING d2; InlineFunc[untyped Ceiling(untyped)] Body
MULTV d2,8
STORE d2,0.0001; if() #99 Else End
LOAD d2,0.0001; if() #98 Else End AND if() #97 Else End AND if() #100 Test
COMPAREV d2,-1
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 2996,==; Test 'if'
SETR d2,gd19; if() #100 Body Start
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETR d2,gd2
POP d3
SUBR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
SETR gd19,d2
LOAD d2,0.0001
SETR gd2,d2
PUSHR d4
LOAD d2,0.0006; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOAD d2,0.0005
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2493; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
GOTO 3021; if() #100 Body End
LOAD d2,0; if() #269 Test AND if() #100 Else Start
COMPAREV d2,-1
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 3021,==; Test 'if'
SETR d2,gd20; if() #269 Body Start
PUSHR d2
LOAD d2,0
PUSHR d2
SETR d2,gd3
POP d3
SUBR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
SETR gd20,d2
LOAD d2,0
SETR gd3,d2
PUSHR d4
LOAD d2,0.0006; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOAD d2,0.0005
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2493; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4; if() #269 Body End
POPARGS d5,0.0007; if() #100 Else End AND if() #91 Else End AND if() #266 Body End
RETURNFUNC; Func[void Ghost_CheckHit(FFC, NPC)] Body End
SETR d4,SP2; Func[void Ghost_ClearCombos()] Body Start
SETV d2,0
PUSHR d2
SETR d2,gd26
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
RETURNFUNC; Func[void Ghost_ClearCombos()] Body End
SETR d4,SP2; Func[void Ghost_SetFlag(int)] Body Start
LOAD d2,0; if() #158 Test
ANDV d2,65536
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 3049,==; Test 'if'
SETR d2,gd17; if() #158 Body Start
PUSHR d2
LOAD d2,0
ANDV d2,65535
SETV d3,1
LSHIFTR d3,d2
SETR d2,d3
POP d3
ORR d2,d3
SETR gd17,d2
GOTO 3055; if() #158 Body End
SETR d2,gd16; if() #158 Else Start
PUSHR d2
LOAD d2,0
POP d3
ORR d2,d3
SETR gd16,d2; if() #158 Else End
POP d5
RETURNFUNC; Func[void Ghost_SetFlag(int)] Body End
SETR d4,SP2; Func[void Ghost_UnsetFlag(int)] Body Start
LOAD d2,0; if() #160 Test
ANDV d2,65536
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 3075,==; Test 'if'
SETR d2,gd17; if() #160 Body Start
PUSHR d2
LOAD d2,0
ANDV d2,65535
SETV d3,-2
LSHIFTR d3,d2
SETR d2,d3
POP d3
ANDR d2,d3
SETR gd17,d2
GOTO 3082; if() #160 Body End
SETR d2,gd16; if() #160 Else Start
PUSHR d2
LOAD d2,0
BITNOT d2
POP d3
ANDR d2,d3
SETR gd16,d2; if() #160 Else End
POP d5
RETURNFUNC; Func[void Ghost_UnsetFlag(int)] Body End
PUSHARGSV 0,0.0004; Func[void Ghost_MoveXY(int, int, int)] Body Start
SETR d4,SP2
LOAD d2,0.0005; if() #316 Test
COMPAREV d2,0
GOTOCMP 3102,>=
PUSHR d4
CALLFUNC 0.4307; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOCMP 3102,==
PUSHR d4
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 3102,!=
SETV d2,1
GOTO 3103
SETV d2,0
COMPAREV d2,0
GOTOCMP 3107,==; Test 'if'
SETV d2,0; if() #316 Body Start
STORE d2,0.0005; if() #316 Body End
LOAD d2,0.0006; while() #3 Test AND InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,8
GOTOCMP 3117,>
LOAD d2,0.0005; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,8
GOTOCMP 3117,>
SETV d2,0
GOTO 3118
SETV d2,1
COMPAREV d2,0
GOTOCMP 3184,==; Test 'while'
LOAD d2,0.0006; InlineFunc[int Abs(int)] Params AND if() #141 Test AND while() #3 Body Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOAD d2,0.0005; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETCMP d2,I>=
COMPAREV d2,0
GOTOCMP 3157,==; Test 'if'
LOAD d2,0.0006; if() #142 Test AND if() #141 Body Start
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 3146,==; Test 'if'
PUSHR d4; if() #142 Body Start
PUSHV 8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOAD d2,0.0004
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3084; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOAD d2,0.0006
SUBV d2,8
STORE d2,0.0006
GOTO 3107; if() #142 Body End
PUSHR d4; if() #142 Else Start
PUSHV -8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOAD d2,0.0004
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3084; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOAD d2,0.0006
ADDV d2,8
STORE d2,0.0006; if() #142 Else End
GOTO 3107; if() #141 Body End
LOAD d2,0.0005; if() #143 Test AND if() #141 Else Start
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 3173,==; Test 'if'
PUSHR d4; if() #143 Body Start
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 8
LOAD d2,0.0004
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3084; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOAD d2,0.0005
SUBV d2,8
STORE d2,0.0005
GOTO 3107; if() #143 Body End
PUSHR d4; if() #143 Else Start
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV -8
LOAD d2,0.0004
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3084; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOAD d2,0.0005
ADDV d2,8
STORE d2,0.0005; if() #143 Else End
GOTO 3107; if() #141 Else End AND while() #3 Body End AND while() #3 End
LOAD d2,0.0006; if() #144 Test
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 3255,==; Test 'if'
SETR d2,gd23; if() #144 Body Start
RSHIFTV d2,8
STORE d2,0.0002
SETR d2,gd2
PUSHR d2
LOAD d2,0.0002
POP d3
ADDR d2,d3
STORE d2,0.0003
LOAD d2,0.0003; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORE d2,0.0001
LOAD d2,0.0003; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOAD d2,0.0006
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORE d2,0
LOAD d2,0.0001; if() #145 Test
PUSHR d2
LOAD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3225,==; Test 'if'
LOAD d2,0.0003; if() #145 Body Start
PUSHR d2
LOAD d2,0.0006
POP d3
ADDR d2,d3
STORE d2,0.0003
GOTO 3247; if() #145 Body End
PUSHR d4; if() #146 Test AND if() #145 Else Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD d2,0.0006
SUBV2 0,d2
PUSHR d2
LOAD d2,0.0004
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0331; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 3243,==; Test 'if'
LOAD d2,0.0003; if() #146 Body Start
PUSHR d2
LOAD d2,0.0006
POP d3
ADDR d2,d3
STORE d2,0.0003
GOTO 3247; if() #146 Body End
LOAD d2,0.0003; if() #146 Else Start
RSHIFTV d2,3
LSHIFTV d2,3
STORE d2,0.0003; if() #146 Else End
LOAD d2,0.0003; if() #145 Else End
PUSHR d2
LOAD d2,0.0002
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
GOTO 3338; if() #144 Body End
LOAD d2,0.0006; if() #317 Test AND if() #144 Else Start
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 3338,==; Test 'if'
SETR d2,gd13; if() #317 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
STORE d2,0.0002
SETR d2,gd2
PUSHR d2
LOAD d2,0.0002
POP d3
ADDR d2,d3
STORE d2,0.0003
LOAD d2,0.0003; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORE d2,0.0001
LOAD d2,0.0003; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOAD d2,0.0006
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORE d2,0
LOAD d2,0.0001; if() #147 Test
PUSHR d2
LOAD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3308,==; Test 'if'
LOAD d2,0.0003; if() #147 Body Start
PUSHR d2
LOAD d2,0.0006
POP d3
ADDR d2,d3
STORE d2,0.0003
GOTO 3331; if() #147 Body End
PUSHR d4; if() #148 Test AND if() #147 Else Start
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD d2,0.0006
PUSHR d2
LOAD d2,0.0004
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0331; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 3325,==; Test 'if'
LOAD d2,0.0003; if() #148 Body Start
PUSHR d2
LOAD d2,0.0006
POP d3
ADDR d2,d3
STORE d2,0.0003
GOTO 3331; if() #148 Body End
LOAD d2,0.0003; if() #148 Else Start
ADDV d2,7
RSHIFTV d2,3
LSHIFTV d2,3
SUBV d2,1
STORE d2,0.0003; if() #148 Else End
LOAD d2,0.0003; if() #147 Else End
PUSHR d2
LOAD d2,0.0002
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2; if() #317 Body End
LOAD d2,0.0005; if() #144 Else End AND if() #149 Test
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 3409,==; Test 'if'
SETR d2,gd24; if() #149 Body Start
RSHIFTV d2,8
STORE d2,0.0002
SETR d2,gd3
PUSHR d2
LOAD d2,0.0002
POP d3
ADDR d2,d3
STORE d2,0.0003
LOAD d2,0.0003; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORE d2,0.0001
LOAD d2,0.0003; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOAD d2,0.0005
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORE d2,0
LOAD d2,0.0001; if() #150 Test
PUSHR d2
LOAD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3379,==; Test 'if'
LOAD d2,0.0003; if() #150 Body Start
PUSHR d2
LOAD d2,0.0005
POP d3
ADDR d2,d3
STORE d2,0.0003
GOTO 3401; if() #150 Body End
PUSHR d4; if() #151 Test AND if() #150 Else Start
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD d2,0.0005
SUBV2 0,d2
PUSHR d2
LOAD d2,0.0004
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0331; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 3397,==; Test 'if'
LOAD d2,0.0003; if() #151 Body Start
PUSHR d2
LOAD d2,0.0005
POP d3
ADDR d2,d3
STORE d2,0.0003
GOTO 3401; if() #151 Body End
LOAD d2,0.0003; if() #151 Else Start
RSHIFTV d2,3
LSHIFTV d2,3
STORE d2,0.0003; if() #151 Else End
LOAD d2,0.0003; if() #150 Else End
PUSHR d2
LOAD d2,0.0002
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
GOTO 3492; if() #149 Body End
LOAD d2,0.0005; if() #318 Test AND if() #149 Else Start
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 3492,==; Test 'if'
SETR d2,gd14; if() #318 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
STORE d2,0.0002
SETR d2,gd3
PUSHR d2
LOAD d2,0.0002
POP d3
ADDR d2,d3
STORE d2,0.0003
LOAD d2,0.0003; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORE d2,0.0001
LOAD d2,0.0003; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOAD d2,0.0005
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORE d2,0
LOAD d2,0.0001; if() #152 Test
PUSHR d2
LOAD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3462,==; Test 'if'
LOAD d2,0.0003; if() #152 Body Start
PUSHR d2
LOAD d2,0.0005
POP d3
ADDR d2,d3
STORE d2,0.0003
GOTO 3485; if() #152 Body End
PUSHR d4; if() #153 Test AND if() #152 Else Start
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD d2,0.0005
PUSHR d2
LOAD d2,0.0004
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0331; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 3479,==; Test 'if'
LOAD d2,0.0003; if() #153 Body Start
PUSHR d2
LOAD d2,0.0005
POP d3
ADDR d2,d3
STORE d2,0.0003
GOTO 3485; if() #153 Body End
LOAD d2,0.0003; if() #153 Else Start
ADDV d2,7
RSHIFTV d2,3
LSHIFTV d2,3
SUBV d2,1
STORE d2,0.0003; if() #153 Else End
LOAD d2,0.0003; if() #152 Else End
PUSHR d2
LOAD d2,0.0002
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2; if() #318 Body End
PUSHR d4; if() #149 Else End AND if() #319 Test
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 3504,==
SETR d2,gd18
ANDV d2,4
COMPAREV d2,0
GOTOCMP 3504,!=
SETV d2,1
GOTO 3505
SETV d2,0
COMPAREV d2,0
GOTOCMP 3562,==; Test 'if'
PUSHR d4; if() #154 Test AND if() #319 Body Start
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 3527,==; Test 'if'
PUSHR d4; if() #154 Body Start
LOAD d2,0.0006; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapAngle(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR d2
LOAD d2,0.0005
SETR d1,d2; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapAngle(int)] Params End
WRAPRADIANS d2; InlineFunc[int WrapAngle(int)] Body
MULTV d2,57.2958
PUSHR d2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 0.0100; UsrFunc[int AngleDir8(int)] Call
POP d4
SETR gd5,d2
GOTO 3558; if() #154 Body End
LOAD d2,0.0006; InlineFunc[int Abs(int)] Params AND if() #155 Test AND if() #154 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOAD d2,0.0005; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 3548,==; Test 'if'
LOAD d2,0.0005; if() #156 Test AND if() #155 Body Start
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 3545,==; Test 'if'
SETV d2,0; if() #156 Body Start
SETR gd5,d2
GOTO 3558; if() #156 Body End
SETV d2,1; if() #156 Else Start
SETR gd5,d2; if() #156 Else End
GOTO 3558; if() #155 Body End
LOAD d2,0.0006; if() #157 Test AND if() #155 Else Start
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 3556,==; Test 'if'
SETV d2,2; if() #157 Body Start
SETR gd5,d2
GOTO 3558; if() #157 Body End
SETV d2,3; if() #157 Else Start
SETR gd5,d2; if() #157 Else End
SETR d2,gd2; if() #155 Else End AND if() #154 Else End
SETR gd19,d2
SETR d2,gd3
SETR gd20,d2; if() #319 Body End
POPARGS d5,0.0007
RETURNFUNC; Func[void Ghost_MoveXY(int, int, int)] Body End
PUSHV 0; Func[void __GhCleanUp(FFC)] Body Start
SETR d4,SP2
SETV d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
SETV d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
SETV d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
SETV d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
SETV d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
SETV d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
SETV d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2
SETV d2,1
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTWIDTH,d2
SETV d2,1
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTHEIGHT,d2
SETV d2,16
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFCWIDTH,d2
SETV d2,16
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFCHEIGHT,d2
SETV d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DELAY,d2
LOAD d2,0; for() #170 LoopTest
COMPAREV d2,11
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 3695,==; for() #170 TestFail?
SETV d2,0; for() #170 Body Start
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
LOAD d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; for() #170 Body End
LOAD d2,0; for() #170 LoopIncrement
ADDV d2,1
STORE d2,0
GOTO 3674; for() #170 End
POPARGS d5,0.0002
RETURNFUNC; Func[void __GhCleanUp(FFC)] Body End
SETR d4,SP2; Func[void Ghost_ForceDir(int)] Body Start
LOAD d2,0
SETR gd5,d2
SETR d2,gd18
ORV d2,4
SETR gd18,d2
POP d5
RETURNFUNC; Func[void Ghost_ForceDir(int)] Body End
PUSHARGSV 0,0.0002; Func[void Ghost_Move(int, int, int)] Body Start
SETR d4,SP2
LOAD d2,0.0004; if() #133 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3716,==; Test 'if'
LOAD d2,0.0003; if() #133 Body Start
SUBV2 0,d2
STORE d2,0
GOTO 3794; if() #133 Body End
LOAD d2,0.0004; if() #134 Test AND if() #133 Else Start
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3724,==; Test 'if'
LOAD d2,0.0003; if() #134 Body Start
STORE d2,0
GOTO 3794; if() #134 Body End
LOAD d2,0.0004; if() #135 Test AND if() #134 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3733,==; Test 'if'
LOAD d2,0.0003; if() #135 Body Start
SUBV2 0,d2
STORE d2,0.0001
GOTO 3794; if() #135 Body End
LOAD d2,0.0004; if() #136 Test AND if() #135 Else Start
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3741,==; Test 'if'
LOAD d2,0.0003; if() #136 Body Start
STORE d2,0.0001
GOTO 3794; if() #136 Body End
LOAD d2,0.0004; if() #137 Test AND if() #136 Else Start
COMPAREV d2,4
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3755,==; Test 'if'
LOAD d2,0.0003; if() #137 Body Start
SUBV2 0,d2
MULTV d2,0.7071
STORE d2,0.0001
LOAD d2,0.0003
SUBV2 0,d2
MULTV d2,0.7071
STORE d2,0
GOTO 3794; if() #137 Body End
LOAD d2,0.0004; if() #138 Test AND if() #137 Else Start
COMPAREV d2,5
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3768,==; Test 'if'
LOAD d2,0.0003; if() #138 Body Start
MULTV d2,0.7071
STORE d2,0.0001
LOAD d2,0.0003
SUBV2 0,d2
MULTV d2,0.7071
STORE d2,0
GOTO 3794; if() #138 Body End
LOAD d2,0.0004; if() #139 Test AND if() #138 Else Start
COMPAREV d2,6
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3781,==; Test 'if'
LOAD d2,0.0003; if() #139 Body Start
SUBV2 0,d2
MULTV d2,0.7071
STORE d2,0.0001
LOAD d2,0.0003
MULTV d2,0.7071
STORE d2,0
GOTO 3794; if() #139 Body End
LOAD d2,0.0004; if() #140 Test AND if() #139 Else Start
COMPAREV d2,7
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3803,==; Test 'if'
LOAD d2,0.0003; if() #140 Body Start
MULTV d2,0.7071
STORE d2,0.0001
LOAD d2,0.0003
MULTV d2,0.7071
STORE d2,0
GOTO 3794; if() #140 Body End
GOTO 3803; return (Void) AND if() #140 Else
PUSHR d4; if() #139 Else End AND if() #138 Else End AND if() #137 Else End AND if() #136 Else End AND if() #135 Else End AND if() #134 Else End AND if() #133 Else End
LOAD d2,0.0001; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR d2
LOAD d2,0
PUSHR d2
LOAD d2,0.0002
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3084; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
POPARGS d5,0.0005
RETURNFUNC; Func[void Ghost_Move(int, int, int)] Body End
SETR d4,SP2; Func[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Body Start
LOAD d2,0.0001; if() #634 Test
COMPAREV d2,-1
GOTOCMP 3814,==
LOAD d2,0.0001
COMPAREV d2,-2
GOTOCMP 3814,==
SETV d2,0
GOTO 3815
SETV d2,1
COMPAREV d2,0
GOTOCMP 3819,==; Test 'if'
SETV d2,1; if() #634 Body Start
STORE d2,0.0001; if() #634 Body End
LOAD d2,0.0001
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOAD d2,0.0001
SETR gd11,d2
LOAD d2,0
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
LOAD d2,0
SETR gd12,d2
LOAD d2,0.0002; if() #377 Test
COMPAREV d2,0
GOTOCMP 3865,==; Test 'if'
LOAD d2,0.0003; if() #377 Body Start
PUSHR d2
POP REFNPC
SETR d2,NPCX
SETR gd2,d2
LOAD d2,0.0003
PUSHR d2
POP REFNPC
SETR d2,NPCY
SETR gd3,d2
LOAD d2,0.0003
PUSHR d2
POP REFNPC
SETR d2,NPCZ
SETR gd4,d2
LOAD d2,0.0003
PUSHR d2
POP REFNPC
SETR d2,NPCJUMP
SETR gd6,d2
GOTO 3897; if() #377 Body End
LOAD d2,0.0004; if() #377 Else Start
PUSHR d2
POP REFFFC
SETR d2,X
SETR gd2,d2
LOAD d2,0.0004
PUSHR d2
POP REFFFC
SETR d2,Y
SETR gd3,d2
SETV d2,0
SETR gd4,d2
SETV d2,0
SETR gd6,d2
SETV d2,0
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2
SETV d2,0
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCJUMP,d2; if() #377 Else End
PUSHR d4
LOAD d2,0.0004; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOAD d2,0.0003
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2493; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
LOAD d2,0.0003
PUSHR d2
POP REFNPC
SETR d2,NPCDIR
SETR gd5,d2
SETV d2,0
SETR gd7,d2
SETV d2,0
SETR gd8,d2
SETV d2,0
SETR gd9,d2
SETV d2,0
SETR gd10,d2
SETR d2,gd2
SETR gd19,d2
SETR d2,gd3
SETR gd20,d2
LOAD d2,0.0004
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
SETR gd13,d2
LOAD d2,0.0004
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
SETR gd14,d2
SETV d2,0
SETR gd23,d2
SETV d2,0
SETR gd24,d2
LOAD d2,0.0001; if() #635 Test
COMPAREV d2,1
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4015,==; Test 'if'
SETV d2,3; if(true) #378 [Opt:AlwaysOn] AND if() #635 Body Start
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCEXTEND,d2
SETV d2,65456
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCOTILE,d2
SETV d2,65456; if(true) #636 [Opt:AlwaysOn]
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTILE,d2
SETR d2,gd13
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTXSZ,d2
SETR d2,gd14
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTYSZ,d2
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHXSZ,d2
SETR d2,gd14
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHYSZ,d2; if() #635 Body End
SETV d2,0
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
LOAD d2,0.0003; if() #379 Test
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,32
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4046,==; Test 'if'
SETV d2,1; if() #379 Body Start
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2
GOTO 4058; if() #379 Body End
SETV d2,0; if() #379 Else Start
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; if() #379 Else End
LOAD d2,0.0003
PUSHR d2
POP REFNPC
SETR d2,NPCHP
SETR gd15,d2
SETV d2,0
SETR gd16,d2
SETV d2,0
SETR gd17,d2
SETV d2,0
SETR gd21,d2
SETV d2,0
SETR gd22,d2
SETV d2,0
SETR gd18,d2
SETV d2,0
PUSHR d2
SETR d2,gd26
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
SETV d2,65536
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2
POPARGS d5,0.0005
RETURNFUNC; Func[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Body End
PUSHARGSV 0,0.0008; Func[NPC Ghost_InitAutoGhost(FFC, int)] Body Start
SETR d4,SP2
SETR d2,NPCCOUNT; InlineFunc[int Screen->NumNPCs()] Body AND for() #55 setup
STORE d2,0.0005
LOAD d2,0.0005; for() #55 LoopTest
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 4192,==; for() #55 TestFail?
LOAD d2,0.0005; InlineFunc[NPC Screen->LoadNPC(int)] Params AND for() #55 Body Start
SUBV d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Body Start
LOADNPCR d2
SETR d2,REFNPC; InlineFunc[NPC Screen->LoadNPC(int)] Body End
STORE d2,0.0007
LOAD d2,0.0007; if() #131 Test
PUSHR d2
POP REFNPC
SETR d2,NPCID
PUSHR d2
LOAD d2,0.0008
POP d3
COMPARER d3,d2
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4122,==; Test 'if'
SETV d2,0; if() #131 Body Start
STORE d2,0.0006
GOTO 4188; continue 1;
GOTO 4124; if() #131 Body End
SETV d2,1; if() #131 Else Start
STORE d2,0.0006; if() #131 Else End
LOAD d2,0.0007; if() #308 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65536
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4139,==; Test 'if'
SETV d2,0; if() #308 Body Start
STORE d2,0.0006
GOTO 4188; continue 1; AND if() #308 Body End
LOAD d2,0.0006; if() #132 Test
COMPAREV d2,0
GOTOCMP 4192,==; Test 'if'
PUSHR d4; if() #132 Body Start
LOAD d2,0.0009; UsrFunc[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Params Start
PUSHR d2
LOAD d2,0.0007
PUSHR d2
PUSHV 1
LOAD d2,0.0007
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65535
PUSHR d2
LOAD d2,0.0007
PUSHR d2
POP REFNPC
PUSHR NPCCSET; UsrFunc[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Params End
CALLFUNC 0.3805; UsrFunc[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Call
POP d4
LOAD d2,0.0007; if() #309 Test
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,256
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4184,==; Test 'if'
SETV d2,1; if() #309 Body Start
PUSHR d2
LOAD d2,0.0009
POP d3
PUSHR d2
PUSHR d3
SETV d2,1
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; if() #309 Body End
LOAD d2,0.0007; return Start
GOTO 4237; return End
GOTO 4188; if() #132 Body End
GOTO 4192; break 1; AND if() #132 Else
LOAD d2,0.0005; for() #55 Body End AND for() #55 LoopIncrement
SUBV d2,1
STORE d2,0.0005
GOTO 4097; for() #55 End
ALLOCATEMEMV d2,60
STORE d2,0.0004
WRITEPODSTRING d2,"ghost.zh: AutoGhost initialization failed - enemy missing.\n"
ALLOCATEMEMV d2,30
STORE d2,0.0002
WRITEPODSTRING d2,"  DMap %d, screen %X\n"
ALLOCATEMEMV d2,30
STORE d2,0
WRITEPODSTRING d2,"  Script %d, enemy ID %d\n"
LOAD d2,0.0004; InlineFunc[void printf(char32)] Params Start
PUSHR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOAD d2,0.0002; InlineFunc[void printf(char32)] Params Start
PUSHR d2
PUSHVARGR CURDMAP
PUSHVARGR CURDSCR; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOAD d2,0; InlineFunc[void printf(char32)] Params Start
PUSHR d2
LOAD d2,0.0009
PUSHR d2
POP REFFFC
PUSHVARGR FFSCRIPT
LOAD d2,0.0008
PUSHVARGR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
SETV d2,0
PUSHR d2
LOAD d2,0.0009
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
QUIT; InlineFunc[void Quit()] Body
LOAD d3,0
DEALLOCATEMEMR d3
LOAD d3,0.0002
DEALLOCATEMEMR d3
LOAD d3,0.0004
DEALLOCATEMEMR d3
POPARGS d5,0.0010
RETURNFUNC; Func[NPC Ghost_InitAutoGhost(FFC, int)] Body End
SETR d4,SP2; Func[int VectorX(int, int)] Body Start
LOAD d2,0; InlineFunc[int Cos(int)] Params Start AND return Start
SETR d3,d2; InlineFunc[int Cos(int)] Params End
COSR d2,d3; InlineFunc[int Cos(int)] Body
PUSHR d2
LOAD d2,0.0001
POP d3
MULTR d2,d3
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int VectorX(int, int)] Body End
SETR d4,SP2; Func[int VectorY(int, int)] Body Start
LOAD d2,0; InlineFunc[int Sin(int)] Params Start AND return Start
SETR d3,d2; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
PUSHR d2
LOAD d2,0.0001
POP d3
MULTR d2,d3
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int VectorY(int, int)] Body End
PUSHV 0; Func[void Ghost_MoveTowardLink(int, int)] Body Start
SETR d4,SP2
PUSHR d4
SETR d2,gd2; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR d2
SETR d2,gd13
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd3
PUSHR d2
SETR d2,gd14
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,LINKX
ADDV d2,8
PUSHR d2
SETR d2,LINKY
ADDV d2,8
PUSHR d2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0081; UsrFunc[int Angle(int, int, int, int)] Call
POP d4
STORE d2,0
PUSHARGSR d4,0.0002; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
LOAD d2,0.0002; UsrFunc[int VectorX(int, int)] Params Start
PUSHR d2
LOAD d2,0
PUSHR d2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.4239; UsrFunc[int VectorX(int, int)] Call
POP d4
PUSHR d2
PUSHR d4
LOAD d2,0.0002; UsrFunc[int VectorY(int, int)] Params Start
PUSHR d2
LOAD d2,0
PUSHR d2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.4249; UsrFunc[int VectorY(int, int)] Call
POP d4
PUSHR d2
LOAD d2,0.0001
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3084; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
POPARGS d5,0.0003
RETURNFUNC; Func[void Ghost_MoveTowardLink(int, int)] Body End
SETR d4,SP2; Func[bool IsSideview()] Body Start
SETV d2,0; return Start
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,4
PUSHR d2
SETR d2,CURDMAP; InlineFunc[DMapData Game->LoadDMapData(int)] Params
LOADDMAPDATAR d2; InlineFunc[DMapData Game->LoadDMapData(int)] Body Start
SETR d2,REFDMAPDATA; InlineFunc[DMapData Game->LoadDMapData(int)] Body End
PUSHR d2
POP REFDMAPDATA
SETR d2,DMAPDATASIDEVIEW
POP d3
COMPARER d3,d2
SETCMP d2,BI!=
RETURNFUNC; return End AND Func[bool IsSideview()] Body End
PUSHV 0; Func[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Body Start
SETR d4,SP2
SETV d2,0
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCJUMP,d2
PUSHR d4; unless() #346 Test
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 4481,!=; Test 'unless'
PUSHR d4; if() #161 Test AND unless() #346 Body Start
CALLFUNC 0.4307; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOCMP 4444,==; Test 'if'
SETR d2,gd6; if() #347 Test AND if() #161 Body Start
COMPAREV d2,0
GOTOCMP 4358,!=
PUSHR d4
PUSHARGSV 1,0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0331; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 4358,!=
SETV d2,0
GOTO 4359
SETV d2,1
COMPAREV d2,0
GOTOCMP 4481,==; Test 'if'
PUSHR d4; if() #347 Body Start
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
STORE d2,0
PUSHR d4
PUSHV 64; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 0.3057; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP d4
SETR d2,gd6; if() #162 Test
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 4413,==; Test 'if'
PUSHR d4; if() #162 Body Start
PUSHV 32; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3031; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK d4
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR gd6
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 0.3705; UsrFunc[void Ghost_Move(int, int, int)] Call
POP d4
SETR d2,gd6; InlineFunc[untyped Max(untyped, untyped)] Params Start
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
SETR gd6,d2
SETR d2,gd6; if() #348 Test
COMPAREV d2,0
GOTOCMP 4403,<=
PUSHR d4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0331; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 4403,!=
SETV d2,1
GOTO 4404
SETV d2,0
COMPAREV d2,0
GOTOCMP 4408,==; Test 'if'
SETV d2,0; if() #348 Body Start
SETR gd6,d2; if() #348 Body End
PUSHR d4
PUSHV 32; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 0.3057; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP d4
GOTO 4436; if() #162 Body End
PUSHR d4; if() #162 Else Start
PUSHV 1; UsrFunc[void Ghost_Move(int, int, int)] Params Start
SETR d2,gd6
SUBV2 0,d2
PUSHR d2
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 0.3705; UsrFunc[void Ghost_Move(int, int, int)] Call
PEEK d4
PUSHARGSV 1,0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0331; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 4434,==; Test 'if'
SETR d2,gd6; InlineFunc[untyped Max(untyped, untyped)] Params Start AND if() #163 Body Start
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
SETR gd6,d2
GOTO 4436; if() #163 Body End
SETV d2,0; if() #163 Else Start
SETR gd6,d2; if() #163 Else End
LOAD d2,0; if() #162 Else End AND if() #349 Test
COMPAREV d2,0
GOTOCMP 4481,==; Test 'if'
PUSHR d4; if() #349 Body Start
PUSHV 64; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3031; UsrFunc[void Ghost_SetFlag(int)] Call
POP d4; if() #349 Body End
GOTO 4481; if() #347 Body End AND if() #161 Body End
SETR d2,gd6; if() #350 Test AND if() #161 Else Start
COMPAREV d2,0
GOTOCMP 4452,!=
SETR d2,gd4
COMPAREV d2,0
GOTOCMP 4452,>
SETV d2,0
GOTO 4453
SETV d2,1
COMPAREV d2,0
GOTOCMP 4481,==; Test 'if'
SETR d2,gd4; if() #164 Test AND if() #350 Body Start
PUSHR d2
SETR d2,gd6
POP d3
ADDR d2,d3
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 4469,==; Test 'if'
SETV d2,0; if() #164 Body Start
SETR gd4,d2
SETV d2,0
SETR gd6,d2
GOTO 4481; if() #164 Body End
SETR d2,gd4; if() #164 Else Start
PUSHR d2
SETR d2,gd6
POP d3
ADDR d2,d3
SETR gd4,d2
SETR d2,gd6; InlineFunc[untyped Max(untyped, untyped)] Params Start
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
SETR gd6,d2; if() #164 Else End
SETR d2,gd7; if() #350 Body End AND if() #161 Else End AND unless() #346 Body End AND if() #351 Test
COMPAREV d2,0
GOTOCMP 4495,!=
SETR d2,gd8
COMPAREV d2,0
GOTOCMP 4495,!=
SETR d2,gd9
COMPAREV d2,0
GOTOCMP 4495,!=
SETR d2,gd10
COMPAREV d2,0
GOTOCMP 4495,!=
SETV d2,0
GOTO 4496
SETV d2,1
COMPAREV d2,0
GOTOCMP 4519,==; Test 'if'
SETR d2,gd7; if() #351 Body Start
PUSHR d2
SETR d2,gd9
POP d3
ADDR d2,d3
SETR gd7,d2
SETR d2,gd8
PUSHR d2
SETR d2,gd10
POP d3
ADDR d2,d3
SETR gd8,d2
PUSHR d4
PUSHR gd7; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR gd8
PUSHV 2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3084; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
PEEK d4
PUSHR gd5; UsrFunc[void Ghost_ForceDir(int)] Params
CALLFUNC 0.3697; UsrFunc[void Ghost_ForceDir(int)] Call
POP d4; if() #351 Body End
PUSHR d4
LOAD d2,0.0004; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOAD d2,0.0003
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2493; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
LOAD d2,0.0004; UsrFunc[void __Ghost_WaitframePart1(FFC, NPC, bool)] Params Start
PUSHR d2
LOAD d2,0.0003
PUSHR d2
PUSHV 0; UsrFunc[void __Ghost_WaitframePart1(FFC, NPC, bool)] Params End
CALLFUNC 0.4561; UsrFunc[void __Ghost_WaitframePart1(FFC, NPC, bool)] Call
PEEK d4
LOAD d2,0.0004; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params Start
PUSHR d2
LOAD d2,0.0003
PUSHR d2; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params End
CALLFUNC 0.1851; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Call
PEEK d4
LOAD d2,0.0004; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOAD d2,0.0003
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
CALLFUNC 0.2096; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
SETR d2,gd18
ANDV d2,32
SETR gd18,d2
PUSHR d4; return Start
LOAD d2,0.0004; UsrFunc[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Params Start
PUSHR d2
LOAD d2,0.0003
PUSHR d2
LOAD d2,0.0002
PUSHR d2
LOAD d2,0.0001
PUSHR d2; UsrFunc[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Params End
CALLFUNC 0.5065; UsrFunc[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Call
POP d4
POPARGS d5,0.0005; return End
RETURNFUNC; Func[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Body End
PUSHARGSV 0,0.0002; Func[void __Ghost_WaitframePart1(FFC, NPC, bool)] Body Start
SETR d4,SP2
SETR d2,gd18; if() #401 Test
ANDV d2,4
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4579,==; Test 'if'
SETR d2,gd5; if() #401 Body Start
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCDIR,d2
GOTO 4676; if() #401 Body End
LOAD d2,0.0002; if() #402 Test AND if() #401 Else Start
COMPAREV d2,0
GOTOCMP 4588,==; Test 'if'
LOAD d2,0.0003; if() #402 Body Start
PUSHR d2
POP REFNPC
SETR d2,NPCDIR
SETR gd5,d2
GOTO 4676; if() #402 Body End
PUSHR d4; if() #671 Test AND if() #402 Else Start
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 4608,==
SETR d2,gd19
PUSHR d2
SETR d2,gd2
POP d3
COMPARER d3,d2
GOTOCMP 4606,!=
SETR d2,gd20
PUSHR d2
SETR d2,gd3
POP d3
COMPARER d3,d2
GOTOCMP 4608,==
SETV d2,1
GOTO 4609
SETV d2,0
COMPAREV d2,0
GOTOCMP 4676,==; Test 'if'
SETR d2,gd2; if() #671 Body Start
PUSHR d2
SETR d2,gd19
POP d3
SUBR d3,d2
SETR d2,d3
STORE d2,0.0001
SETR d2,gd3
PUSHR d2
SETR d2,gd20
POP d3
SUBR d3,d2
SETR d2,d3
STORE d2,0
PUSHR d4; if() #403 Test
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 4645,==; Test 'if'
PUSHR d4; if() #403 Body Start
LOAD d2,0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapAngle(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR d2
LOAD d2,0
SETR d1,d2; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapAngle(int)] Params End
WRAPRADIANS d2; InlineFunc[int WrapAngle(int)] Body
MULTV d2,57.2958
PUSHR d2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 0.0100; UsrFunc[int AngleDir8(int)] Call
POP d4
SETR gd5,d2
GOTO 4676; if() #403 Body End
LOAD d2,0.0001; InlineFunc[int Abs(int)] Params AND if() #404 Test AND if() #403 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOAD d2,0; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 4666,==; Test 'if'
LOAD d2,0.0001; if() #405 Test AND if() #404 Body Start
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 4663,==; Test 'if'
SETV d2,2; if() #405 Body Start
SETR gd5,d2
GOTO 4676; if() #405 Body End
SETV d2,3; if() #405 Else Start
SETR gd5,d2; if() #405 Else End
GOTO 4676; if() #404 Body End
LOAD d2,0; if() #406 Test AND if() #404 Else Start
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 4674,==; Test 'if'
SETV d2,0; if() #406 Body Start
SETR gd5,d2
GOTO 4676; if() #406 Body End
SETV d2,1; if() #406 Else Start
SETR gd5,d2; if() #406 Else End
SETR d2,gd5; if() #404 Else End AND if() #403 Else End AND if() #671 Body End AND if() #402 Else End AND if() #401 Else End
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCDIR,d2
SETR d2,gd2
SETR gd19,d2
SETR d2,gd3
SETR gd20,d2
SETR d2,gd11; if() #407 Test
COMPAREV d2,0
GOTOCMP 4697,==
SETR d2,gd11
COMPAREV d2,1
GOTOCMP 4697,==
SETV d2,0
GOTO 4698
SETV d2,1
COMPAREV d2,0
GOTOCMP 4721,==; Test 'if'
LOAD d2,0.0004; if() #672 Test AND if() #407 Body Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
POP d3
COMPARER d3,d2
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4817,==; Test 'if'
SETR d2,gd11; if() #672 Body Start
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #672 Body End
GOTO 4817; if() #407 Body End
PUSHR d4; if() #408 Test AND if() #407 Else Start
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 4759,==; Test 'if'
LOAD d2,0.0004; if() #673 Test AND if() #408 Body Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
PUSHR d2
SETR d2,gd5
POP d3
ADDR d2,d3
POP d3
COMPARER d3,d2
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4817,==; Test 'if'
SETR d2,gd11; if() #673 Body Start
PUSHR d2
PUSHR d4
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0407; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #673 Body End
GOTO 4817; if() #408 Body End
PUSHR d4; if() #409 Test AND if() #408 Else Start
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 4797,==; Test 'if'
LOAD d2,0.0004; if() #674 Test AND if() #409 Body Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
PUSHR d2
SETR d2,gd5
POP d3
ADDR d2,d3
POP d3
COMPARER d3,d2
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4817,==; Test 'if'
SETR d2,gd11; if() #674 Body Start
PUSHR d2
PUSHR d4
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0407; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #674 Body End
GOTO 4817; if() #409 Body End
LOAD d2,0.0004; if() #675 Test AND if() #409 Else Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
POP d3
COMPARER d3,d2
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4817,==; Test 'if'
SETR d2,gd11; if() #675 Body Start
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #675 Body End
LOAD d2,0.0004; if() #409 Else End AND if() #408 Else End AND if() #407 Else End AND if() #676 Test
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
PUSHR d2
SETR d2,gd13
POP d3
COMPARER d3,d2
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4837,==; Test 'if'
SETR d2,gd13; if() #676 Body Start
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTWIDTH,d2; if() #676 Body End
LOAD d2,0.0003; if() #677 Test
PUSHR d2
POP REFNPC
SETR d2,NPCTXSZ
PUSHR d2
SETR d2,gd13
POP d3
COMPARER d3,d2
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4881,==; Test 'if'
SETR d2,gd13; if() #677 Body Start
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTXSZ,d2
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHXSZ,d2
SETV d2,0
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHXOFS,d2; if() #677 Body End
LOAD d2,0.0004; if() #678 Test
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
PUSHR d2
SETR d2,gd14
POP d3
COMPARER d3,d2
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4901,==; Test 'if'
SETR d2,gd14; if() #678 Body Start
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTHEIGHT,d2; if() #678 Body End
LOAD d2,0.0003; if() #679 Test
PUSHR d2
POP REFNPC
SETR d2,NPCTYSZ
PUSHR d2
SETR d2,gd14
POP d3
COMPARER d3,d2
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4945,==; Test 'if'
SETR d2,gd14; if() #679 Body Start
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTYSZ,d2
SETR d2,gd14
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHYSZ,d2
SETV d2,0
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHYOFS,d2; if() #679 Body End
PUSHR d4; if() #680 Test
PUSHV 128; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1476; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 5010,==; Test 'if'
SETR d2,gd4; if() #410 Test AND if() #680 Body Start
COMPAREV d2,32
GOTOCMP 4965,<
LOAD d2,0.0004
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOCMP 4965,!=
SETV d2,1
GOTO 4966
SETV d2,0
COMPAREV d2,0
GOTOCMP 4981,==; Test 'if'
SETV d2,1; if() #410 Body Start
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2
GOTO 5010; if() #410 Body End
SETR d2,gd4; if() #681 Test AND if() #410 Else Start
COMPAREV d2,32
GOTOCMP 4995,>=
LOAD d2,0.0004
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOCMP 4995,==
SETV d2,1
GOTO 4996
SETV d2,0
COMPAREV d2,0
GOTOCMP 5010,==; Test 'if'
SETV d2,0; if() #681 Body Start
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; if() #681 Body End
SETR d2,gd15; if() #410 Else End AND if() #680 Body End
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHP,d2
SETR d2,gd12
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCCSET,d2
SETR d2,gd18; if() #411 Test
ANDV d2,8
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 5044,==; Test 'if'
SETR d2,gd12; if() #411 Body Start
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
GOTO 5058; if() #411 Body End
SETR d2,gd21; if() #682 Test AND if() #411 Else Start
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 5058,==; Test 'if'
SETR d2,gd12; if() #682 Body Start
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2; if() #682 Body End
PUSHR d4; if() #411 Else End
LOAD d2,0.0003; UsrFunc[void __Ghost_DrawShadow(NPC)] Params Start
PUSHR d2; UsrFunc[void __Ghost_DrawShadow(NPC)] Params End
CALLFUNC 0.1935; UsrFunc[void __Ghost_DrawShadow(NPC)] Call
POP d4
POPARGS d5,0.0005
RETURNFUNC; Func[void __Ghost_WaitframePart1(FFC, NPC, bool)] Body End
PUSHV 0; Func[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Body Start
SETR d4,SP2
LOAD d2,0.0003; InlineFunc[bool NPC->isValid()] Params AND unless() #683 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOCMP 5092,!=; Test 'unless'
LOAD d2,0.0002; if() #684 Test AND unless() #683 Body Start
COMPAREV d2,0
GOTOCMP 5084,==; Test 'if'
PUSHR d4; if() #684 Body Start
LOAD d2,0.0004; UsrFunc[void __GhCleanUp(FFC)] Params Start
PUSHR d2; UsrFunc[void __GhCleanUp(FFC)] Params End
CALLFUNC 0.3564; UsrFunc[void __GhCleanUp(FFC)] Call
POP d4
SETV d2,0
SETR gd11,d2
PUSHR d4
CALLFUNC 0.3023; UsrFunc[void Ghost_ClearCombos()] Call
POP d4; if() #684 Body End
LOAD d2,0.0001; if() #685 Test
COMPAREV d2,0
GOTOCMP 5088,==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #685 Body
SETV d2,0
SETR gd15,d2
SETV d2,0; return Start
GOTO 5215; return End AND unless() #683 Body End
LOAD d2,0.0003; if() #686 Test
PUSHR d2
POP REFNPC
SETR d2,NPCHP
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 5102,==; Test 'if'
SETV d2,1; if() #686 Body Start
STORE d2,0; if() #686 Body End
LOAD d2,0; unless() #687 Test
COMPAREV d2,0
GOTOCMP 5121,!=; Test 'unless'
PUSHR d4; unless() #687 Body Start
LOAD d2,0.0004; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params Start
PUSHR d2
LOAD d2,0.0003
PUSHR d2; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params End
CALLFUNC 0.2627; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Call
PEEK d4
LOAD d2,0.0004; UsrFunc[bool Ghost_CheckFreeze(FFC, NPC)] Params Start
PUSHR d2
LOAD d2,0.0003
PUSHR d2; UsrFunc[bool Ghost_CheckFreeze(FFC, NPC)] Params End
CALLFUNC 0.1592; UsrFunc[bool Ghost_CheckFreeze(FFC, NPC)] Call
POP d4
COMPAREV d2,0
SETCMP d2,I==
STORE d2,0; unless() #687 Body End
LOAD d2,0.0003
PUSHR d2
POP REFNPC
SETR d2,NPCHP
SETR gd15,d2
LOAD d2,0; if() #688 Test
COMPAREV d2,0
GOTOCMP 5214,==; Test 'if'
LOAD d2,0.0002; if() #689 Test AND if() #688 Body Start
COMPAREV d2,0
GOTOCMP 5208,==; Test 'if'
SETV d2,1; if() #689 Body Start
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTXSZ,d2
SETV d2,1
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTYSZ,d2
SETR d2,gd2
PUSHR d2
SETR d2,gd13
SUBV d2,1
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd13
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETR d2,gd3
PUSHR d2
SETR d2,gd14
SUBV d2,1
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd14
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETR d2,gd4
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2
PUSHR d4
LOAD d2,0.0004; UsrFunc[void __GhCleanUp(FFC)] Params Start
PUSHR d2; UsrFunc[void __GhCleanUp(FFC)] Params End
CALLFUNC 0.3564; UsrFunc[void __GhCleanUp(FFC)] Call
POP d4
SETV d2,0
SETR gd11,d2; if() #689 Body End
LOAD d2,0.0001; if() #690 Test
COMPAREV d2,0
GOTOCMP 5212,==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #690 Body
SETV d2,0; return Start
GOTO 5215; return End AND if() #688 Body End
SETV d2,1; return Start
POPARGS d5,0.0005; return End
RETURNFUNC; Func[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Body End
PUSHARGSV 0,0.0006; Func[void __SetUpDrawingArray(FFC, NPC, int)] Body Start
SETR d4,SP2
LOAD d2,0.0008; if() #710 Test
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOCMP 5231,==; Test 'if'
LOAD d2,0.0005; if() #710 Body Start
ORV d2,4
STORE d2,0.0005; if() #710 Body End
LOAD d2,0.0008; if() #711 Test
PUSHR d2
SETV d2,1
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOCMP 5243,==; Test 'if'
LOAD d2,0.0005; if() #711 Body Start
ORV d2,1
STORE d2,0.0005; if() #711 Body End
PUSHR d4; if() #712 Test
LOAD d2,0.0007; UsrFunc[bool __Ghost_IsFlickering(NPC)] Params Start
PUSHR d2; UsrFunc[bool __Ghost_IsFlickering(NPC)] Params End
CALLFUNC 0.5555; UsrFunc[bool __Ghost_IsFlickering(NPC)] Call
POP d4
COMPAREV d2,0
GOTOCMP 5253,==; Test 'if'
LOAD d2,0.0005; if() #712 Body Start
ORV d2,2
STORE d2,0.0005; if() #712 Body End
LOAD d2,0.0008
PUSHR d2
POP REFFFC
SETR d2,CSET
PUSHR d2
LOAD d2,0.0006
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
LOAD d2,0.0005
PUSHR d2
LOAD d2,0.0006
SETR d0,d2
POP d2
WRITEPODARRAYVR 2,d2
STOREV 3,0.0004
SETR d2,gd2
PUSHR d2
LOAD d2,0.0007
PUSHR d2
POP REFNPC
SETR d2,NPCXOFS
POP d3
ADDR d2,d3
STORE d2,0.0003
SETR d2,gd3
PUSHR d2
LOAD d2,0.0007
PUSHR d2
POP REFNPC
SETR d2,NPCYOFS
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd4
PUSHR d2
LOAD d2,0.0007
PUSHR d2
POP REFNPC
SETR d2,NPCZOFS
POP d3
ADDR d2,d3
POP d3
SUBR d3,d2
SETR d2,d3
STORE d2,0.0002
SETR d2,gd26; if() #713 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 5420,==; Test 'if'
STOREV 1,0.0001; if() #713 Body Start
LOAD d2,0; for() #182 LoopTest
PUSHR d2
SETR d2,gd26
PUSHR d2
POP d0
READPODARRAYV d2,0
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 5420,==; for() #182 TestFail?
SETR d2,gd26; for() #182 Body Start
PUSHR d2
LOAD d2,0.0001
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOAD d2,0.0006
PUSHR d2
LOAD d2,0.0004
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOAD d2,0.0003
PUSHR d2
SETR d2,gd26
PUSHR d2
LOAD d2,0.0001
ADDV d2,1
POP d0
READPODARRAYR d2,d2
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0006
PUSHR d2
LOAD d2,0.0004
ADDV d2,1
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOAD d2,0.0002
PUSHR d2
SETR d2,gd26
PUSHR d2
LOAD d2,0.0001
ADDV d2,2
POP d0
READPODARRAYR d2,d2
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0006
PUSHR d2
LOAD d2,0.0004
ADDV d2,2
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
SETR d2,gd26
PUSHR d2
LOAD d2,0.0001
ADDV d2,3
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOAD d2,0.0006
PUSHR d2
LOAD d2,0.0004
ADDV d2,3
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
SETR d2,gd26
PUSHR d2
LOAD d2,0.0001
ADDV d2,4
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOAD d2,0.0006
PUSHR d2
LOAD d2,0.0004
ADDV d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOAD d2,0.0004
ADDV d2,6
STORE d2,0.0004
LOAD d2,0.0001
ADDV d2,6
STORE d2,0.0001
LOAD d2,0.0006
PUSHR d2
POP d0
READPODARRAYV d2,0
ADDV d2,1
PUSHR d2
LOAD d2,0.0006
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2; for() #182 Body End
LOAD d2,0; for() #182 LoopIncrement
ADDV d2,1
STORE d2,0
GOTO 5308; for() #182 End
LOAD d2,0.0008; if() #713 Body End AND if(true) #714 [Opt:AlwaysOn]
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
LOAD d2,0.0006
PUSHR d2
LOAD d2,0.0004
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOAD d2,0.0003
PUSHR d2
LOAD d2,0.0006
PUSHR d2
LOAD d2,0.0004
ADDV d2,1
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOAD d2,0.0002
PUSHR d2
LOAD d2,0.0006
PUSHR d2
LOAD d2,0.0004
ADDV d2,2
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOAD d2,0.0008
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
PUSHR d2
LOAD d2,0.0006
PUSHR d2
LOAD d2,0.0004
ADDV d2,3
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOAD d2,0.0008
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
PUSHR d2
LOAD d2,0.0006
PUSHR d2
LOAD d2,0.0004
ADDV d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOAD d2,0.0006
PUSHR d2
POP d0
READPODARRAYV d2,0
ADDV d2,1
PUSHR d2
LOAD d2,0.0006
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
POPARGS d5,0.0009
RETURNFUNC; Func[void __SetUpDrawingArray(FFC, NPC, int)] Body End
PUSHV 0; Func[void __HideFFCAndWait(FFC)] Body Start
SETR d4,SP2
LOAD d2,0.0001
PUSHR d2
POP REFFFC
SETR d2,DATA
STORE d2,0
SETV d2,1
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
WAITFRAME; InlineFunc[void Waitframe()] Body
LOAD d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __HideFFCAndWait(FFC)] Body End
PUSHV 0; Func[bool IsPit(int)] Body Start
SETR d4,SP2
LOAD d2,0.0001
PUSHR d2
POP d0
SETR d2,COMBOTD
STORE d2,0
LOAD d2,0; if() #368 Test
COMPAREV d2,41
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 5532,==; Test 'if'
SETV d2,1; return Start AND if() #368 Body Start
GOTO 5553; return End AND if() #368 Body End
LOAD d2,0; if() #369 Test
COMPAREV d2,93
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 5539,==; Test 'if'
SETV d2,1; return Start AND if() #369 Body Start
GOTO 5553; return End AND if() #369 Body End
LOAD d2,0; if() #370 Test
COMPAREV d2,80
GOTOCMP 5547,<
LOAD d2,0
COMPAREV d2,82
GOTOCMP 5547,>
SETV d2,1
GOTO 5548
SETV d2,0
COMPAREV d2,0
GOTOCMP 5552,==; Test 'if'
SETV d2,1; return Start AND if() #370 Body Start
GOTO 5553; return End AND if() #370 Body End
SETV d2,0; return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[bool IsPit(int)] Body End
SETR d4,SP2; Func[bool __Ghost_IsFlickering(NPC)] Body Start
LOAD d2,0; if() #638 Test
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,128
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 5567,==; Test 'if'
SETV d2,1; return Start AND if() #638 Body Start
GOTO 5568; return End AND if() #638 Body End
SETV d2,0; return Start
POP d5; return End
RETURNFUNC; Func[bool __Ghost_IsFlickering(NPC)] Body End
PUSHARGSV 0,0.0004; Func[void SpawnAnimation(FFC, NPC)] Body Start
SETR d4,SP2
LOAD d2,0.0005
PUSHR d2
POP REFFFC
SETR d2,DATA
STORE d2,0.0003
LOAD d2,0.0004
PUSHR d2
POP REFNPC
SETR d2,NPCCOLLDET
STORE d2,0.0002
LOAD d2,0.0004
PUSHR d2
POP REFNPC
SETR d2,NPCXOFS
STORE d2,0.0001
PUSHR d4
LOAD d2,0.0005; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOAD d2,0.0004
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2493; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
SETV d2,0
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFNPC
SETR NPCCOLLDET,d2
LOAD d2,0; for() #257 LoopTest
COMPAREV d2,32
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 5714,==; for() #257 TestFail?
SETV d2,0; for() #257 Body Start
PUSHR d2
LOAD d2,0.0005
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
SETV d2,32768
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
PUSHR d4
LOAD d2,0.0005; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOAD d2,0.0004
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2493; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
LOAD d2,0.0005; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOAD d2,0.0004
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
CALLFUNC 0.2096; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
LOAD d2,0.0003
PUSHR d2
LOAD d2,0.0005
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOAD d2,0.0001
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
PUSHR d4
LOAD d2,0.0005; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOAD d2,0.0004
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2493; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
LOAD d2,0.0005; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOAD d2,0.0004
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
CALLFUNC 0.2096; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
LOAD d2,0; if() #953 Test
COMPAREV d2,29
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 5710,==; Test 'if'
SETR d2,UNDERCOMBO; if() #953 Body Start
PUSHR d2
PUSHR d4
LOAD d2,0.0005; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR d2
POP REFFFC
PUSHR X
LOAD d2,0.0005
PUSHR d2
POP REFFFC
PUSHR Y; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0228; UsrFunc[int ComboAt(int, int)] Call
POP d4
PUSHR d2
POP d0
POP d2
SETR COMBODD,d2
SETR d2,UNDERCSET
PUSHR d2
PUSHR d4
LOAD d2,0.0005; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR d2
POP REFFFC
PUSHR X
LOAD d2,0.0005
PUSHR d2
POP REFFFC
PUSHR Y; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0228; UsrFunc[int ComboAt(int, int)] Call
POP d4
PUSHR d2
POP d0
POP d2
SETR COMBOCD,d2; if() #953 Body End
LOAD d2,0; for() #257 Body End AND for() #257 LoopIncrement
ADDV d2,1
STORE d2,0
GOTO 5604; for() #257 End
LOAD d2,0.0003
PUSHR d2
LOAD d2,0.0005
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOAD d2,0.0002
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFNPC
SETR NPCCOLLDET,d2
LOAD d2,0.0001
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
POPARGS d5,0.0006
RETURNFUNC; Func[void SpawnAnimation(FFC, NPC)] Body End


PUSHV 0; void run() Body Start
SETR d4,SP2
PUSHR d4
CALLFUNC 0.2370; UsrFunc[void StartGhostZH()] Call
POP d4
PUSHR d4; while(true) #14 Body [Opt:AlwaysOn] Start
CALLFUNC 0.8716; UsrFunc[void UpdateGhostZH1()] Call
POP d4
WAITDRAW; InlineFunc[void Waitdraw()] Body
PUSHR d4
CALLFUNC 0.8778; UsrFunc[void UpdateGhostZH2()] Call
POP d4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #14 Body [Opt:AlwaysOn] End
GOTO 6; while() #14 End AND [Opt:NeverRet] AND void run() Body End
POP d2; Func[int Distance(int, int, int, int)] Body Start
POP d1
POP d0
POP d6
SETR d2,DISTANCE
RETURNFUNC; Func[int Distance(int, int, int, int)] Body End
SETR d4,SP2; Func[int RadianAngle(int, int, int, int)] Body Start
LOAD d2,0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND return Start
PUSHR d2
LOAD d2,0.0003
POP d3
SUBR d3,d2
PUSHR d3
LOAD d2,0
PUSHR d2
LOAD d2,0.0002
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
POPARGS d5,0.0004; return End
RETURNFUNC; Func[int RadianAngle(int, int, int, int)] Body End
SETR d4,SP2; Func[int Randf(int)] Body Start
SETV d2,0; InlineFunc[long RNG->LRand(long)] Params Start AND return Start
PUSHR d2
LOAD d2,0; InlineFunc[long RNG->LRand(long)] Params End
POP REFRNG; InlineFunc[long RNG->LRand(long)] Body Start
RNGLRAND2 d2; InlineFunc[long RNG->LRand(long)] Body End
POP d5; return End
RETURNFUNC; Func[int Randf(int)] Body End
SETR d4,SP2; Func[int Angle(int, int, int, int)] Body Start
LOAD d2,0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR d2
LOAD d2,0.0003
POP d3
SUBR d3,d2
PUSHR d3
LOAD d2,0
PUSHR d2
LOAD d2,0.0002
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
SETR d3,d2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
POPARGS d5,0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
PUSHARGSV 0,0.0007; Func[void AutoGhost()] Body Start
SETR d4,SP2
SETR d2,gd27; if() #29 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,2
COMPAREV d2,0
GOTOCMP 414,!=; Test 'if' AND return (Void) AND if() #29 Body
SETR d2,NPCCOUNT; InlineFunc[int Screen->NumNPCs()] Body AND for() #2 setup
STORE d2,0.0003
LOAD d2,0.0003; for() #2 LoopTest
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 414,==; for() #2 TestFail?
LOAD d2,0.0003; InlineFunc[NPC Screen->LoadNPC(int)] Params AND for() #2 Body Start
SUBV d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Body Start
LOADNPCR d2
SETR d2,REFNPC; InlineFunc[NPC Screen->LoadNPC(int)] Body End
STORE d2,0.0006
LOAD d2,0.0006; if() #30 Test
PUSHR d2
POP REFNPC
SETR d2,NPCID
COMPAREV d2,20
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 410,!=; Test 'if' AND continue 1; AND if() #30 Body
LOAD d2,0.0006; if() #31 Test
PUSHR d2
POP REFNPC
SETR d2,NPCID
COMPAREV d2,511
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 410,!=; Test 'if' AND continue 1; AND if() #31 Body
LOAD d2,0.0006; if() #32 Test AND if(false) #16 [Opt:AlwaysOff]
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65536
COMPAREV d2,0
GOTOCMP 410,!=; Test 'if' AND continue 1; AND if() #32 Body
LOAD d2,0.0006; unless() #33 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
COMPAREV d2,0
GOTOCMP 410,==; Test 'unless' AND continue 1; AND unless() #33 Body
LOAD d2,0.0006; unless() #34 Test
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
COMPAREV d2,0
GOTOCMP 410,==; Test 'unless' AND continue 1; AND unless() #34 Body
STOREV 0,0.0002
STOREV 0,0.0001
LOAD d2,0.0006; if(false) #17 [Opt:AlwaysOff]
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
STORE d2,0.0001
LOAD d2,0.0006
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
STORE d2,0.0002
LOAD d2,0.0002; if() #35 Test
COMPAREV d2,-1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 169,==; Test 'if'
ALLOCATEMEMV d2,2; if() #35 Body Start
STORE d2,0
PUSHR d4
LOAD d2,0.0006; UsrFunc[int __AutoGhostParseName(NPC, int)] Params Start
PUSHR d2
LOAD d2,0
PUSHR d2; UsrFunc[int __AutoGhostParseName(NPC, int)] Params End
CALLFUNC 0.0416; UsrFunc[int __AutoGhostParseName(NPC, int)] Call
POP d4
LOAD d2,0
PUSHR d2
POP d0
READPODARRAYV d2,0
STORE d2,0.0002
LOAD d3,0
DEALLOCATEMEMR d3; if() #35 Body End
LOAD d2,0.0002; if() #36 Test
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 180,==; Test 'if'
PUSHR d4; if() #36 Body Start
LOAD d2,0.0006; UsrFunc[void __AutoGhostKill(NPC)] Params Start
PUSHR d2; UsrFunc[void __AutoGhostKill(NPC)] Params End
CALLFUNC 0.0715; UsrFunc[void __AutoGhostKill(NPC)] Call
POP d4
GOTO 410; continue 1; AND if() #36 Body End
LOAD d2,0.0002; if() #37 Test
COMPAREV d2,511
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 191,==; Test 'if'
PUSHR d4; if() #37 Body Start
LOAD d2,0.0006; UsrFunc[void __AutoGhostKill(NPC)] Params Start
PUSHR d2; UsrFunc[void __AutoGhostKill(NPC)] Params End
CALLFUNC 0.0715; UsrFunc[void __AutoGhostKill(NPC)] Call
POP d4
GOTO 410; continue 1; AND if() #37 Body End
PUSHR d4
LOAD d2,0.0005; UsrFunc[int FindUnusedFFC(int)] Params Start
PUSHR d2; UsrFunc[int FindUnusedFFC(int)] Params End
CALLFUNC 0.0766; UsrFunc[int FindUnusedFFC(int)] Call
POP d4
STORE d2,0.0005
LOAD d2,0.0005; unless() #38 Test
COMPAREV d2,0
GOTOCMP 206,!=; Test 'unless'
PUSHR d4; unless() #38 Body Start
LOAD d2,0.0006; UsrFunc[void __AutoGhostKill(NPC)] Params Start
PUSHR d2; UsrFunc[void __AutoGhostKill(NPC)] Params End
CALLFUNC 0.0715; UsrFunc[void __AutoGhostKill(NPC)] Call
POP d4
GOTO 410; continue 1; AND unless() #38 Body End
LOAD d2,0.0005; InlineFunc[FFC Screen->LoadFFC(int)] Params
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORE d2,0.0004
SETV d2,1
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOAD d2,0.0006
PUSHR d2
POP REFNPC
SETR d2,NPCCSET
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
SETV d2,1
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTWIDTH,d2
SETV d2,1
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTHEIGHT,d2
LOAD d2,0.0006
PUSHR d2
POP REFNPC
SETR d2,NPCX
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
LOAD d2,0.0006
PUSHR d2
POP REFNPC
SETR d2,NPCY
PUSHR d2
LOAD d2,0.0006
PUSHR d2
POP REFNPC
SETR d2,NPCZ
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
SETV d2,0
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
SETV d2,0
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
SETV d2,0
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
SETV d2,0
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2
LOAD d2,0.0002
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFSCRIPT,d2
LOAD d2,0.0006
PUSHR d2
POP REFNPC
SETR d2,NPCID
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFINITDD,d2
SETV d2,1; if(true) #39 [Opt:AlwaysOn]
PUSHR d2
LOAD d2,0.0004
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2
LOAD d2,0.0001; if() #40 Test
COMPAREV d2,1
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 380,==; Test 'if'
LOAD d2,0.0001; if() #41 Test AND if() #40 Body Start
COMPAREV d2,-1
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 380,==; Test 'if'
SETV d2,3; if() #41 Body Start
PUSHR d2
LOAD d2,0.0006
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCEXTEND,d2
SETV d2,1024
PUSHR d2
LOAD d2,0.0006
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2; if() #41 Body End
LOAD d2,0.0001; if() #40 Body End AND if() #18 Test
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 398,==; Test 'if'
SETV d2,1; if() #18 Body Start
PUSHR d2
LOAD d2,0.0006
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2
GOTO 410; if() #18 Body End
LOAD d2,0.0001; if() #18 Else Start
PUSHR d2
LOAD d2,0.0006
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2; if() #18 Else End
LOAD d2,0.0003; for() #2 Body End AND for() #2 LoopIncrement
SUBV d2,1
STORE d2,0.0003
GOTO 76; for() #2 End
POPARGS d5,0.0007
RETURNFUNC; Func[void AutoGhost()] Body End
PUSHARGSV 0,0.0009; Func[int __AutoGhostParseName(NPC, int)] Body Start
SETR d4,SP2
ALLOCATEMEMV d2,64
STORE d2,0.0008
ALLOCATEMEMV d2,64
STORE d2,0.0007
SETV d2,1
PUSHR d2
LOAD d2,0.0009
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
LOAD d2,0.0010; InlineFunc[void NPC->GetName(int)] Params Start
PUSHR d2
LOAD d2,0.0008; InlineFunc[void NPC->GetName(int)] Params End
POP REFNPC; InlineFunc[void NPC->GetName(int)] Body Start
NPCNAME d2; InlineFunc[void NPC->GetName(int)] Body End
LOAD d2,0.0006; for() #151 LoopTest
COMPAREV d2,63
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 653,==; for() #151 TestFail?
LOAD d2,0.0008; if() #584 Test AND for() #151 Body Start
PUSHR d2
LOAD d2,0.0006
POP d0
READPODARRAYR d2,d2
COMPAREV d2,64
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 649,==; Test 'if'
LOAD d2,0.0008; if() #584 Body Start
PUSHR d2
LOAD d2,0.0006
ADDV d2,1
POP d0
READPODARRAYR d2,d2
STORE d2,0.0005
PUSHR d4; if() #349 Test
LOAD d2,0.0005; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 0.8900; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 556,==; Test 'if'
STOREV 0,0.0004; if() #349 Body Start
LOAD d2,0.0006; for() #152 setup
ADDV d2,1
STORE d2,0.0006
PUSHR d4; for() #152 LoopTest
LOAD d2,0.0008; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR d2
LOAD d2,0.0006
POP d0
READPODARRAYR d2,d2
PUSHR d2
PUSHV 0; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 0.8900; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 498,==; for() #152 TestFail?
LOAD d2,0.0008; for() #152 Body Start
PUSHR d2
LOAD d2,0.0006
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOAD d2,0.0007
PUSHR d2
LOAD d2,0.0004
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOAD d2,0.0004
ADDV d2,1
STORE d2,0.0004; for() #152 Body End
LOAD d2,0.0006; for() #152 LoopIncrement
ADDV d2,1
STORE d2,0.0006
GOTO 466; for() #152 End
SETV d2,0
PUSHR d2
LOAD d2,0.0007
PUSHR d2
LOAD d2,0.0004
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOAD d2,0.0007; InlineFunc[int Game->GetFFCScript(int)] Params
GETFFCSCRIPT d2; InlineFunc[int Game->GetFFCScript(int)] Body
PUSHR d2
LOAD d2,0.0009
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
LOAD d2,0.0006
SUBV d2,1
STORE d2,0.0006
LOAD d2,0.0009; if() #585 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 649,==; Test 'if'
ALLOCATEMEMV d2,59; if() #585 Body Start
STORE d2,0.0002
WRITEPODSTRING d2,"ghost.zh: AutoGhost setup failed - script does not exist.\n"
ALLOCATEMEMV d2,80
STORE d2,0
WRITEPODSTRING d2,"  Script name: %s\n"
LOAD d2,0.0002; InlineFunc[void printf(char32)] Params Start
PUSHR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOAD d2,0; InlineFunc[void printf(char32)] Params Start
PUSHR d2
LOAD d2,0.0007
PUSHVARGR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
SETV d2,0; return Start
LOAD d3,0
DEALLOCATEMEMR d3
LOAD d3,0.0002
DEALLOCATEMEMR d3
LOAD d3,0.0007
DEALLOCATEMEMR d3
LOAD d3,0.0008
DEALLOCATEMEMR d3
GOTO 713; return End
LOAD d3,0
DEALLOCATEMEMR d3
LOAD d3,0.0002
DEALLOCATEMEMR d3; if() #585 Body End
GOTO 649; if() #349 Body End
LOAD d2,0.0005; if() #586 Test AND if() #349 Else Start
COMPAREV d2,48
GOTOCMP 562,<
LOAD d2,0.0005
COMPAREV d2,57
GOTOCMP 567,<=
LOAD d2,0.0005
COMPAREV d2,45
GOTOCMP 567,==
SETV d2,0
GOTO 568
SETV d2,1
COMPAREV d2,0
GOTOCMP 649,==; Test 'if'
STOREV 0,0.0004; if() #586 Body Start
LOAD d2,0.0005; if() #587 Test
COMPAREV d2,45
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 587,==; Test 'if'
SETV d2,45; if() #587 Body Start
PUSHR d2
LOAD d2,0.0007
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
SETV d2,1
STORE d2,0.0004
LOAD d2,0.0006
ADDV d2,1
STORE d2,0.0006; if() #587 Body End
LOAD d2,0.0006; for() #153 setup
ADDV d2,1
STORE d2,0.0006
LOAD d2,0.0008; for() #153 LoopTest
PUSHR d2
LOAD d2,0.0006
POP d0
READPODARRAYR d2,d2
COMPAREV d2,48
GOTOCMP 606,<
LOAD d2,0.0008
PUSHR d2
LOAD d2,0.0006
POP d0
READPODARRAYR d2,d2
COMPAREV d2,57
GOTOCMP 606,>
SETV d2,1
GOTO 607
SETV d2,0
COMPAREV d2,0
GOTOCMP 629,==; for() #153 TestFail?
LOAD d2,0.0008; for() #153 Body Start
PUSHR d2
LOAD d2,0.0006
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOAD d2,0.0007
PUSHR d2
LOAD d2,0.0004
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOAD d2,0.0004
ADDV d2,1
STORE d2,0.0004; for() #153 Body End
LOAD d2,0.0006; for() #153 LoopIncrement
ADDV d2,1
STORE d2,0.0006
GOTO 590; for() #153 End
SETV d2,0
PUSHR d2
LOAD d2,0.0007
PUSHR d2
LOAD d2,0.0004
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOAD d2,0.0007; InlineFunc[int atoi(char32)] Params Start
SETR d3,d2; InlineFunc[int atoi(char32)] Params End
ATOI d2,d3; InlineFunc[int atoi(char32)] Body
PUSHR d2
LOAD d2,0.0009
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
LOAD d2,0.0006
SUBV d2,1
STORE d2,0.0006; if() #586 Body End
LOAD d2,0.0006; if() #349 Else End AND if() #584 Body End AND for() #151 Body End AND for() #151 LoopIncrement
ADDV d2,1
STORE d2,0.0006
GOTO 433; for() #151 End
LOAD d2,0.0009; if() #589 Test AND unless(false) #588 [Opt:AlwaysOn]
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 703,==; Test 'if'
ALLOCATEMEMV d2,54; if() #589 Body Start
STORE d2,0.0005
WRITEPODSTRING d2,"ghost.zh: AutoGhost setup failed - script not found.\n"
ALLOCATEMEMV d2,80
STORE d2,0.0003
WRITEPODSTRING d2,"  Enemy name: %s\n"
ALLOCATEMEMV d2,55
STORE d2,0.0001
WRITEPODSTRING d2,"  Script name should start after this character: %c\n"
LOAD d2,0.0005; InlineFunc[void printf(char32)] Params Start
PUSHR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOAD d2,0.0003; InlineFunc[void printf(char32)] Params Start
PUSHR d2
LOAD d2,0.0008
PUSHVARGR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOAD d2,0.0001; InlineFunc[void printf(char32)] Params Start
PUSHR d2
PUSHVARGV 64; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
SETV d2,0; return Start
LOAD d3,0.0001
DEALLOCATEMEMR d3
LOAD d3,0.0003
DEALLOCATEMEMR d3
LOAD d3,0.0005
DEALLOCATEMEMR d3
LOAD d3,0.0007
DEALLOCATEMEMR d3
LOAD d3,0.0008
DEALLOCATEMEMR d3
GOTO 713; return End
LOAD d3,0.0001
DEALLOCATEMEMR d3
LOAD d3,0.0003
DEALLOCATEMEMR d3
LOAD d3,0.0005
DEALLOCATEMEMR d3; if() #589 Body End
SETV d2,1; return Start
LOAD d3,0.0007
DEALLOCATEMEMR d3
LOAD d3,0.0008
DEALLOCATEMEMR d3
GOTO 713; return End
LOAD d3,0.0007
DEALLOCATEMEMR d3
LOAD d3,0.0008
DEALLOCATEMEMR d3
POPARGS d5,0.0011
RETURNFUNC; Func[int __AutoGhostParseName(NPC, int)] Body End
SETR d4,SP2; Func[void __AutoGhostKill(NPC)] Body Start
SETV d2,65536
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2
SETV d2,1024
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETV d2,1024
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETV d2,-1000
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHP,d2
SETV d2,0
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCITEMSET,d2
POP d5
RETURNFUNC; Func[void __AutoGhostKill(NPC)] Body End
PUSHARGSV 0,0.0002; Func[int FindUnusedFFC(int)] Body Start
SETR d4,SP2
LOAD d2,0.0002; InlineFunc[untyped Max(untyped, untyped)] Params Start AND for() #43 setup
ADDV d2,1
PUSHVARGR d2
PUSHVARGV 1; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
STORE d2,0
LOAD d2,0; for() #43 LoopTest
COMPAREV d2,32
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 820,==; for() #43 TestFail?
LOAD d2,0; InlineFunc[FFC Screen->LoadFFC(int)] Params AND for() #43 Body Start
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORE d2,0.0001
LOAD d2,0.0001; if() #175 Test
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,0
GOTOCMP 796,==
LOAD d2,0.0001
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,1
GOTOCMP 796,==
SETV d2,0
GOTO 797
SETV d2,1
COMPAREV d2,0
GOTOCMP 816,==; Test 'if'
LOAD d2,0.0001; unless() #176 Test AND if() #175 Body Start
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
COMPAREV d2,0
GOTOCMP 816,!=; Test 'unless'
LOAD d2,0.0001; unless() #177 Test AND unless() #176 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOCMP 816,!=; Test 'unless'
LOAD d2,0; return Start AND unless() #177 Body Start
GOTO 821; return End AND unless() #177 Body End
LOAD d2,0; unless() #176 Body End AND if() #175 Body End AND for() #43 Body End AND for() #43 LoopIncrement
ADDV d2,1
STORE d2,0
GOTO 774; for() #43 End
SETV d2,0; return Start
POPARGS d5,0.0003; return End
RETURNFUNC; Func[int FindUnusedFFC(int)] Body End
SETR d4,SP2; Func[int CenterX(EWeapon)] Body Start
LOAD d2,0; return Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOAD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOAD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
POP d5; return End
RETURNFUNC; Func[int CenterX(EWeapon)] Body End
SETR d4,SP2; Func[int CenterY(EWeapon)] Body Start
LOAD d2,0; return Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOAD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOAD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
POP d5; return End
RETURNFUNC; Func[int CenterY(EWeapon)] Body End
PUSHARGSV 0,0.0002; Func[void CleanUpGhostFFCs()] Body Start
SETR d4,SP2
SETR d2,LINKHP; if() #86 Test
COMPAREV d2,0
GOTOCMP 877,>
GOTO 877
SETV d2,1
GOTO 878
SETV d2,0
COMPAREV d2,0
GOTOCMP 926,==; Test 'if'
STOREV 1,0; for() #3 setup AND if() #86 Body Start
LOAD d2,0; for() #3 LoopTest
COMPAREV d2,32
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 926,==; for() #3 TestFail?
LOAD d2,0; InlineFunc[FFC Screen->LoadFFC(int)] Params AND for() #3 Body Start
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORE d2,0.0001
SETR d2,gd25; if() #87 Test
PUSHR d2
LOAD d2,0.0001
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
RSHIFTV d2,4
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOAD d2,0.0001
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
ANDV d2,15
SETV d3,1
LSHIFTR d3,d2
SETR d2,d3
POP d3
ANDR d2,d3
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 922,==; Test 'if'
SETV d2,0; if() #87 Body Start
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #87 Body End
LOAD d2,0; for() #3 Body End AND for() #3 LoopIncrement
ADDV d2,1
STORE d2,0
GOTO 881; for() #3 End
POPARGS d5,0.0002; if() #86 Body End
RETURNFUNC; Func[void CleanUpGhostFFCs()] Body End
PUSHARGSV 0,0.0002; Func[void DrawEWeaponShadow(EWeapon)] Body Start
SETR d4,SP2
PUSHR d4
LOAD d2,0.0002; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0823; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOAD d2,0.0002
PUSHR d2
POP REFEWPN
SETR d2,EWPNXOFS
POP d3
ADDR d2,d3
STORE d2,0.0001
LOAD d2,0.0002
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOAD d2,0.0002
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
SUBV d2,1
MULTV d2,16
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0002
PUSHR d2
POP REFEWPN
SETR d2,EWPNYOFS
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0002
PUSHR d2
POP REFEWPN
SETR d2,EWPNZOFS
POP d3
SUBR d3,d2
SETR d2,d3
STORE d2,0
PUSHV 1; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #35 [Opt:AlwaysOn]
LOAD d2,0.0001
PUSHR d2
LOAD d2,0
PUSHR d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,2
ADDV d2,27400
PUSHR d2
PUSHARGSV 1,0.0002
PUSHV 7
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0004
PUSHV 1
PUSHV 64; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS d5,0.0003
RETURNFUNC; Func[void DrawEWeaponShadow(EWeapon)] Body End
PUSHARGSV 0,0.0009; Func[void DrawGhostFFCs()] Body Start
SETR d4,SP2
SETV d2,1; if() #125 Test
PUSHR d2
POP d0
SETR d2,SCREENEFLAGSD
ANDV d2,4
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1010,==; Test 'if'
PUSHR d4; unless() #126 Test AND if() #125 Body Start
CALLFUNC 0.1191; UsrFunc[bool __HaveAmulet()] Call
POP d4
COMPAREV d2,0
GOTOCMP 1189,==; Test 'unless' AND return (Void) AND unless() #126 Body
SETV d2,1; if() #125 Body End AND if() #37 Test AND if(true) #36 [Opt:AlwaysOn]
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,16
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1022,==; Test 'if'
SETV d2,1; if() #37 Body Start
STORE d2,0.0003
GOTO 1024; if() #37 Body End
SETV d2,2; if() #37 Else Start
STORE d2,0.0003; if() #37 Else End
SETV d2,4
STORE d2,0.0002
STOREV 1,0.0001; for() #20 setup
LOAD d2,0.0001; for() #20 LoopTest
PUSHR d2
SETR d2,NPCCOUNT; InlineFunc[int Screen->NumNPCs()] Body
POP d3
COMPARER d3,d2
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 1189,==; for() #20 TestFail?
LOAD d2,0.0001; InlineFunc[NPC Screen->LoadNPC(int)] Params AND for() #20 Body Start
SUBV d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Body Start
LOADNPCR d2
SETR d2,REFNPC; InlineFunc[NPC Screen->LoadNPC(int)] Body End
STORE d2,0.0006
PUSHR d4
LOAD d2,0.0006; UsrFunc[int __GetDrawingArray(NPC)] Params Start
PUSHR d2; UsrFunc[int __GetDrawingArray(NPC)] Params End
CALLFUNC 0.1210; UsrFunc[int __GetDrawingArray(NPC)] Call
POP d4
STORE d2,0.0008
LOAD d2,0.0008; if() #127 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1185,!=; Test 'if' AND continue 1; AND if() #127 Body
SETR d2,gd27; if() #128 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1069,==; Test 'if'
LOAD d2,0.0008; if() #129 Test AND if() #128 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,2
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1185,!=; Test 'if' AND continue 1; AND if() #129 Body
LOAD d2,0.0008; if() #128 Body End AND if() #38 Test
PUSHR d2
POP d0
READPODARRAYV d2,2
ANDV d2,1
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1081,==; Test 'if'
SETV d2,64; if() #38 Body Start
STORE d2,0.0005
GOTO 1083; if() #38 Body End
SETV d2,128; if() #38 Else Start
STORE d2,0.0005; if() #38 Else End
LOAD d2,0.0008; if() #39 Test
PUSHR d2
POP d0
READPODARRAYV d2,2
ANDV d2,4
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1095,==; Test 'if'
LOAD d2,0.0002; if() #39 Body Start
STORE d2,0.0004
GOTO 1097; if() #39 Body End
LOAD d2,0.0003; if() #39 Else Start
STORE d2,0.0004; if() #39 Else End
SETV d2,3
STORE d2,0.0007
STOREV 0,0; for() #21 setup
LOAD d2,0; for() #21 LoopTest
PUSHR d2
LOAD d2,0.0008
PUSHR d2
POP d0
READPODARRAYV d2,0
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1185,==; for() #21 TestFail?
LOAD d2,0.0008; if() #130 Test AND for() #21 Body Start
PUSHR d2
LOAD d2,0.0007
POP d0
READPODARRAYR d2,d2
COMPAREV d2,1
GOTOCMP 1127,==
LOAD d2,0.0008
PUSHR d2
LOAD d2,0.0007
POP d0
READPODARRAYR d2,d2
COMPAREV d2,0
GOTOCMP 1127,==
SETV d2,1
GOTO 1128
SETV d2,0
COMPAREV d2,0
GOTOCMP 1178,==; Test 'if'
LOAD d2,0.0004; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #130 Body Start
PUSHR d2
LOAD d2,0.0008
PUSHR d2
LOAD d2,0.0007
ADDV d2,1
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOAD d2,0.0008
PUSHR d2
LOAD d2,0.0007
ADDV d2,2
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOAD d2,0.0008
PUSHR d2
LOAD d2,0.0007
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOAD d2,0.0008
PUSHR d2
LOAD d2,0.0007
ADDV d2,3
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOAD d2,0.0008
PUSHR d2
LOAD d2,0.0007
ADDV d2,4
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOAD d2,0.0008
PUSHR d2
POP d0
READPODARRAYV d2,1
PUSHR d2
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0005
PUSHV 1
LOAD d2,0.0005
PUSHR d2; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBO; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0016; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #130 Body End
LOAD d2,0.0007
ADDV d2,6
STORE d2,0.0007; for() #21 Body End
LOAD d2,0; for() #21 LoopIncrement
ADDV d2,1
STORE d2,0
GOTO 1100; for() #21 End
LOAD d2,0.0001; for() #20 Body End AND for() #20 LoopIncrement
ADDV d2,1
STORE d2,0.0001
GOTO 1027; for() #20 End
POPARGS d5,0.0009
RETURNFUNC; Func[void DrawGhostFFCs()] Body End
SETR d4,SP2; Func[bool __HaveAmulet()] Body Start
SETV d2,50; if() #691 Test
PUSHR d2
POP d0
SETR d2,LINKITEMD
COMPAREV d2,0
GOTOCMP 1200,==; Test 'if'
SETV d2,1; return Start AND if() #691 Body Start
GOTO 1209; return End AND if() #691 Body End
SETV d2,63; if() #692 Test
PUSHR d2
POP d0
SETR d2,LINKITEMD
COMPAREV d2,0
GOTOCMP 1208,==; Test 'if'
SETV d2,1; return Start AND if() #692 Body Start
GOTO 1209; return End AND if() #692 Body End
SETV d2,0; return Start
RETURNFUNC; return End AND Func[bool __HaveAmulet()] Body End
PUSHV 0; Func[int __GetDrawingArray(NPC)] Body Start
SETR d4,SP2
LOAD d2,0.0001; if() #602 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65536
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1226,==; Test 'if'
SETV d2,0; return Start AND if() #602 Body Start
GOTO 1248; return End AND if() #602 Body End
LOAD d2,0.0001
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65535
STORE d2,0
LOAD d2,0; if() #603 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1242,==; Test 'if'
SETV d2,0; return Start AND if() #603 Body Start
GOTO 1248; return End AND if() #603 Body End
LOAD d2,0
PUSHR d2
POP d0
READPODARRAYV d2,23
STORE d2,0
LOAD d2,0; return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int __GetDrawingArray(NPC)] Body End
PUSHARGSV 0,0.0002; Func[int FindUnusedFFC()] Body Start
SETR d4,SP2
STOREV 1,0; for() #42 setup
LOAD d2,0; for() #42 LoopTest
COMPAREV d2,33
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1299,==; for() #42 TestFail?
LOAD d2,0; InlineFunc[FFC Screen->LoadFFC(int)] Params AND for() #42 Body Start
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORE d2,0.0001
LOAD d2,0.0001; if() #172 Test
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,0
GOTOCMP 1275,==
LOAD d2,0.0001
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,1
GOTOCMP 1275,==
SETV d2,0
GOTO 1276
SETV d2,1
COMPAREV d2,0
GOTOCMP 1295,==; Test 'if'
LOAD d2,0.0001; unless() #173 Test AND if() #172 Body Start
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
COMPAREV d2,0
GOTOCMP 1295,!=; Test 'unless'
LOAD d2,0.0001; unless() #174 Test AND unless() #173 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOCMP 1295,!=; Test 'unless'
LOAD d2,0; return Start AND unless() #174 Body Start
GOTO 1300; return End AND unless() #174 Body End
LOAD d2,0; unless() #173 Body End AND if() #172 Body End AND for() #42 Body End AND for() #42 LoopIncrement
ADDV d2,1
STORE d2,0
GOTO 1253; for() #42 End
SETV d2,0; return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int FindUnusedFFC()] Body End
PUSHV 0; Func[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body Start
SETR d4,SP2
LOAD d2,0.0003; if() #198 Test
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1315,==; Test 'if'
PUSHR d4; if() #198 Body Start
LOAD d2,0.0009; UsrFunc[int GetDefaultEWeaponSprite(int)] Params Start
PUSHR d2; UsrFunc[int GetDefaultEWeaponSprite(int)] Params End
CALLFUNC 0.1461; UsrFunc[int GetDefaultEWeaponSprite(int)] Call
POP d4
STORE d2,0.0003; if() #198 Body End
LOAD d2,0.0002; if() #199 Test
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1326,==; Test 'if'
PUSHR d4; if() #199 Body Start
LOAD d2,0.0009; UsrFunc[int GetDefaultEWeaponSound(int)] Params Start
PUSHR d2; UsrFunc[int GetDefaultEWeaponSound(int)] Params End
CALLFUNC 0.1618; UsrFunc[int GetDefaultEWeaponSound(int)] Call
POP d4
STORE d2,0.0002; if() #199 Body End
LOAD d2,0.0009; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Params
CREATEEWEAPONR d2; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body Start
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body End
STORE d2,0
LOAD d2,0.0008
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOAD d2,0.0007
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
LOAD d2,0.0005
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOAD d2,0.0004
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNPOWER,d2
SETV d2,0
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNANGULAR,d2
LOAD d2,0.0001; if() #51 Test
ANDV d2,1
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1396,==; Test 'if'
PUSHR d4; if() #51 Body Start
LOAD d2,0.0006; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR d2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.1945; UsrFunc[int __UnblockableDir(int)] Call
POP d4
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDIR,d2
GOTO 1405; if() #51 Body End
LOAD d2,0.0006; if() #51 Else Start
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDIR,d2; if() #51 Else End
LOAD d2,0.0003; if() #200 Test
COMPAREV d2,0
SETCMP d2,I>=
COMPAREV d2,0
GOTOCMP 1416,==; Test 'if'
LOAD d2,0; InlineFunc[void EWeapon->UseSprite(int)] Params Start AND if() #200 Body Start
PUSHR d2
LOAD d2,0.0003; InlineFunc[void EWeapon->UseSprite(int)] Params End
POP d3; InlineFunc[void EWeapon->UseSprite(int)] Body Start
SETR REFEWPN,d3
EWPNUSESPRITER d2; InlineFunc[void EWeapon->UseSprite(int)] Body End AND if() #200 Body End
LOAD d2,0.0001; if() #201 Test
ANDV d2,32
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1432,==; Test 'if'
SETV d2,0; if() #201 Body Start
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNCOLLDET,d2; if() #201 Body End
LOAD d2,0.0001; if() #202 Test
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1443,==; Test 'if'
PUSHR d4; if() #202 Body Start
LOAD d2,0; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1780; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #202 Body End
LOAD d2,0.0001
ORV d2,512
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0002; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
LOAD d2,0; return Start
POPARGS d5,0.0010; return End
RETURNFUNC; Func[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0,0.0003; Func[int GetDefaultEWeaponSprite(int)] Body Start
SETR d4,SP2
LOAD d2,0.0003; if() #58 Test
COMPAREV d2,129
GOTOCMP 1471,==
LOAD d2,0.0003
COMPAREV d2,145
GOTOCMP 1471,==
SETV d2,0
GOTO 1472
SETV d2,1
COMPAREV d2,0
GOTOCMP 1476,==; Test 'if'
SETV d2,17; return Start AND if() #58 Body Start
GOTO 1616; return End AND if() #58 Body End
LOAD d2,0.0003; if() #59 Test AND if() #58 Else Start
COMPAREV d2,133
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1483,==; Test 'if'
SETV d2,18; return Start AND if() #59 Body Start
GOTO 1616; return End AND if() #59 Body End
LOAD d2,0.0003; if() #60 Test AND if() #59 Else Start
COMPAREV d2,130
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1490,==; Test 'if'
SETV d2,19; return Start AND if() #60 Body Start
GOTO 1616; return End AND if() #60 Body End
LOAD d2,0.0003; if() #61 Test AND if() #60 Else Start
COMPAREV d2,140
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1497,==; Test 'if'
SETV d2,35; return Start AND if() #61 Body Start
GOTO 1616; return End AND if() #61 Body End
LOAD d2,0.0003; if() #62 Test AND if() #61 Else Start
COMPAREV d2,142
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1504,==; Test 'if'
SETV d2,81; return Start AND if() #62 Body Start
GOTO 1616; return End AND if() #62 Body End
LOAD d2,0.0003; if() #63 Test AND if() #62 Else Start
COMPAREV d2,139
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1511,==; Test 'if'
SETV d2,80; return Start AND if() #63 Body Start
GOTO 1616; return End AND if() #63 Body End
LOAD d2,0.0003; if() #64 Test AND if() #63 Else Start
COMPAREV d2,134
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1518,==; Test 'if'
SETV d2,21; return Start AND if() #64 Body Start
GOTO 1616; return End AND if() #64 Body End
LOAD d2,0.0003; if() #65 Test AND if() #64 Else Start
COMPAREV d2,132
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1525,==; Test 'if'
SETV d2,20; return Start AND if() #65 Body Start
GOTO 1616; return End AND if() #65 Body End
LOAD d2,0.0003; if() #66 Test AND if() #65 Else Start
COMPAREV d2,141
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1532,==; Test 'if'
SETV d2,36; return Start AND if() #66 Body Start
GOTO 1616; return End AND if() #66 Body End
LOAD d2,0.0003; if() #67 Test AND if() #66 Else Start
COMPAREV d2,137
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1539,==; Test 'if'
SETV d2,76; return Start AND if() #67 Body Start
GOTO 1616; return End AND if() #67 Body End
LOAD d2,0.0003; if() #68 Test AND if() #67 Else Start
COMPAREV d2,138
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1546,==; Test 'if'
SETV d2,77; return Start AND if() #68 Body Start
GOTO 1616; return End AND if() #68 Body End
LOAD d2,0.0003; if() #69 Test AND if() #68 Else Start
COMPAREV d2,131
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1615,==; Test 'if'
LOAD d2,0; for() #48 LoopTest AND if() #69 Body Start
COMPAREV d2,256
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1599,==; for() #48 TestFail?
LOAD d2,0; unless() #211 Test AND for() #48 Body Start
PUSHR d2
POP d0
SETR d2,LINKITEMD
COMPAREV d2,0
GOTOCMP 1595,==; Test 'unless' AND continue 1; AND unless() #211 Body
LOAD d2,0; InlineFunc[ItemData Game->LoadItemData(int)] Params
LOADITEMDATAR d2; InlineFunc[ItemData Game->LoadItemData(int)] Body Start
SETR d2,REFITEMCLASS; InlineFunc[ItemData Game->LoadItemData(int)] Body End
STORE d2,0.0001
LOAD d2,0.0001; if() #212 Test
PUSHR d2
POP REFITEMCLASS
SETR d2,IDATAFAMILY
COMPAREV d2,1
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1595,!=; Test 'if' AND continue 1; AND if() #212 Body
LOAD d2,0.0001; if() #213 Test
PUSHR d2
POP REFITEMCLASS
SETR d2,IDATALEVEL
PUSHR d2
LOAD d2,0.0002
POP d3
COMPARER d3,d2
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 1595,==; Test 'if'
LOAD d2,0.0001; if() #213 Body Start
PUSHR d2
POP REFITEMCLASS
SETR d2,IDATALEVEL
STORE d2,0.0002
LOAD d2,0.0002; if() #214 Test
COMPAREV d2,3
SETCMP d2,I>=
COMPAREV d2,0
GOTOCMP 1599,!=; Test 'if' AND break 1; AND if() #214 Body
LOAD d2,0; if() #213 Body End AND for() #48 Body End AND for() #48 LoopIncrement
ADDV d2,1
STORE d2,0
GOTO 1551; for() #48 End
LOAD d2,0.0002; if() #70 Test
COMPAREV d2,1
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 1606,==; Test 'if'
SETV d2,4; return Start AND if() #70 Body Start
GOTO 1616; return End AND if() #70 Body End
LOAD d2,0.0002; if() #71 Test AND if() #70 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1613,==; Test 'if'
SETV d2,5; return Start AND if() #71 Body Start
GOTO 1616; return End AND if() #71 Body End
SETV d2,6; return Start AND if() #71 Else Start
GOTO 1616; return End AND if() #71 Else End AND if() #70 Else End AND if() #69 Body End
SETV d2,0; return Start AND if() #69 Else Start
POPARGS d5,0.0004; return End AND if() #69 Else End AND if() #68 Else End AND if() #67 Else End AND if() #66 Else End AND if() #65 Else End AND if() #64 Else End AND if() #63 Else End AND if() #62 Else End AND if() #61 Else End AND if() #60 Else End AND if() #59 Else End AND if() #58 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSprite(int)] Body End
SETR d4,SP2; Func[int GetDefaultEWeaponSound(int)] Body Start
LOAD d2,0; if() #54 Test
COMPAREV d2,129
GOTOCMP 1627,==
LOAD d2,0
COMPAREV d2,145
GOTOCMP 1627,==
SETV d2,0
GOTO 1628
SETV d2,1
COMPAREV d2,0
GOTOCMP 1632,==; Test 'if'
SETV d2,40; return Start AND if() #54 Body Start
GOTO 1669; return End AND if() #54 Body End
LOAD d2,0; if() #55 Test AND if() #54 Else Start
COMPAREV d2,134
GOTOCMP 1640,==
LOAD d2,0
COMPAREV d2,141
GOTOCMP 1640,==
SETV d2,0
GOTO 1641
SETV d2,1
COMPAREV d2,0
GOTOCMP 1645,==; Test 'if'
SETV d2,32; return Start AND if() #55 Body Start
GOTO 1669; return End AND if() #55 Body End
LOAD d2,0; if() #56 Test AND if() #55 Else Start
COMPAREV d2,140
GOTOCMP 1656,==
LOAD d2,0
COMPAREV d2,142
GOTOCMP 1656,==
LOAD d2,0
COMPAREV d2,139
GOTOCMP 1656,==
SETV d2,0
GOTO 1657
SETV d2,1
COMPAREV d2,0
GOTOCMP 1661,==; Test 'if'
SETV d2,13; return Start AND if() #56 Body Start
GOTO 1669; return End AND if() #56 Body End
LOAD d2,0; if() #57 Test AND if() #56 Else Start
COMPAREV d2,133
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1668,==; Test 'if'
SETV d2,51; return Start AND if() #57 Body Start
GOTO 1669; return End AND if() #57 Body End
SETV d2,0; return Start AND if() #57 Else Start
POP d5; return End AND if() #57 Else End AND if() #56 Else End AND if() #55 Else End AND if() #54 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSound(int)] Body End
PUSHARGSV 0,0.0002; Func[void SetEWeaponDir(EWeapon)] Body Start
SETR d4,SP2
LOAD d2,0.0002
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
MODV d2,6.2832
STORE d2,0.0001
LOAD d2,0.0001; if() #518 Test
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1687,==; Test 'if'
LOAD d2,0.0001; if() #518 Body Start
ADDV d2,6.2832
STORE d2,0.0001; if() #518 Body End
LOAD d2,0.0001; if() #247 Test
COMPAREV d2,0.3927
GOTOCMP 1695,<
LOAD d2,0.0001
COMPAREV d2,5.8905
GOTOCMP 1695,>
SETV d2,0
GOTO 1696
SETV d2,1
COMPAREV d2,0
GOTOCMP 1701,==; Test 'if'
SETV d2,3; if() #247 Body Start
STORE d2,0
GOTO 1751; if() #247 Body End
LOAD d2,0.0001; if() #248 Test AND if() #247 Else Start
COMPAREV d2,1.1781
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1709,==; Test 'if'
SETV d2,7; if() #248 Body Start
STORE d2,0
GOTO 1751; if() #248 Body End
LOAD d2,0.0001; if() #249 Test AND if() #248 Else Start
COMPAREV d2,1.9635
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1717,==; Test 'if'
SETV d2,1; if() #249 Body Start
STORE d2,0
GOTO 1751; if() #249 Body End
LOAD d2,0.0001; if() #250 Test AND if() #249 Else Start
COMPAREV d2,2.7489
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1725,==; Test 'if'
SETV d2,6; if() #250 Body Start
STORE d2,0
GOTO 1751; if() #250 Body End
LOAD d2,0.0001; if() #251 Test AND if() #250 Else Start
COMPAREV d2,3.5343
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1733,==; Test 'if'
SETV d2,2; if() #251 Body Start
STORE d2,0
GOTO 1751; if() #251 Body End
LOAD d2,0.0001; if() #252 Test AND if() #251 Else Start
COMPAREV d2,4.3197
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1741,==; Test 'if'
SETV d2,4; if() #252 Body Start
STORE d2,0
GOTO 1751; if() #252 Body End
LOAD d2,0.0001; if() #253 Test AND if() #252 Else Start
COMPAREV d2,5.1051
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1749,==; Test 'if'
SETV d2,0; if() #253 Body Start
STORE d2,0
GOTO 1751; if() #253 Body End
SETV d2,5; if() #253 Else Start
STORE d2,0; if() #253 Else End
LOAD d2,0.0002; if() #252 Else End AND if() #251 Else End AND if() #250 Else End AND if() #249 Else End AND if() #248 Else End AND if() #247 Else End AND if() #519 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1769,==; Test 'if'
PUSHR d4; if() #519 Body Start
LOAD d2,0; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR d2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.1945; UsrFunc[int __UnblockableDir(int)] Call
POP d4
STORE d2,0; if() #519 Body End
LOAD d2,0
PUSHR d2
LOAD d2,0.0002
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDIR,d2
POPARGS d5,0.0003
RETURNFUNC; Func[void SetEWeaponDir(EWeapon)] Body End
PUSHV 0; Func[void SetEWeaponRotation(EWeapon)] Body Start
SETR d4,SP2
LOAD d2,0.0001; if() #271 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOCMP 1863,==; Test 'if'
LOAD d2,0.0001; if() #271 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
MODV d2,6.2832
STORE d2,0
LOAD d2,0; if() #524 Test
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1802,==; Test 'if'
LOAD d2,0; if() #524 Body Start
ADDV d2,6.2832
STORE d2,0; if() #524 Body End
LOAD d2,0; if() #272 Test
COMPAREV d2,0.7854
GOTOCMP 1810,<
LOAD d2,0
COMPAREV d2,5.4978
GOTOCMP 1810,>
SETV d2,0
GOTO 1811
SETV d2,1
COMPAREV d2,0
GOTOCMP 1823,==; Test 'if'
SETV d2,4; if() #272 Body Start
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 1943; if() #272 Body End
LOAD d2,0; if() #273 Test AND if() #272 Else Start
COMPAREV d2,2.3562
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 1838,==; Test 'if'
SETV d2,3; if() #273 Body Start
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 1943; if() #273 Body End
LOAD d2,0; if() #274 Test AND if() #273 Else Start
COMPAREV d2,3.9270
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1853,==; Test 'if'
SETV d2,7; if() #274 Body Start
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 1943; if() #274 Body End
SETV d2,0; if() #274 Else Start
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2; if() #274 Else End
GOTO 1943; if() #273 Else End AND if() #272 Else End AND if() #271 Body End
PUSHR d4; if() #271 Else Start
LOAD d2,0.0001; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2005; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORE d2,0
LOAD d2,0; if() #275 Test
COMPAREV d2,0
GOTOCMP 1882,==
LOAD d2,0
COMPAREV d2,5
GOTOCMP 1882,==
LOAD d2,0
COMPAREV d2,4
GOTOCMP 1882,==
SETV d2,0
GOTO 1883
SETV d2,1
COMPAREV d2,0
GOTOCMP 1895,==; Test 'if'
SETV d2,0; if() #275 Body Start
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 1943; if() #275 Body End
LOAD d2,0; if() #276 Test AND if() #275 Else Start
COMPAREV d2,1
GOTOCMP 1906,==
LOAD d2,0
COMPAREV d2,7
GOTOCMP 1906,==
LOAD d2,0
COMPAREV d2,6
GOTOCMP 1906,==
SETV d2,0
GOTO 1907
SETV d2,1
COMPAREV d2,0
GOTOCMP 1919,==; Test 'if'
SETV d2,3; if() #276 Body Start
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 1943; if() #276 Body End
LOAD d2,0; if() #277 Test AND if() #276 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1934,==; Test 'if'
SETV d2,7; if() #277 Body Start
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 1943; if() #277 Body End
SETV d2,4; if() #277 Else Start
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2; if() #277 Else End
POPARGS d5,0.0002; if() #276 Else End AND if() #275 Else End AND if() #271 Else End
RETURNFUNC; Func[void SetEWeaponRotation(EWeapon)] Body End
SETR d4,SP2; Func[int __UnblockableDir(int)] Body Start
LOAD d2,0; if() #715 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1953,==; Test 'if'
SETV d2,8; return Start AND if() #715 Body Start
GOTO 2003; return End AND if() #715 Body End
LOAD d2,0; if() #716 Test
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1960,==; Test 'if'
SETV d2,12; return Start AND if() #716 Body Start
GOTO 2003; return End AND if() #716 Body End
LOAD d2,0; if() #717 Test
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1967,==; Test 'if'
SETV d2,14; return Start AND if() #717 Body Start
GOTO 2003; return End AND if() #717 Body End
LOAD d2,0; if() #718 Test
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1974,==; Test 'if'
SETV d2,10; return Start AND if() #718 Body Start
GOTO 2003; return End AND if() #718 Body End
LOAD d2,0; if() #719 Test
COMPAREV d2,4
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1981,==; Test 'if'
SETV d2,15; return Start AND if() #719 Body Start
GOTO 2003; return End AND if() #719 Body End
LOAD d2,0; if() #720 Test
COMPAREV d2,5
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1988,==; Test 'if'
SETV d2,9; return Start AND if() #720 Body Start
GOTO 2003; return End AND if() #720 Body End
LOAD d2,0; if() #721 Test
COMPAREV d2,6
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1995,==; Test 'if'
SETV d2,13; return Start AND if() #721 Body Start
GOTO 2003; return End AND if() #721 Body End
LOAD d2,0; if() #722 Test
COMPAREV d2,7
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2002,==; Test 'if'
SETV d2,11; return Start AND if() #722 Body Start
GOTO 2003; return End AND if() #722 Body End
LOAD d2,0; return Start
POP d5; return End
RETURNFUNC; Func[int __UnblockableDir(int)] Body End
SETR d4,SP2; Func[int __NormalizeDir(int)] Body Start
LOAD d2,0; if() #701 Test
COMPAREV d2,0
GOTOCMP 2014,<
LOAD d2,0
COMPAREV d2,7
GOTOCMP 2014,>
SETV d2,1
GOTO 2015
SETV d2,0
COMPAREV d2,0
GOTOCMP 2019,==; Test 'if'
LOAD d2,0; return Start AND if() #701 Body Start
GOTO 2076; return End AND if() #701 Body End
LOAD d2,0; if() #702 Test
COMPAREV d2,8
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2026,==; Test 'if'
SETV d2,0; return Start AND if() #702 Body Start
GOTO 2076; return End AND if() #702 Body End
LOAD d2,0; if() #703 Test
COMPAREV d2,9
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2033,==; Test 'if'
SETV d2,5; return Start AND if() #703 Body Start
GOTO 2076; return End AND if() #703 Body End
LOAD d2,0; if() #704 Test
COMPAREV d2,10
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2040,==; Test 'if'
SETV d2,3; return Start AND if() #704 Body Start
GOTO 2076; return End AND if() #704 Body End
LOAD d2,0; if() #705 Test
COMPAREV d2,11
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2047,==; Test 'if'
SETV d2,7; return Start AND if() #705 Body Start
GOTO 2076; return End AND if() #705 Body End
LOAD d2,0; if() #706 Test
COMPAREV d2,12
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2054,==; Test 'if'
SETV d2,1; return Start AND if() #706 Body Start
GOTO 2076; return End AND if() #706 Body End
LOAD d2,0; if() #707 Test
COMPAREV d2,13
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2061,==; Test 'if'
SETV d2,6; return Start AND if() #707 Body Start
GOTO 2076; return End AND if() #707 Body End
LOAD d2,0; if() #708 Test
COMPAREV d2,14
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2068,==; Test 'if'
SETV d2,2; return Start AND if() #708 Body Start
GOTO 2076; return End AND if() #708 Body End
LOAD d2,0; if() #709 Test
COMPAREV d2,15
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2075,==; Test 'if'
SETV d2,4; return Start AND if() #709 Body Start
GOTO 2076; return End AND if() #709 Body End
SETV d2,0; return Start
POP d5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
SETR d4,SP2; Func[bool IsSideview()] Body Start
SETV d2,0; return Start
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,4
PUSHR d2
SETR d2,CURDMAP; InlineFunc[DMapData Game->LoadDMapData(int)] Params
LOADDMAPDATAR d2; InlineFunc[DMapData Game->LoadDMapData(int)] Body Start
SETR d2,REFDMAPDATA; InlineFunc[DMapData Game->LoadDMapData(int)] Body End
PUSHR d2
POP REFDMAPDATA
SETR d2,DMAPDATASIDEVIEW
POP d3
COMPARER d3,d2
SETCMP d2,BI!=
RETURNFUNC; return End AND Func[bool IsSideview()] Body End
SETR d4,SP2; Func[void InitializeGhostZHData()] Body Start
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 2,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 3,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 4,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 5,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2
RETURNFUNC; Func[void InitializeGhostZHData()] Body End
SETR d4,SP2; Func[void KillEWeapon(EWeapon)] Body Start
LOAD d2,0
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ORV d2,128
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d5
RETURNFUNC; Func[void KillEWeapon(EWeapon)] Body End
PUSHARGSV 0,0.0005; Func[int __GetEWeaponThrowHeight(EWeapon)] Body Start
SETR d4,SP2
LOAD d2,0.0005
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
STORE d2,0.0004
LOAD d2,0.0004; if() #604 Test
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 2176,==; Test 'if'
SETV d2,1; return Start AND if() #604 Body Start
GOTO 2269; return End AND if() #604 Body End
PUSHR d4
LOAD d2,0.0005; Int.Func[int Distance(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOAD d2,0.0005
PUSHR d2
POP REFEWPN
SETR d2,EWPNHXSZ
DIVV d2,2
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0005
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOAD d2,0.0005
PUSHR d2
POP REFEWPN
SETR d2,EWPNHYSZ
DIVV d2,2
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,LINKX
ADDV d2,8
PUSHR d2
SETR d2,LINKY
ADDV d2,8
PUSHR d2; Int.Func[int Distance(int, int, int, int)] Params End
CALLFUNC 0.0015; Int.Func[int Distance(int, int, int, int)] Call
POP d4
STORE d2,0.0003
LOAD d2,0.0003; if() #605 Test
COMPAREV d2,1
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 2219,==; Test 'if'
SETV d2,1; return Start AND if() #605 Body Start
GOTO 2269; return End AND if() #605 Body End
LOAD d2,0.0003
PUSHR d2
LOAD d2,0.0004
POP d3
DIVR d3,d2
SETR d2,d3
STORE d2,0.0002
LOAD d2,0.0001; while() #5 Test
COMPAREV d2,3.2000
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 2245,==; Test 'while'
LOAD d2,0.0001; while() #5 Body Start
ADDV d2,0.1600
STORE d2,0.0001
LOAD d2,0.0002
SUBV d2,2
STORE d2,0.0002
LOAD d2,0.0002; if() #606 Test
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 2226,==; Test 'if'
LOAD d2,0.0001; return Start AND if() #606 Body Start
GOTO 2269; return End AND if() #606 Body End
GOTO 2226; while() #5 Body End AND while() #5 End
LOAD d2,0.0002; while() #6 Test
PUSHR d2
LOAD d2,0
DIVV d2,3.2000
POP d3
COMPARER d3,d2
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 2268,==; Test 'while'
LOAD d2,0.0001; while() #6 Body Start
ADDV d2,0.1600
STORE d2,0.0001
LOAD d2,0
PUSHR d2
LOAD d2,0.0001
SUBV d2,3.2000
POP d3
ADDR d2,d3
STORE d2,0
LOAD d2,0.0002
SUBV d2,2
STORE d2,0.0002; while() #6 Body End
GOTO 2245; while() #6 End
LOAD d2,0.0001; return Start
POPARGS d5,0.0006; return End
RETURNFUNC; Func[int __GetEWeaponThrowHeight(EWeapon)] Body End
SETR d4,SP2; Func[void SetEWeaponRotation(EWeapon, int)] Body Start
PUSHR d4
LOAD d2,0; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2005; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORE d2,0
LOAD d2,0; if() #278 Test
COMPAREV d2,0
GOTOCMP 2289,==
LOAD d2,0
COMPAREV d2,5
GOTOCMP 2289,==
LOAD d2,0
COMPAREV d2,4
GOTOCMP 2289,==
SETV d2,0
GOTO 2290
SETV d2,1
COMPAREV d2,0
GOTOCMP 2302,==; Test 'if'
SETV d2,0; if() #278 Body Start
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2350; if() #278 Body End
LOAD d2,0; if() #279 Test AND if() #278 Else Start
COMPAREV d2,1
GOTOCMP 2313,==
LOAD d2,0
COMPAREV d2,7
GOTOCMP 2313,==
LOAD d2,0
COMPAREV d2,6
GOTOCMP 2313,==
SETV d2,0
GOTO 2314
SETV d2,1
COMPAREV d2,0
GOTOCMP 2326,==; Test 'if'
SETV d2,3; if() #279 Body Start
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2350; if() #279 Body End
LOAD d2,0; if() #280 Test AND if() #279 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2341,==; Test 'if'
SETV d2,7; if() #280 Body Start
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2350; if() #280 Body End
SETV d2,4; if() #280 Else Start
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2; if() #280 Else End
POPARGS d5,0.0002; if() #279 Else End AND if() #278 Else End
RETURNFUNC; Func[void SetEWeaponRotation(EWeapon, int)] Body End
SETR d4,SP2; Func[int Sign(int)] Body Start
LOAD d2,0; if() #296 Test
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 2360,==; Test 'if'
SETV d2,1; return Start AND if() #296 Body Start
GOTO 2368; return End AND if() #296 Body End
LOAD d2,0; if() #297 Test AND if() #296 Else Start
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 2367,==; Test 'if'
SETV d2,-1; return Start AND if() #297 Body Start
GOTO 2368; return End AND if() #297 Body End
SETV d2,0; return Start AND if() #297 Else Start
POP d5; return End AND if() #297 Else End AND if() #296 Else End
RETURNFUNC; Func[int Sign(int)] Body End
SETR d4,SP2; Func[void StartGhostZH()] Body Start
PUSHR d4
CALLFUNC 0.2095; UsrFunc[void InitializeGhostZHData()] Call
POP d4
RETURNFUNC; Func[void StartGhostZH()] Body End
PUSHARGSV 0,0.0007; Func[void UpdateEWeapon(EWeapon)] Body Start
SETR d4,SP2
SETR d2,gd27; if() #555 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 3509,!=; Test 'if' AND return (Void) AND if() #555 Body
LOAD d2,0.0007
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
STORE d2,0.0006
LOAD d2,0.0007
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
STORE d2,0.0005
STOREV 1,0.0004
LOAD d2,0.0007; if() #306 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,128
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2783,==; Test 'if'
LOAD d2,0.0007; if() #556 Test AND if() #306 Body Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 2632,==; Test 'if'
LOAD d2,0.0007; if() #307 Test AND if() #556 Body Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,6
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 2505,==; Test 'if'
LOAD d2,0.0007; if() #308 Test AND if() #307 Body Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2448,==; Test 'if'
PUSHR d4; if() #308 Body Start
LOAD d2,0.0007; UsrFunc[void __UpdateEWMSineWave(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMSineWave(EWeapon)] Params End
CALLFUNC 0.3511; UsrFunc[void __UpdateEWMSineWave(EWeapon)] Call
POP d4
GOTO 2632; if() #308 Body End
LOAD d2,0.0007; if() #309 Test AND if() #308 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2465,==; Test 'if'
PUSHR d4; if() #309 Body Start
LOAD d2,0.0007; UsrFunc[void __UpdateEWMHoming(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMHoming(EWeapon)] Params End
CALLFUNC 0.3692; UsrFunc[void __UpdateEWMHoming(EWeapon)] Call
POP d4
GOTO 2632; if() #309 Body End
LOAD d2,0.0007; if() #310 Test AND if() #309 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,4
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2482,==; Test 'if'
PUSHR d4; if() #310 Body Start
LOAD d2,0.0007; UsrFunc[void __UpdateEWMHomingReaim(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMHomingReaim(EWeapon)] Params End
CALLFUNC 0.3898; UsrFunc[void __UpdateEWMHomingReaim(EWeapon)] Call
POP d4
GOTO 2632; if() #310 Body End
LOAD d2,0.0007; if() #311 Test AND if() #310 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,5
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2499,==; Test 'if'
PUSHR d4; if() #311 Body Start
LOAD d2,0.0007; UsrFunc[void __UpdateEWMRandom(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMRandom(EWeapon)] Params End
CALLFUNC 0.4233; UsrFunc[void __UpdateEWMRandom(EWeapon)] Call
POP d4
GOTO 2632; if() #311 Body End
PUSHR d4; if() #311 Else Start
LOAD d2,0.0007; UsrFunc[void __UpdateEWMRandomReaim(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMRandomReaim(EWeapon)] Params End
CALLFUNC 0.4353; UsrFunc[void __UpdateEWMRandomReaim(EWeapon)] Call
POP d4; if() #311 Else End
GOTO 2632; if() #310 Else End AND if() #309 Else End AND if() #308 Else End AND if() #307 Body End
LOAD d2,0.0007; if() #312 Test AND if() #307 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,7
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2540,==; Test 'if'
LOAD d2,0.0007; if() #312 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORE d2,0.0006
LOAD d2,0.0007
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORE d2,0.0005
PUSHR d4
LOAD d2,0.0007; UsrFunc[void __UpdateEWMVeer(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMVeer(EWeapon)] Params End
CALLFUNC 0.4665; UsrFunc[void __UpdateEWMVeer(EWeapon)] Call
POP d4
SETV d2,0
STORE d2,0.0004
GOTO 2632; if() #312 Body End
LOAD d2,0.0007; if() #313 Test AND if() #312 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,15
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2557,==; Test 'if'
PUSHR d4; if() #313 Body Start
LOAD d2,0.0007; UsrFunc[void __UpdateEWMThrow(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMThrow(EWeapon)] Params End
CALLFUNC 0.5197; UsrFunc[void __UpdateEWMThrow(EWeapon)] Call
POP d4
GOTO 2632; if() #313 Body End
LOAD d2,0.0007; if() #314 Test AND if() #313 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,19
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2574,==; Test 'if'
PUSHR d4; if() #314 Body Start
LOAD d2,0.0007; UsrFunc[void __UpdateEWMFall(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMFall(EWeapon)] Params End
CALLFUNC 0.5502; UsrFunc[void __UpdateEWMFall(EWeapon)] Call
POP d4
GOTO 2632; if() #314 Body End
LOAD d2,0.0007; if() #315 Test AND if() #314 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,20
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2609,==; Test 'if'
LOAD d2,0.0007; if() #315 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORE d2,0.0006
LOAD d2,0.0007
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORE d2,0.0005
PUSHR d4
LOAD d2,0.0007; UsrFunc[void __UpdateEWMDrift(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMDrift(EWeapon)] Params End
CALLFUNC 0.5767; UsrFunc[void __UpdateEWMDrift(EWeapon)] Call
POP d4
SETV d2,0
STORE d2,0.0004
GOTO 2632; if() #315 Body End
LOAD d2,0.0007; if() #315 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORE d2,0.0006
LOAD d2,0.0007
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORE d2,0.0005
PUSHR d4
LOAD d2,0.0007; UsrFunc[void __UpdateEWMDriftWait(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMDriftWait(EWeapon)] Params End
CALLFUNC 0.6271; UsrFunc[void __UpdateEWMDriftWait(EWeapon)] Call
POP d4
SETV d2,0
STORE d2,0.0004; if() #315 Else End
LOAD d2,0.0007; if() #314 Else End AND if() #313 Else End AND if() #312 Else End AND if() #307 Else End AND if() #556 Body End AND if() #557 Test
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 3093,==; Test 'if'
LOAD d2,0.0007; if() #316 Test AND if() #557 Body Start
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2690,==; Test 'if'
LOAD d2,0.0007; if() #316 Body Start
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOAD d2,0.0007
POP d3
PUSHR d2
PUSHR d3
SETV d2,12
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0007; if() #558 Test
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 3093,==; Test 'if'
PUSHR d4; if() #558 Body Start
LOAD d2,0.0007; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2139; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #558 Body End
GOTO 3093; if() #316 Body End
LOAD d2,0.0007; if() #317 Test AND if() #316 Else Start
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2733,==; Test 'if'
PUSHR d4; if() #559 Test AND if() #317 Body Start
LOAD d2,0.0007; Int.Func[int Distance(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOAD d2,0.0007
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; Int.Func[int Distance(int, int, int, int)] Params End
CALLFUNC 0.0015; Int.Func[int Distance(int, int, int, int)] Call
POP d4
PUSHR d2
LOAD d2,0.0007
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 3093,==; Test 'if'
PUSHR d4; if() #559 Body Start
LOAD d2,0.0007; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2139; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #559 Body End
GOTO 3093; if() #317 Body End
LOAD d2,0.0007; if() #560 Test AND if() #317 Else Start
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3093,==; Test 'if'
PUSHVARGV 0; InlineFunc[untyped Max(untyped, untyped)] Params Start AND if() #560 Body Start
LOAD d2,0.0007
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
PUSHR d2
LOAD d2,0.0007
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
PUSHVARGR d3; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
PUSHR d2
LOAD d2,0.0007
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOAD d2,0.0007; if() #561 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 3093,==; Test 'if'
PUSHR d4; if() #561 Body Start
LOAD d2,0.0007; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2139; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #561 Body End
GOTO 3093; if() #560 Body End AND if() #317 Else End AND if() #316 Else End AND if() #557 Body End AND if() #306 Body End
LOAD d2,0.0007; if() #562 Test AND if() #306 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
GOTOCMP 2804,==
LOAD d2,0.0007
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1024
COMPAREV d2,0
GOTOCMP 2804,!=
SETV d2,1
GOTO 2805
SETV d2,0
COMPAREV d2,0
GOTOCMP 3093,==; Test 'if'
LOAD d2,0.0007; if() #318 Test AND if() #562 Body Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 2824,==; Test 'if'
PUSHR d4; if() #318 Body Start
LOAD d2,0.0007; UsrFunc[void __DoEWeaponDeathPrototype(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathPrototype(EWeapon)] Params End
CALLFUNC 0.6806; UsrFunc[void __DoEWeaponDeathPrototype(EWeapon)] Call
POP d4
GOTO 3093; if() #318 Body End
LOAD d2,0.0007; if() #319 Test AND if() #318 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,8
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 2958,==; Test 'if'
LOAD d2,0.0007; if() #320 Test AND if() #319 Body Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2856,==; Test 'if'
SETV d2,0; if() #320 Body Start
PUSHR d2
LOAD d2,0.0007
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
GOTO 3093; if() #320 Body End
LOAD d2,0.0007; if() #321 Test AND if() #320 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2873,==; Test 'if'
PUSHR d4; if() #321 Body Start
LOAD d2,0.0007; UsrFunc[void __DoEWeaponDeathAimAtLink(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathAimAtLink(EWeapon)] Params End
CALLFUNC 0.7195; UsrFunc[void __DoEWeaponDeathAimAtLink(EWeapon)] Call
POP d4
GOTO 3093; if() #321 Body End
LOAD d2,0.0007; if() #322 Test AND if() #321 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2890,==; Test 'if'
PUSHR d4; if() #322 Body Start
LOAD d2,0.0007; UsrFunc[void __DoEWeaponDeathExplode(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathExplode(EWeapon)] Params End
CALLFUNC 0.7362; UsrFunc[void __DoEWeaponDeathExplode(EWeapon)] Call
POP d4
GOTO 3093; if() #322 Body End
LOAD d2,0.0007; if() #323 Test AND if() #322 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,4
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2907,==; Test 'if'
PUSHR d4; if() #323 Body Start
LOAD d2,0.0007; UsrFunc[void __DoEWeaponDeathSBombExplode(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathSBombExplode(EWeapon)] Params End
CALLFUNC 0.7406; UsrFunc[void __DoEWeaponDeathSBombExplode(EWeapon)] Call
POP d4
GOTO 3093; if() #323 Body End
LOAD d2,0.0007; if() #324 Test AND if() #323 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,5
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2924,==; Test 'if'
PUSHR d4; if() #324 Body Start
LOAD d2,0.0007; UsrFunc[void __DoEWeaponDeath4FireballsHV(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FireballsHV(EWeapon)] Params End
CALLFUNC 0.7450; UsrFunc[void __DoEWeaponDeath4FireballsHV(EWeapon)] Call
POP d4
GOTO 3093; if() #324 Body End
LOAD d2,0.0007; if() #325 Test AND if() #324 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,6
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2941,==; Test 'if'
PUSHR d4; if() #325 Body Start
LOAD d2,0.0007; UsrFunc[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Params End
CALLFUNC 0.7507; UsrFunc[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Call
POP d4
GOTO 3093; if() #325 Body End
LOAD d2,0.0007; if() #563 Test AND if() #325 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,7
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3093,==; Test 'if'
PUSHR d4; if() #563 Body Start
LOAD d2,0.0007; UsrFunc[void __DoEWeaponDeath4FireballsRand(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FireballsRand(EWeapon)] Params End
CALLFUNC 0.7565; UsrFunc[void __DoEWeaponDeath4FireballsRand(EWeapon)] Call
POP d4; if() #563 Body End
GOTO 3093; if() #325 Else End AND if() #324 Else End AND if() #323 Else End AND if() #322 Else End AND if() #321 Else End AND if() #320 Else End AND if() #319 Body End
LOAD d2,0.0007; if() #326 Test AND if() #319 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,8
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2975,==; Test 'if'
PUSHR d4; if() #326 Body Start
LOAD d2,0.0007; UsrFunc[void __DoEWeaponDeath8Fireballs(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath8Fireballs(EWeapon)] Params End
CALLFUNC 0.7674; UsrFunc[void __DoEWeaponDeath8Fireballs(EWeapon)] Call
POP d4
GOTO 3093; if() #326 Body End
LOAD d2,0.0007; if() #327 Test AND if() #326 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,9
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2992,==; Test 'if'
PUSHR d4; if() #327 Body Start
LOAD d2,0.0007; UsrFunc[void __DoEWeaponDeath4FiresHV(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FiresHV(EWeapon)] Params End
CALLFUNC 0.7731; UsrFunc[void __DoEWeaponDeath4FiresHV(EWeapon)] Call
POP d4
GOTO 3093; if() #327 Body End
LOAD d2,0.0007; if() #328 Test AND if() #327 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,10
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3009,==; Test 'if'
PUSHR d4; if() #328 Body Start
LOAD d2,0.0007; UsrFunc[void __DoEWeaponDeath4FiresDiag(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FiresDiag(EWeapon)] Params End
CALLFUNC 0.7790; UsrFunc[void __DoEWeaponDeath4FiresDiag(EWeapon)] Call
POP d4
GOTO 3093; if() #328 Body End
LOAD d2,0.0007; if() #329 Test AND if() #328 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,11
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3026,==; Test 'if'
PUSHR d4; if() #329 Body Start
LOAD d2,0.0007; UsrFunc[void __DoEWeaponDeath4FiresRand(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FiresRand(EWeapon)] Params End
CALLFUNC 0.7850; UsrFunc[void __DoEWeaponDeath4FiresRand(EWeapon)] Call
POP d4
GOTO 3093; if() #329 Body End
LOAD d2,0.0007; if() #330 Test AND if() #329 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,12
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3043,==; Test 'if'
PUSHR d4; if() #330 Body Start
LOAD d2,0.0007; UsrFunc[void __DoEWeaponDeath8Fires(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath8Fires(EWeapon)] Params End
CALLFUNC 0.7961; UsrFunc[void __DoEWeaponDeath8Fires(EWeapon)] Call
POP d4
GOTO 3093; if() #330 Body End
LOAD d2,0.0007; if() #331 Test AND if() #330 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,13
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3060,==; Test 'if'
PUSHR d4; if() #331 Body Start
LOAD d2,0.0007; UsrFunc[void __DoEWeaponDeathSpawnNPC(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathSpawnNPC(EWeapon)] Params End
CALLFUNC 0.8065; UsrFunc[void __DoEWeaponDeathSpawnNPC(EWeapon)] Call
POP d4
GOTO 3093; if() #331 Body End
LOAD d2,0.0007; if() #332 Test AND if() #331 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,14
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3077,==; Test 'if'
PUSHR d4; if() #332 Body Start
LOAD d2,0.0007; UsrFunc[void __DoEWeaponDeathSingleFire(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathSingleFire(EWeapon)] Params End
CALLFUNC 0.8112; UsrFunc[void __DoEWeaponDeathSingleFire(EWeapon)] Call
POP d4
GOTO 3093; if() #332 Body End
LOAD d2,0.0007; if() #564 Test AND if() #332 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,15
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3093,==; Test 'if'
PUSHR d4; if() #564 Body Start
LOAD d2,0.0007; UsrFunc[void __DoEWeaponDeathRunScript(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathRunScript(EWeapon)] Params End
CALLFUNC 0.8163; UsrFunc[void __DoEWeaponDeathRunScript(EWeapon)] Call
POP d4; if() #564 Body End
LOAD d2,0.0007; if() #332 Else End AND if() #331 Else End AND if() #330 Else End AND if() #329 Else End AND if() #328 Else End AND if() #327 Else End AND if() #326 Else End AND if() #319 Else End AND if() #318 Else End AND if() #562 Body End AND if() #306 Else End AND if() #565 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,8
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 3118,==; Test 'if'
LOAD d2,0.0007; if() #566 Test AND if() #565 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 3118,==; Test 'if'
PUSHR d4; if() #566 Body Start
LOAD d2,0.0007; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params Start
PUSHR d2; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params End
CALLFUNC 0.0928; UsrFunc[void DrawEWeaponShadow(EWeapon)] Call
POP d4; if() #566 Body End
LOAD d2,0.0007; if() #565 Body End AND if() #333 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 3398,==; Test 'if'
SETV d2,1000; if() #333 Body Start
PUSHR d2
LOAD d2,0.0007
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
SETR d2,LINKHP; if() #567 Test
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 3509,!=; Test 'if' AND return (Void) AND if() #567 Body
LOAD d2,0.0007; if() #568 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
GOTOCMP 3163,==
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
GOTOCMP 3163,==
SETV d2,1
GOTO 3164
SETV d2,0
COMPAREV d2,0
GOTOCMP 3509,!=; Test 'if' AND return (Void) AND if() #568 Body
LOAD d2,0.0007; if() #334 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOCMP 3179,==; Test 'if'
LOAD d2,0.0007; InlineFunc[int RadtoDeg(int)] Params Start AND if() #334 Body Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
STORE d2,0.0001
GOTO 3245; if() #334 Body End
PUSHR d4; if() #334 Else Start
LOAD d2,0.0007; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2005; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORE d2,0
LOAD d2,0; if() #335 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3195,==; Test 'if'
SETV d2,-90; if() #335 Body Start
STORE d2,0.0001
GOTO 3245; if() #335 Body End
LOAD d2,0; if() #336 Test AND if() #335 Else Start
COMPAREV d2,5
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3203,==; Test 'if'
SETV d2,-45; if() #336 Body Start
STORE d2,0.0001
GOTO 3245; if() #336 Body End
LOAD d2,0; if() #337 Test AND if() #336 Else Start
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3211,==; Test 'if'
SETV d2,0; if() #337 Body Start
STORE d2,0.0001
GOTO 3245; if() #337 Body End
LOAD d2,0; if() #338 Test AND if() #337 Else Start
COMPAREV d2,7
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3219,==; Test 'if'
SETV d2,45; if() #338 Body Start
STORE d2,0.0001
GOTO 3245; if() #338 Body End
LOAD d2,0; if() #339 Test AND if() #338 Else Start
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3227,==; Test 'if'
SETV d2,90; if() #339 Body Start
STORE d2,0.0001
GOTO 3245; if() #339 Body End
LOAD d2,0; if() #340 Test AND if() #339 Else Start
COMPAREV d2,6
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3235,==; Test 'if'
SETV d2,135; if() #340 Body Start
STORE d2,0.0001
GOTO 3245; if() #340 Body End
LOAD d2,0; if() #341 Test AND if() #340 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3243,==; Test 'if'
SETV d2,180; if() #341 Body Start
STORE d2,0.0001
GOTO 3245; if() #341 Body End
SETV d2,-135; if() #341 Else Start
STORE d2,0.0001; if() #341 Else End
LOAD d2,0.0004; if() #340 Else End AND if() #339 Else End AND if() #338 Else End AND if() #337 Else End AND if() #336 Else End AND if() #335 Else End AND if() #334 Else End AND if() #342 Test
COMPAREV d2,0
GOTOCMP 3287,==; Test 'if'
LOAD d2,0.0007; if() #342 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOAD d2,0.0007
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOAD d2,0.0001; InlineFunc[int Cos(int)] Params Start
SETR d3,d2; InlineFunc[int Cos(int)] Params End
COSR d2,d3; InlineFunc[int Cos(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORE d2,0.0003
LOAD d2,0.0007
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOAD d2,0.0007
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOAD d2,0.0001; InlineFunc[int Sin(int)] Params Start
SETR d3,d2; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORE d2,0.0002
GOTO 3303; if() #342 Body End
LOAD d2,0.0007; if() #342 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORE d2,0.0003
LOAD d2,0.0007
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORE d2,0.0002; if() #342 Else End
LOAD d2,0.0006; unless() #569 Test
PUSHR d2
LOAD d2,0.0003
POP d3
COMPARER d3,d2
GOTOCMP 3317,!=
LOAD d2,0.0005
PUSHR d2
LOAD d2,0.0002
POP d3
COMPARER d3,d2
GOTOCMP 3317,!=
SETV d2,1
GOTO 3318
SETV d2,0
COMPAREV d2,0
GOTOCMP 3332,!=; Test 'unless'
PUSHR d4; unless() #569 Body Start
LOAD d2,0.0006; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR d2
LOAD d2,0.0005
PUSHR d2
LOAD d2,0.0003
PUSHR d2
LOAD d2,0.0002
PUSHR d2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0046; UsrFunc[int Angle(int, int, int, int)] Call
POP d4
STORE d2,0.0001; unless() #569 Body End
STOREV 0,0
LOAD d2,0.0001; if() #343 Test
COMPAREV d2,0
GOTOCMP 3341,<
LOAD d2,0.0001
COMPAREV d2,180
GOTOCMP 3341,>=
SETV d2,1
GOTO 3342
SETV d2,0
COMPAREV d2,0
GOTOCMP 3347,==; Test 'if'
SETV d2,0; if() #343 Body Start
STORE d2,0
GOTO 3349; if() #343 Body End
SETV d2,2; if() #343 Else Start
STORE d2,0; if() #343 Else End
PUSHV 4; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD d2,0.0003
PUSHR d2
LOAD d2,0.0002
PUSHR d2
LOAD d2,0.0007
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOAD d2,0.0007
PUSHR d2
POP REFEWPN
PUSHR EWPNTILE
LOAD d2,0.0007
PUSHR d2
POP REFEWPN
PUSHR EWPNTXSZ
LOAD d2,0.0007
PUSHR d2
POP REFEWPN
PUSHR EWPNTYSZ
LOAD d2,0.0007
PUSHR d2
POP REFEWPN
PUSHR EWPNCSET
PUSHARGSV -1,0.0002
LOAD d2,0.0003
PUSHR d2
LOAD d2,0.0002
PUSHR d2
LOAD d2,0.0007
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOAD d2,0.0001
PUSHR d2
LOAD d2,0
PUSHR d2
PUSHV 1
PUSHV 128; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 3455; if() #333 Body End
LOAD d2,0.0007; if() #570 Test AND if() #333 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 3438,==; Test 'if'
SETR d2,gd27; if() #344 Test AND if() #570 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 3429,==; Test 'if'
SETV d2,1000; if() #344 Body Start
PUSHR d2
LOAD d2,0.0007
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
GOTO 3438; if() #344 Body End
SETV d2,0; if() #344 Else Start
PUSHR d2
LOAD d2,0.0007
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2; if() #344 Else End
LOAD d2,0.0007; if() #570 Body End AND if() #571 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 3455,==; Test 'if'
PUSHR d4; if() #571 Body Start
LOAD d2,0.0007; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1780; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #571 Body End
LOAD d2,0.0007; if() #333 Else End AND if() #572 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,64
COMPAREV d2,0
GOTOCMP 3467,!=
SETV d2,0
GOTO 3468
SETV d2,1
COMPAREV d2,0
GOTOCMP 3509,==; Test 'if'
LOAD d2,0.0007; if() #572 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
SUBV2 0,d2
PUSHR d2
LOAD d2,0.0007
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZOFS,d2
LOAD d2,0.0007
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
SUBV2 0,d2
PUSHR d2
LOAD d2,0.0007
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHYOFS,d2
LOAD d2,0.0007
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
SUBV2 0,d2
PUSHR d2
LOAD d2,0.0007
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNYOFS,d2; if() #572 Body End
POPARGS d5,0.0008
RETURNFUNC; Func[void UpdateEWeapon(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMSineWave(EWeapon)] Body Start
SETR d4,SP2
LOAD d2,0.0001
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001; InlineFunc[int Sin(int)] Params Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d3,EWPNMISCD; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
POP d3
MULTR d2,d3
STORE d2,0
LOAD d2,0.0001
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOAD d2,0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOAD d2,0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0
PUSHR d2
LOAD d2,0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,1.5708
SETR d3,d2; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0
PUSHR d2
LOAD d2,0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,1.5708
SETR d3,d2; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __UpdateEWMSineWave(EWeapon)] Body End
PUSHARGSV 0,0.0003; Func[void __UpdateEWMHoming(EWeapon)] Body Start
SETR d4,SP2
LOAD d2,0.0003
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
MODV d2,6.2832
STORE d2,0.0002
LOAD d2,0.0002; if() #726 Test
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 3708,==; Test 'if'
LOAD d2,0.0002; if() #726 Body Start
ADDV d2,6.2832
STORE d2,0.0002; if() #726 Body End
PUSHR d4
LOAD d2,0.0003; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOAD d2,0.0003
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0021; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP d4
STORE d2,0.0001
LOAD d2,0.0001; if() #727 Test
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 3730,==; Test 'if'
LOAD d2,0.0001; if() #727 Body Start
ADDV d2,6.2832
STORE d2,0.0001; if() #727 Body End
LOAD d2,0.0002; InlineFunc[int Abs(int)] Params Start
PUSHR d2
LOAD d2,0.0001
POP d3
SUBR d3,d2
SETR d2,d3; InlineFunc[int Abs(int)] Params End
ABS d2; InlineFunc[int Abs(int)] Body
STORE d2,0
LOAD d2,0; if() #433 Test
PUSHR d2
LOAD d2,0.0003
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
COMPARER d3,d2
GOTOCMP 3765,<
LOAD d2,0
PUSHR d2
LOAD d2,0.0003
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 6.2832,d2
POP d3
COMPARER d3,d2
GOTOCMP 3765,>
SETV d2,0
GOTO 3766
SETV d2,1
COMPAREV d2,0
GOTOCMP 3778,==; Test 'if'
LOAD d2,0.0001; if() #433 Body Start
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 3845; if() #433 Body End
PUSHR d4; if() #434 Test AND if() #433 Else Start
LOAD d2,0.0002; UsrFunc[int Sign(int)] Params Start
PUSHR d2
LOAD d2,0.0001
POP d3
SUBR d3,d2
PUSHR d3; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.2352; UsrFunc[int Sign(int)] Call
POP d4
PUSHR d2
PUSHR d4
LOAD d2,0; UsrFunc[int Sign(int)] Params Start
SUBV d2,3.1416
PUSHR d2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.2352; UsrFunc[int Sign(int)] Call
POP d4
POP d3
COMPARER d3,d2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3822,==; Test 'if'
LOAD d2,0.0003; if() #434 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
PUSHR d2
LOAD d2,0.0003
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 3845; if() #434 Body End
LOAD d2,0.0003; if() #434 Else Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
PUSHR d2
LOAD d2,0.0003
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2; if() #434 Else End
PUSHR d4; if() #433 Else End
LOAD d2,0.0003; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1671; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOAD d2,0.0003; if() #728 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 3896,==; Test 'if'
LOAD d2,0.0003; if() #728 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
SETV d2,10
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0003; if() #729 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 3896,==; Test 'if'
PUSHR d4; if() #729 Body Start
LOAD d2,0.0003; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2139; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #729 Body End
POPARGS d5,0.0004; if() #728 Body End
RETURNFUNC; Func[void __UpdateEWMHoming(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMHomingReaim(EWeapon)] Body Start
SETR d4,SP2
LOAD d2,0.0001; if() #730 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3929,==; Test 'if'
LOAD d2,0.0001; if() #730 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #730 Body End
LOAD d2,0.0001; if() #435 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 4028,==; Test 'if'
LOAD d2,0.0001; if() #435 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001; if() #731 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4231,==; Test 'if'
LOAD d2,0.0001; if() #436 Test AND if() #731 Body Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 3987,==; Test 'if'
PUSHR d4; if() #436 Body Start
LOAD d2,0.0001; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2139; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 4231; if() #436 Body End
LOAD d2,0.0001; if() #436 Else Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
SETV d2,-20
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #436 Else End
GOTO 4231; if() #731 Body End AND if() #435 Body End
LOAD d2,0.0001; if() #435 Else Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ADDV d2,1
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001; if() #732 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4128,==; Test 'if'
SETV d2,45; if() #732 Body Start
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
PUSHR d4
LOAD d2,0.0001; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0021; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP d4
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
PUSHR d4
LOAD d2,0.0001; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1671; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOAD d2,0.0001; if() #733 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4128,==; Test 'if'
PUSHR d4; if() #733 Body Start
LOAD d2,0.0001; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1780; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #733 Body End
LOAD d2,0.0001; if() #732 Body End AND if() #437 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4154,==; Test 'if'
LOAD d2,0.0001; if() #437 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.3000
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 4231; if() #437 Body End
LOAD d2,0.0001; if() #734 Test AND if() #437 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4231,==; Test 'if'
LOAD d2,0.0001; if() #734 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.2000
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 0,d2
ANDV d2,6
STORE d2,0
LOAD d2,0; if() #438 Test
COMPAREV d2,6
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4201,==; Test 'if'
PUSHR d4; if() #438 Body Start
LOAD d2,0.0001; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 0; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2271; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4231; if() #438 Body End
LOAD d2,0; if() #439 Test AND if() #438 Else Start
COMPAREV d2,4
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4213,==; Test 'if'
PUSHR d4; if() #439 Body Start
LOAD d2,0.0001; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2271; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4231; if() #439 Body End
LOAD d2,0; if() #440 Test AND if() #439 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4225,==; Test 'if'
PUSHR d4; if() #440 Body Start
LOAD d2,0.0001; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2271; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4231; if() #440 Body End
PUSHR d4; if() #440 Else Start
LOAD d2,0.0001; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 2; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2271; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4; if() #440 Else End
POPARGS d5,0.0002; if() #439 Else End AND if() #438 Else End AND if() #734 Body End AND if() #437 Else End AND if() #435 Else End
RETURNFUNC; Func[void __UpdateEWMHomingReaim(EWeapon)] Body End
SETR d4,SP2; Func[void __UpdateEWMRandom(EWeapon)] Body Start
LOAD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
PUSHR d2
PUSHR d4
LOAD d2,0; UsrFunc[int Randf(int)] Params Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,2
SETV d2,2
PUSHR d2
LOAD d2,0
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
MULTR d2,d3
PUSHR d2; UsrFunc[int Randf(int)] Params End
CALLFUNC 0.0038; UsrFunc[int Randf(int)] Call
POP d4
PUSHR d2
LOAD d2,0
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
LOAD d2,0; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1671; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOAD d2,0; if() #735 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4305,==; Test 'if'
PUSHR d4; if() #735 Body Start
LOAD d2,0; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1780; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #735 Body End
LOAD d2,0; if() #736 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 4351,==; Test 'if'
LOAD d2,0; if() #736 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,10
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0; if() #737 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 4351,==; Test 'if'
PUSHR d4; if() #737 Body Start
LOAD d2,0; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2139; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #737 Body End
POP d5; if() #736 Body End
RETURNFUNC; Func[void __UpdateEWMRandom(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMRandomReaim(EWeapon)] Body Start
SETR d4,SP2
LOAD d2,0.0001; if() #738 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4384,==; Test 'if'
LOAD d2,0.0001; if() #738 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #738 Body End
LOAD d2,0.0001; if() #441 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 4483,==; Test 'if'
LOAD d2,0.0001; if() #441 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001; if() #739 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4663,==; Test 'if'
LOAD d2,0.0001; if() #442 Test AND if() #739 Body Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 4442,==; Test 'if'
PUSHR d4; if() #442 Body Start
LOAD d2,0.0001; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2139; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 4663; if() #442 Body End
LOAD d2,0.0001; if() #442 Else Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
SETV d2,-20
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #442 Else End
GOTO 4663; if() #739 Body End AND if() #441 Body End
LOAD d2,0.0001; if() #441 Else Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ADDV d2,1
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001; if() #740 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4573,==; Test 'if'
SETV d2,45; if() #740 Body Start
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d3,62832; InlineFunc[int Rand(int)] Params
RNDR d2,d3; InlineFunc[int Rand(int)] Body
MULTV d2,0.0001
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
PUSHR d4
LOAD d2,0.0001; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1671; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOAD d2,0.0001; if() #741 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4573,==; Test 'if'
PUSHR d4; if() #741 Body Start
LOAD d2,0.0001; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1780; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #741 Body End
LOAD d2,0.0001; if() #740 Body End AND if() #443 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4599,==; Test 'if'
LOAD d2,0.0001; if() #443 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.3000
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 4663; if() #443 Body End
LOAD d2,0.0001; if() #742 Test AND if() #443 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4663,==; Test 'if'
LOAD d2,0.0001; if() #742 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 0,d2
ANDV d2,6
STORE d2,0
LOAD d2,0; if() #444 Test
COMPAREV d2,6
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4633,==; Test 'if'
PUSHR d4; if() #444 Body Start
LOAD d2,0.0001; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 0; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2271; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4663; if() #444 Body End
LOAD d2,0; if() #445 Test AND if() #444 Else Start
COMPAREV d2,4
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4645,==; Test 'if'
PUSHR d4; if() #445 Body Start
LOAD d2,0.0001; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2271; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4663; if() #445 Body End
LOAD d2,0; if() #446 Test AND if() #445 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4657,==; Test 'if'
PUSHR d4; if() #446 Body Start
LOAD d2,0.0001; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2271; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4663; if() #446 Body End
PUSHR d4; if() #446 Else Start
LOAD d2,0.0001; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 2; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2271; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4; if() #446 Else End
POPARGS d5,0.0002; if() #445 Else End AND if() #444 Else End AND if() #742 Body End AND if() #443 Else End AND if() #441 Else End
RETURNFUNC; Func[void __UpdateEWMRandomReaim(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMVeer(EWeapon)] Body Start
SETR d4,SP2
LOAD d2,0.0001
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORE d2,0
LOAD d2,0.0001
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOAD d2,0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOAD d2,0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0; if() #454 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4780,==; Test 'if'
LOAD d2,0.0001; if() #454 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5137; if() #454 Body End
LOAD d2,0; if() #455 Test AND if() #454 Else Start
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4814,==; Test 'if'
LOAD d2,0.0001; if() #455 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5137; if() #455 Body End
LOAD d2,0; if() #456 Test AND if() #455 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4849,==; Test 'if'
LOAD d2,0.0001; if() #456 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5137; if() #456 Body End
LOAD d2,0; if() #457 Test AND if() #456 Else Start
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4883,==; Test 'if'
LOAD d2,0.0001; if() #457 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5137; if() #457 Body End
LOAD d2,0; if() #458 Test AND if() #457 Else Start
COMPAREV d2,4
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4949,==; Test 'if'
LOAD d2,0.0001; if() #458 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5137; if() #458 Body End
LOAD d2,0; if() #459 Test AND if() #458 Else Start
COMPAREV d2,5
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 5014,==; Test 'if'
LOAD d2,0.0001; if() #459 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5137; if() #459 Body End
LOAD d2,0; if() #460 Test AND if() #459 Else Start
COMPAREV d2,6
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 5079,==; Test 'if'
LOAD d2,0.0001; if() #460 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5137; if() #460 Body End
LOAD d2,0.0001; if() #460 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #460 Else End
LOAD d2,0.0001; if() #459 Else End AND if() #458 Else End AND if() #457 Else End AND if() #456 Else End AND if() #455 Else End AND if() #454 Else End
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __UpdateEWMVeer(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMThrow(EWeapon)] Body Start
SETR d4,SP2
SETV d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNJUMP,d2
LOAD d2,0.0001; if() #743 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
GOTOCMP 5228,!=
LOAD d2,0.0001
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
GOTOCMP 5228,==
SETV d2,1
GOTO 5229
SETV d2,0
COMPAREV d2,0
GOTOCMP 5261,==; Test 'if'
LOAD d2,0.0001; if() #743 Body Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #743 Body End
LOAD d2,0.0001; InlineFunc[untyped Max(untyped, untyped)] Params Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHVARGR d2
PUSHVARGV 0; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
PUSHR d4; unless() #448 Test AND if(true) #447 [Opt:AlwaysOn]
CALLFUNC 0.2078; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOCMP 5313,!=; Test 'unless'
LOAD d2,0.0001; unless() #448 Body Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
GOTO 5329; unless() #448 Body End
LOAD d2,0.0001; unless() #448 Else Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 176,d2
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2; unless() #448 Else End
LOAD d2,0.0001; if() #449 Test
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 5392,==; Test 'if'
PUSHR d4; unless() #744 Test AND if(true) #450 [Opt:AlwaysOn] AND if() #449 Body Start
LOAD d2,0.0001; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
PUSHR EWPNY
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
PUSHR EWPNHXOFS
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
PUSHR EWPNHYOFS
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
PUSHR EWPNHYSZ
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
PUSHR EWPNHXSZ; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 0.9445; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 5500,!=; Test 'unless'
LOAD d2,0.0001; InlineFunc[untyped Max(untyped, untyped)] Params Start AND unless() #744 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; unless() #744 Body End
GOTO 5500; if() #449 Body End
LOAD d2,0.0001; if() #451 Test AND if() #449 Else Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
GOTOCMP 5449,==; Test 'if'
LOAD d2,0.0001; if() #452 Test AND if() #451 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,-0.5000
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 5446,==; Test 'if'
LOAD d2,0.0001; if() #452 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,-0.5000
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
MULTV d2,0.7500
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
GOTO 5451; if() #452 Body End
SETV d2,1; if() #452 Else Start
STORE d2,0; if() #452 Else End
GOTO 5451; if() #451 Body End
SETV d2,1; if() #451 Else Start
STORE d2,0; if() #451 Else End
LOAD d2,0; if() #745 Test
COMPAREV d2,0
GOTOCMP 5500,==; Test 'if'
LOAD d2,0.0001; if() #453 Test AND if() #745 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1
COMPAREV d2,0
GOTOCMP 5479,==; Test 'if'
SETV d2,0; if() #453 Body Start
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
PUSHR d4
LOAD d2,0.0001; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2139; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 5500; if() #453 Body End
SETV d2,0; if() #453 Else Start
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,8
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2; if() #453 Else End
POPARGS d5,0.0002; if() #745 Body End AND if() #449 Else End
RETURNFUNC; Func[void __UpdateEWMThrow(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMFall(EWeapon)] Body Start
SETR d4,SP2
SETV d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNJUMP,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
PUSHR d4; unless() #428 Test AND if(true) #427 [Opt:AlwaysOn]
CALLFUNC 0.2078; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOCMP 5563,!=; Test 'unless'
LOAD d2,0.0001; unless() #428 Body Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
GOTO 5593; unless() #428 Body End
LOAD d2,0.0001; unless() #428 Else Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHYOFS,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNYOFS,d2; unless() #428 Else End
LOAD d2,0.0001; InlineFunc[untyped Min(untyped, untyped)] Params Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ADDV d2,0.1600
PUSHVARGR d2
PUSHVARGV 3.2000; InlineFunc[untyped Min(untyped, untyped)] Params End
MINVARG; InlineFunc[untyped Min(untyped, untyped)] Body
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001; if() #723 Test AND if(true) #429 [Opt:AlwaysOn]
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 5765,==; Test 'if'
PUSHR d4; unless() #724 Test AND if() #723 Body Start
LOAD d2,0.0001; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
PUSHR EWPNY
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
PUSHR EWPNHXOFS
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
PUSHR EWPNHYOFS
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
PUSHR EWPNHYSZ
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
PUSHR EWPNHXSZ; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 0.9445; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 5765,!=; Test 'unless'
LOAD d2,0.0001; if() #430 Test AND unless() #724 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 5714,==; Test 'if'
LOAD d2,0.0001; if() #431 Test AND if() #430 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,-0.5000
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 5711,==; Test 'if'
LOAD d2,0.0001; if() #431 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,-0.5000
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
MULTV d2,0.7500
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
GOTO 5716; if() #431 Body End
SETV d2,1; if() #431 Else Start
STORE d2,0; if() #431 Else End
GOTO 5716; if() #430 Body End
SETV d2,1; if() #430 Else Start
STORE d2,0; if() #430 Else End
LOAD d2,0; if() #725 Test
COMPAREV d2,0
GOTOCMP 5765,==; Test 'if'
LOAD d2,0.0001; if() #432 Test AND if() #725 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1
COMPAREV d2,0
GOTOCMP 5744,==; Test 'if'
SETV d2,0; if() #432 Body Start
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
PUSHR d4
LOAD d2,0.0001; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2139; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 5765; if() #432 Body End
SETV d2,0; if() #432 Else Start
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,8
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2; if() #432 Else End
POPARGS d5,0.0002; if() #725 Body End AND unless() #724 Body End AND if() #723 Body End
RETURNFUNC; Func[void __UpdateEWMFall(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMDrift(EWeapon)] Body Start
SETR d4,SP2
LOAD d2,0.0001
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORE d2,0
LOAD d2,0.0001
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOAD d2,0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOAD d2,0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0; if() #412 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 5882,==; Test 'if'
LOAD d2,0.0001; if() #412 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6239; if() #412 Body End
LOAD d2,0; if() #413 Test AND if() #412 Else Start
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 5916,==; Test 'if'
LOAD d2,0.0001; if() #413 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6239; if() #413 Body End
LOAD d2,0; if() #414 Test AND if() #413 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 5951,==; Test 'if'
LOAD d2,0.0001; if() #414 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6239; if() #414 Body End
LOAD d2,0; if() #415 Test AND if() #414 Else Start
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 5985,==; Test 'if'
LOAD d2,0.0001; if() #415 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6239; if() #415 Body End
LOAD d2,0; if() #416 Test AND if() #415 Else Start
COMPAREV d2,4
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6051,==; Test 'if'
LOAD d2,0.0001; if() #416 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6239; if() #416 Body End
LOAD d2,0; if() #417 Test AND if() #416 Else Start
COMPAREV d2,5
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6116,==; Test 'if'
LOAD d2,0.0001; if() #417 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6239; if() #417 Body End
LOAD d2,0; if() #418 Test AND if() #417 Else Start
COMPAREV d2,6
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6181,==; Test 'if'
LOAD d2,0.0001; if() #418 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6239; if() #418 Body End
LOAD d2,0.0001; if() #418 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #418 Else End
LOAD d2,0.0001; if() #417 Else End AND if() #416 Else End AND if() #415 Else End AND if() #414 Else End AND if() #413 Else End AND if() #412 Else End
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __UpdateEWMDrift(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMDriftWait(EWeapon)] Body Start
SETR d4,SP2
LOAD d2,0.0001
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORE d2,0
LOAD d2,0.0001; if() #419 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,16
SETCMP d2,I>=
COMPAREV d2,0
GOTOCMP 6363,==; Test 'if'
LOAD d2,0.0001; if() #419 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOAD d2,0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOAD d2,0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6382; if() #419 Body End
LOAD d2,0.0001; if() #419 Else Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ADDV d2,1
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #419 Else End
LOAD d2,0; if() #420 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6417,==; Test 'if'
LOAD d2,0.0001; if() #420 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6774; if() #420 Body End
LOAD d2,0; if() #421 Test AND if() #420 Else Start
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6451,==; Test 'if'
LOAD d2,0.0001; if() #421 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6774; if() #421 Body End
LOAD d2,0; if() #422 Test AND if() #421 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6486,==; Test 'if'
LOAD d2,0.0001; if() #422 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6774; if() #422 Body End
LOAD d2,0; if() #423 Test AND if() #422 Else Start
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6520,==; Test 'if'
LOAD d2,0.0001; if() #423 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6774; if() #423 Body End
LOAD d2,0; if() #424 Test AND if() #423 Else Start
COMPAREV d2,4
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6586,==; Test 'if'
LOAD d2,0.0001; if() #424 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6774; if() #424 Body End
LOAD d2,0; if() #425 Test AND if() #424 Else Start
COMPAREV d2,5
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6651,==; Test 'if'
LOAD d2,0.0001; if() #425 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6774; if() #425 Body End
LOAD d2,0; if() #426 Test AND if() #425 Else Start
COMPAREV d2,6
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6716,==; Test 'if'
LOAD d2,0.0001; if() #426 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6774; if() #426 Body End
LOAD d2,0.0001; if() #426 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #426 Else End
LOAD d2,0.0001; if() #425 Else End AND if() #424 Else End AND if() #423 Else End AND if() #422 Else End AND if() #421 Else End AND if() #420 Else End
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __UpdateEWMDriftWait(EWeapon)] Body End
PUSHARGSV 0,0.0011; Func[void __DoEWeaponDeathPrototype(EWeapon)] Body Start
SETR d4,SP2
LOAD d2,0.0011; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORE d2,0.0010
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #165 setup
STORE d2,0.0003
LOAD d2,0.0003; for() #165 LoopTest
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 6859,==; for() #165 TestFail?
LOAD d2,0.0003; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #165 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORE d2,0.0009
LOAD d2,0.0009; if() #594 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,768
COMPAREV d2,768
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 6855,!=; Test 'if' AND continue 1; AND if() #594 Body
LOAD d2,0.0009; if() #595 Test
PUSHR d2
SETV d2,3
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0010
POP d3
COMPARER d3,d2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6859,!=; Test 'if' AND break 1; AND if() #595 Body
LOAD d2,0.0003; for() #165 Body End AND for() #165 LoopIncrement
SUBV d2,1
STORE d2,0.0003
GOTO 6819; for() #165 End
LOAD d2,0.0003; if() #596 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6885,==; Test 'if'
ALLOCATEMEMV d2,43; if() #596 Body Start
STORE d2,0
WRITEPODSTRING d2,"ghost.zh: Failed to find prototype eweapon"
LOAD d2,0; InlineFunc[void TraceS(int)] Params Start
SETR d0,d2; InlineFunc[void TraceS(int)] Params End
TRACE6 d3; InlineFunc[void TraceS(int)] Body
TRACE3; InlineFunc[void TraceNL()] Body
SETV d2,0
PUSHR d2
LOAD d2,0.0011
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
LOAD d3,0
DEALLOCATEMEMR d3
GOTO 7193; return (Void)
LOAD d3,0
DEALLOCATEMEMR d3; if() #596 Body End
LOAD d2,0.0011
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MODV d2,10
SUBV d2,6.2832
STORE d2,0.0005
LOAD d2,0.0011
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0010
POP d3
SUBR d3,d2
SETR d2,d3
MULTV d2,10000
STORE d2,0.0004
LOAD d2,0.0011
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0005
POP d3
SUBR d3,d2
SETR d2,d3
DIVV d2,100
RSHIFTV d2,0
STORE d2,0.0008
LOAD d2,0.0011; if() #359 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNEXTEND
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6975,==; Test 'if'
LOAD d2,0.0011; if() #359 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOAD d2,0.0011
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOAD d2,0.0011
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORE d2,0.0007
LOAD d2,0.0011
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOAD d2,0.0011
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOAD d2,0.0011
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORE d2,0.0006
GOTO 6987; if() #359 Body End
LOAD d2,0.0011; if() #359 Else Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
ADDV d2,8
STORE d2,0.0007
LOAD d2,0.0011
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
ADDV d2,8
STORE d2,0.0006; if() #359 Else End
LOAD d2,0.0008; if() #360 Test
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 7039,==; Test 'if'
LOAD d2,0.0001; for() #166 LoopTest AND if() #360 Body Start
PUSHR d2
LOAD d2,0.0004
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 7030,==; for() #166 TestFail?
PUSHR d4; for() #166 Body Start
LOAD d2,0.0009; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOAD d2,0.0007
PUSHR d2
LOAD d2,0.0006
PUSHR d2
LOAD d2,0.0005
PUSHR d2
LOAD d2,0.0001
MULTV d2,6.2832
SETV d2,6.2832
PUSHR d2
LOAD d2,0.0001
POP d3
MULTR d2,d3
PUSHR d2
LOAD d2,0.0004
POP d3
DIVR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
CALLFUNC 0.8950; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; for() #166 Body End
LOAD d2,0.0001; for() #166 LoopIncrement
ADDV d2,1
STORE d2,0.0001
GOTO 6992; for() #166 End
LOAD d2,0.0009; InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,2
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
GOTO 7184; if() #360 Body End
LOAD d2,0.0008; if() #361 Test AND if() #360 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 7079,==; Test 'if'
STOREV 0,0.0001; for() #167 setup AND if() #361 Body Start
LOAD d2,0.0001; for() #167 LoopTest
PUSHR d2
LOAD d2,0.0004
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 7070,==; for() #167 TestFail?
PUSHR d4; for() #167 Body Start
LOAD d2,0.0009; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOAD d2,0.0007
PUSHR d2
LOAD d2,0.0006
PUSHR d2
SETV d3,31416; InlineFunc[int Rand(int)] Params
RNDR d2,d3; InlineFunc[int Rand(int)] Body
DIVV d2,5000
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
CALLFUNC 0.8950; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; for() #167 Body End
LOAD d2,0.0001; for() #167 LoopIncrement
ADDV d2,1
STORE d2,0.0001
GOTO 7045; for() #167 End
LOAD d2,0.0009; InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,2
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
GOTO 7184; if() #361 Body End
LOAD d2,0.0004; if() #362 Test AND if() #361 Else Start
COMPAREV d2,1
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 7145,==; Test 'if'
SETR d2,LINKX; InlineFunc[int ArcTan(int, int)] Params Start AND if() #362 Body Start
ADDV d2,8
PUSHR d2
LOAD d2,0.0007
POP d3
SUBR d3,d2
PUSHR d3
SETR d2,LINKY
ADDV d2,8
PUSHR d2
LOAD d2,0.0006
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR d2
LOAD d2,0.0005
DIVV d2,2
POP d3
SUBR d3,d2
SETR d2,d3
STORE d2,0.0001
LOAD d2,0; for() #168 LoopTest
PUSHR d2
LOAD d2,0.0004
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 7176,==; for() #168 TestFail?
PUSHR d4; for() #168 Body Start
LOAD d2,0.0009; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOAD d2,0.0007
PUSHR d2
LOAD d2,0.0006
PUSHR d2
LOAD d2,0.0001
PUSHR d2
LOAD d2,0.0005
PUSHR d2
LOAD d2,0
POP d3
MULTR d2,d3
PUSHR d2
LOAD d2,0.0004
SUBV d2,1
POP d3
DIVR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
CALLFUNC 0.8950; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; for() #168 Body End
LOAD d2,0; for() #168 LoopIncrement
ADDV d2,1
STORE d2,0
GOTO 7107; for() #168 End
GOTO 7176; if() #362 Body End
LOAD d2,0.0004; if() #597 Test AND if() #362 Else Start
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 7176,==; Test 'if'
PUSHR d4; if() #597 Body Start
LOAD d2,0.0009; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOAD d2,0.0007
PUSHR d2
LOAD d2,0.0006
PUSHR d2
SETR d2,LINKX; InlineFunc[int ArcTan(int, int)] Params Start
ADDV d2,8
PUSHR d2
LOAD d2,0.0007
POP d3
SUBR d3,d2
PUSHR d3
SETR d2,LINKY
ADDV d2,8
PUSHR d2
LOAD d2,0.0006
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
CALLFUNC 0.8950; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; if() #597 Body End
LOAD d2,0.0009; if() #362 Else End AND InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,2
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body AND if() #361 Else End
SETV d2,0; if() #360 Else End
PUSHR d2
LOAD d2,0.0011
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0012
RETURNFUNC; Func[void __DoEWeaponDeathPrototype(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathAimAtLink(EWeapon)] Body Start
SETR d4,SP2
SETV d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOAD d2,0.0001
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,14
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0001; if() #354 Test
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 7284,==; Test 'if'
PUSHR d4; if() #354 Body Start
LOAD d2,0.0001; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0021; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP d4
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
LOAD d2,0.0001; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1671; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
SETV d2,300
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
SETV d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
SETV d2,13
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7360; if() #354 Body End
LOAD d2,0.0001; if() #355 Test AND if() #354 Else Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOCMP 7309,==; Test 'if'
LOAD d2,0.0001; if() #355 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.3000
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
LOAD d2,0.0001; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1671; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
GOTO 7360; if() #355 Body End
LOAD d2,0.0001; if() #355 Else Start
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,6
STORE d2,0
LOAD d2,0; if() #356 Test
COMPAREV d2,6
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 7330,==; Test 'if'
PUSHR d4; if() #356 Body Start
LOAD d2,0.0001; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 0; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2271; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 7360; if() #356 Body End
LOAD d2,0; if() #357 Test AND if() #356 Else Start
COMPAREV d2,4
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 7342,==; Test 'if'
PUSHR d4; if() #357 Body Start
LOAD d2,0.0001; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2271; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 7360; if() #357 Body End
LOAD d2,0; if() #358 Test AND if() #357 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 7354,==; Test 'if'
PUSHR d4; if() #358 Body Start
LOAD d2,0.0001; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2271; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 7360; if() #358 Body End
PUSHR d4; if() #358 Else Start
LOAD d2,0.0001; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 2; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2271; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4; if() #358 Else End
POPARGS d5,0.0002; if() #357 Else End AND if() #356 Else End AND if() #355 Else End AND if() #354 Else End
RETURNFUNC; Func[void __DoEWeaponDeathAimAtLink(EWeapon)] Body End
SETR d4,SP2; Func[void __DoEWeaponDeathExplode(EWeapon)] Body Start
PUSHR d4
PUSHV 135; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOAD d2,0; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0823; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOAD d2,0; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOAD d2,0
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOAD d2,0
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHV -1
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1302; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4
SETV d2,0
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POP d5
RETURNFUNC; Func[void __DoEWeaponDeathExplode(EWeapon)] Body End
SETR d4,SP2; Func[void __DoEWeaponDeathSBombExplode(EWeapon)] Body Start
PUSHR d4
PUSHV 136; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOAD d2,0; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0823; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOAD d2,0; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOAD d2,0
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOAD d2,0
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHV -1
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1302; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4
SETV d2,0
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POP d5
RETURNFUNC; Func[void __DoEWeaponDeathSBombExplode(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsHV(EWeapon)] Body Start
SETR d4,SP2
LOAD d2,0; for() #155 LoopTest
COMPAREV d2,4
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 7496,==; for() #155 TestFail?
PUSHR d4; for() #155 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOAD d2,0.0001; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0823; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOAD d2,0.0001; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOAD d2,0
PUSHR d2
PUSHV 200
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1302; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #155 Body End
LOAD d2,0; for() #155 LoopIncrement
ADDV d2,1
STORE d2,0
GOTO 7452; for() #155 End
SETV d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsHV(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Body Start
SETR d4,SP2
STOREV 4,0; for() #154 setup
LOAD d2,0; for() #154 LoopTest
COMPAREV d2,8
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 7554,==; for() #154 TestFail?
PUSHR d4; for() #154 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOAD d2,0.0001; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0823; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOAD d2,0.0001; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOAD d2,0
PUSHR d2
PUSHV 200
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1302; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #154 Body End
LOAD d2,0; for() #154 LoopIncrement
ADDV d2,1
STORE d2,0
GOTO 7510; for() #154 End
SETV d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsRand(EWeapon)] Body Start
SETR d4,SP2
SETV d3,2; InlineFunc[int Rand(int)] Params AND if() #352 Test
RNDR d2,d3; InlineFunc[int Rand(int)] Body
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 7618,==; Test 'if'
LOAD d2,0; for() #156 LoopTest AND if() #352 Body Start
COMPAREV d2,4
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 7663,==; for() #156 TestFail?
PUSHR d4; for() #156 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOAD d2,0.0001; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0823; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOAD d2,0.0001; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOAD d2,0
PUSHR d2
PUSHV 200
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1302; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #156 Body End
LOAD d2,0; for() #156 LoopIncrement
ADDV d2,1
STORE d2,0
GOTO 7573; for() #156 End
GOTO 7663; if() #352 Body End
STOREV 4,0; for() #157 setup AND if() #352 Else Start
LOAD d2,0; for() #157 LoopTest
COMPAREV d2,8
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 7663,==; for() #157 TestFail?
PUSHR d4; for() #157 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOAD d2,0.0001; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0823; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOAD d2,0.0001; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOAD d2,0
PUSHR d2
PUSHV 200
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1302; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #157 Body End
LOAD d2,0; for() #157 LoopIncrement
ADDV d2,1
STORE d2,0
GOTO 7619; for() #157 End
SETV d2,0; if() #352 Else End
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsRand(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fireballs(EWeapon)] Body Start
SETR d4,SP2
LOAD d2,0; for() #162 LoopTest
COMPAREV d2,8
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 7720,==; for() #162 TestFail?
PUSHR d4; for() #162 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOAD d2,0.0001; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0823; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOAD d2,0.0001; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOAD d2,0
PUSHR d2
PUSHV 200
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1302; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #162 Body End
LOAD d2,0; for() #162 LoopIncrement
ADDV d2,1
STORE d2,0
GOTO 7676; for() #162 End
SETV d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fireballs(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresHV(EWeapon)] Body Start
SETR d4,SP2
LOAD d2,0; for() #159 LoopTest
COMPAREV d2,4
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 7777,==; for() #159 TestFail?
PUSHR d4; for() #159 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOAD d2,0.0001; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0823; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOAD d2,0.0001; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOAD d2,0
PUSHR d2
PUSHV 100
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1302; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #159 Body End
LOAD d2,0; for() #159 LoopIncrement
ADDV d2,1
STORE d2,0
GOTO 7733; for() #159 End
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresHV(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresDiag(EWeapon)] Body Start
SETR d4,SP2
STOREV 4,0; for() #158 setup
LOAD d2,0; for() #158 LoopTest
COMPAREV d2,8
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 7837,==; for() #158 TestFail?
PUSHR d4; for() #158 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOAD d2,0.0001; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0823; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOAD d2,0.0001; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOAD d2,0
PUSHR d2
PUSHV 71
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1302; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #158 Body End
LOAD d2,0; for() #158 LoopIncrement
ADDV d2,1
STORE d2,0
GOTO 7793; for() #158 End
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresDiag(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresRand(EWeapon)] Body Start
SETR d4,SP2
SETV d3,2; InlineFunc[int Rand(int)] Params AND if() #353 Test
RNDR d2,d3; InlineFunc[int Rand(int)] Body
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 7903,==; Test 'if'
LOAD d2,0; for() #160 LoopTest AND if() #353 Body Start
COMPAREV d2,4
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 7948,==; for() #160 TestFail?
PUSHR d4; for() #160 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOAD d2,0.0001; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0823; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOAD d2,0.0001; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOAD d2,0
PUSHR d2
PUSHV 100
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1302; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #160 Body End
LOAD d2,0; for() #160 LoopIncrement
ADDV d2,1
STORE d2,0
GOTO 7858; for() #160 End
GOTO 7948; if() #353 Body End
STOREV 4,0; for() #161 setup AND if() #353 Else Start
LOAD d2,0; for() #161 LoopTest
COMPAREV d2,8
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 7948,==; for() #161 TestFail?
PUSHR d4; for() #161 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOAD d2,0.0001; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0823; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOAD d2,0.0001; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOAD d2,0
PUSHR d2
PUSHV 71
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1302; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #161 Body End
LOAD d2,0; for() #161 LoopIncrement
ADDV d2,1
STORE d2,0
GOTO 7904; for() #161 End
SETV d2,13; if() #353 Else End AND InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresRand(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fires(EWeapon)] Body Start
SETR d4,SP2
LOAD d2,0; for() #163 LoopTest
COMPAREV d2,4
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 8007,==; for() #163 TestFail?
PUSHR d4; for() #163 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOAD d2,0.0001; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0823; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOAD d2,0.0001; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOAD d2,0
PUSHR d2
PUSHV 100
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1302; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #163 Body End
LOAD d2,0; for() #163 LoopIncrement
ADDV d2,1
STORE d2,0
GOTO 7963; for() #163 End
STOREV 4,0; for() #164 setup
LOAD d2,0; for() #164 LoopTest
COMPAREV d2,8
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 8052,==; for() #164 TestFail?
PUSHR d4; for() #164 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOAD d2,0.0001; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0823; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOAD d2,0.0001; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOAD d2,0
PUSHR d2
PUSHV 71
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOAD d2,0.0001
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1302; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #164 Body End
LOAD d2,0; for() #164 LoopIncrement
ADDV d2,1
STORE d2,0
GOTO 8008; for() #164 End
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fires(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathSpawnNPC(EWeapon)] Body Start
SETR d4,SP2
LOAD d2,0.0001; InlineFunc[NPC Screen->CreateNPC(int)] Params Start
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[NPC Screen->CreateNPC(int)] Params End
CREATENPCR d2; InlineFunc[NPC Screen->CreateNPC(int)] Body Start
SETR d2,REFNPC; InlineFunc[NPC Screen->CreateNPC(int)] Body End
STORE d2,0
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
LOAD d2,0.0001
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETV d2,0
PUSHR d2
LOAD d2,0.0001
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeathSpawnNPC(EWeapon)] Body End
SETR d4,SP2; Func[void __DoEWeaponDeathSingleFire(EWeapon)] Body Start
PUSHR d4
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOAD d2,0; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0823; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOAD d2,0; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOAD d2,0
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOAD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOAD d2,0
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1302; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POP d5
RETURNFUNC; Func[void __DoEWeaponDeathSingleFire(EWeapon)] Body End
PUSHARGSV 0,0.0005; Func[void __DoEWeaponDeathRunScript(EWeapon)] Body Start
SETR d4,SP2
PUSHR d4
CALLFUNC 0.1250; UsrFunc[int FindUnusedFFC()] Call
POP d4
STORE d2,0.0004
LOAD d2,0.0004; if() #598 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 8184,==; Test 'if'
SETV d2,0; if() #598 Body Start
PUSHR d2
LOAD d2,0.0005
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
GOTO 8323; return (Void) AND if() #598 Body End
LOAD d2,0.0004; InlineFunc[FFC Screen->LoadFFC(int)] Params
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORE d2,0.0003
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #169 setup
STORE d2,0
LOAD d2,0; for() #169 LoopTest
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 8226,==; for() #169 TestFail?
LOAD d2,0; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #169 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORE d2,0.0002
LOAD d2,0.0002; if() #599 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,768
COMPAREV d2,512
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 8222,!=; Test 'if' AND continue 1; AND if() #599 Body
LOAD d2,0.0001; InlineFunc[untyped Min(untyped, untyped)] Params Start
PUSHVARGR d2
LOAD d2,0.0002
PUSHR d2
SETV d2,3
PUSHR d2
POP d0
POP REFEWPN
PUSHVARGR EWPNMISCD; InlineFunc[untyped Min(untyped, untyped)] Params End
MINVARG; InlineFunc[untyped Min(untyped, untyped)] Body
STORE d2,0.0001; for() #169 Body End
LOAD d2,0; for() #169 LoopIncrement
SUBV d2,1
STORE d2,0
GOTO 8189; for() #169 End
LOAD d2,0.0001
SUBV d2,1
PUSHR d2
LOAD d2,0.0005
POP d3
PUSHR d2
PUSHR d3
SETV d2,3
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0005
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ORV d2,1024
PUSHR d2
LOAD d2,0.0005
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,1
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
PUSHR d4
LOAD d2,0.0005; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0823; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
PUSHR d4
LOAD d2,0.0005; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
LOAD d2,0.0005
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFSCRIPT,d2
LOAD d2,0.0001
SUBV d2,1
PUSHR d2
LOAD d2,0.0003
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFINITDD,d2
POPARGS d5,0.0006
RETURNFUNC; Func[void __DoEWeaponDeathRunScript(EWeapon)] Body End
PUSHARGSV 0,0.0002; Func[void UpdateEWeapons()] Body Start
SETR d4,SP2
SETR d2,LINKACTION; unless() #345 Test
COMPAREV d2,4
GOTOCMP 8341,==
SETR d2,LINKACTION
COMPAREV d2,5
GOTOCMP 8341,==
SETR d2,LINKACTION
COMPAREV d2,14
GOTOCMP 8341,==
SETR d2,LINKACTION
COMPAREV d2,15
GOTOCMP 8341,==
SETV d2,0
GOTO 8342
SETV d2,1
COMPAREV d2,0
GOTOCMP 8391,!=; Test 'unless'
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #149 setup AND unless() #345 Body Start
STORE d2,0
LOAD d2,0; for() #149 LoopTest
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 8437,==; for() #149 TestFail?
LOAD d2,0; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #149 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORE d2,0.0001
LOAD d2,0.0001; if() #573 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,512
COMPAREV d2,0
GOTOCMP 8378,==
LOAD d2,0.0001
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,256
COMPAREV d2,0
GOTOCMP 8378,!=
SETV d2,0
GOTO 8379
SETV d2,1
COMPAREV d2,0
GOTOCMP 8386,!=; Test 'if' AND continue 1; AND if() #573 Body
PUSHR d4
LOAD d2,0.0001; UsrFunc[void UpdateEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void UpdateEWeapon(EWeapon)] Params End
CALLFUNC 0.2375; UsrFunc[void UpdateEWeapon(EWeapon)] Call
POP d4; for() #149 Body End
LOAD d2,0; for() #149 LoopIncrement
SUBV d2,1
STORE d2,0
GOTO 8346; for() #149 End
GOTO 8437; unless() #345 Body End
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #150 setup AND unless() #345 Else Start
STORE d2,0
LOAD d2,0; for() #150 LoopTest
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 8437,==; for() #150 TestFail?
LOAD d2,0; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #150 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORE d2,0.0001
LOAD d2,0.0001; if() #574 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,512
COMPAREV d2,0
GOTOCMP 8425,==
LOAD d2,0.0001
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,256
COMPAREV d2,0
GOTOCMP 8425,!=
SETV d2,0
GOTO 8426
SETV d2,1
COMPAREV d2,0
GOTOCMP 8433,!=; Test 'if' AND continue 1; AND if() #574 Body
PUSHR d4
LOAD d2,0.0001; UsrFunc[void __UpdateEWeaponVisualFlags(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWeaponVisualFlags(EWeapon)] Params End
CALLFUNC 0.8439; UsrFunc[void __UpdateEWeaponVisualFlags(EWeapon)] Call
POP d4; for() #150 Body End
LOAD d2,0; for() #150 LoopIncrement
SUBV d2,1
STORE d2,0
GOTO 8393; for() #150 End
POPARGS d5,0.0002; unless() #345 Else End
RETURNFUNC; Func[void UpdateEWeapons()] Body End
PUSHARGSV 0,0.0002; Func[void __UpdateEWeaponVisualFlags(EWeapon)] Body Start
SETR d4,SP2
LOAD d2,0.0002; if() #746 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,8
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 8466,==; Test 'if'
LOAD d2,0.0002; if() #747 Test AND if() #746 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 8466,==; Test 'if'
PUSHR d4; if() #747 Body Start
LOAD d2,0.0002; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params Start
PUSHR d2; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params End
CALLFUNC 0.0928; UsrFunc[void DrawEWeaponShadow(EWeapon)] Call
POP d4; if() #747 Body End
LOAD d2,0.0002; if() #746 Body End AND if() #461 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 8657,==; Test 'if'
SETV d2,1000; if() #461 Body Start
PUSHR d2
LOAD d2,0.0002
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
LOAD d2,0.0002; if() #748 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
GOTOCMP 8506,==
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
GOTOCMP 8506,==
SETV d2,1
GOTO 8507
SETV d2,0
COMPAREV d2,0
GOTOCMP 8714,!=; Test 'if' AND return (Void) AND if() #748 Body
LOAD d2,0.0002; if() #462 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOCMP 8522,==; Test 'if'
LOAD d2,0.0002; InlineFunc[int RadtoDeg(int)] Params Start AND if() #462 Body Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
STORE d2,0.0001
GOTO 8588; if() #462 Body End
PUSHR d4; if() #462 Else Start
LOAD d2,0.0002; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2005; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORE d2,0
LOAD d2,0; if() #463 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 8538,==; Test 'if'
SETV d2,-90; if() #463 Body Start
STORE d2,0.0001
GOTO 8588; if() #463 Body End
LOAD d2,0; if() #464 Test AND if() #463 Else Start
COMPAREV d2,5
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 8546,==; Test 'if'
SETV d2,-45; if() #464 Body Start
STORE d2,0.0001
GOTO 8588; if() #464 Body End
LOAD d2,0; if() #465 Test AND if() #464 Else Start
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 8554,==; Test 'if'
SETV d2,0; if() #465 Body Start
STORE d2,0.0001
GOTO 8588; if() #465 Body End
LOAD d2,0; if() #466 Test AND if() #465 Else Start
COMPAREV d2,7
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 8562,==; Test 'if'
SETV d2,45; if() #466 Body Start
STORE d2,0.0001
GOTO 8588; if() #466 Body End
LOAD d2,0; if() #467 Test AND if() #466 Else Start
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 8570,==; Test 'if'
SETV d2,90; if() #467 Body Start
STORE d2,0.0001
GOTO 8588; if() #467 Body End
LOAD d2,0; if() #468 Test AND if() #467 Else Start
COMPAREV d2,6
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 8578,==; Test 'if'
SETV d2,135; if() #468 Body Start
STORE d2,0.0001
GOTO 8588; if() #468 Body End
LOAD d2,0; if() #469 Test AND if() #468 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 8586,==; Test 'if'
SETV d2,180; if() #469 Body Start
STORE d2,0.0001
GOTO 8588; if() #469 Body End
SETV d2,-135; if() #469 Else Start
STORE d2,0.0001; if() #469 Else End
STOREV 0,0; if() #468 Else End AND if() #467 Else End AND if() #466 Else End AND if() #465 Else End AND if() #464 Else End AND if() #463 Else End AND if() #462 Else End
LOAD d2,0.0001; if() #470 Test
COMPAREV d2,0
GOTOCMP 8597,<
LOAD d2,0.0001
COMPAREV d2,180
GOTOCMP 8597,>=
SETV d2,1
GOTO 8598
SETV d2,0
COMPAREV d2,0
GOTOCMP 8603,==; Test 'if'
SETV d2,0; if() #470 Body Start
STORE d2,0
GOTO 8605; if() #470 Body End
SETV d2,2; if() #470 Else Start
STORE d2,0; if() #470 Else End
PUSHV 4; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD d2,0.0002
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOAD d2,0.0002
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOAD d2,0.0002
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOAD d2,0.0002
PUSHR d2
POP REFEWPN
PUSHR EWPNTILE
PUSHARGSV 1,0.0002
LOAD d2,0.0002
PUSHR d2
POP REFEWPN
PUSHR EWPNCSET
PUSHARGSV -1,0.0002
LOAD d2,0.0002
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOAD d2,0.0002
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOAD d2,0.0002
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOAD d2,0.0001
PUSHR d2
LOAD d2,0
PUSHR d2
PUSHV 1
PUSHV 128; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 8714; if() #461 Body End
LOAD d2,0.0002; if() #749 Test AND if() #461 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 8697,==; Test 'if'
SETR d2,gd27; if() #471 Test AND if() #749 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 8688,==; Test 'if'
SETV d2,1000; if() #471 Body Start
PUSHR d2
LOAD d2,0.0002
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
GOTO 8697; if() #471 Body End
SETV d2,0; if() #471 Else Start
PUSHR d2
LOAD d2,0.0002
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2; if() #471 Else End
LOAD d2,0.0002; if() #749 Body End AND if() #750 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 8714,==; Test 'if'
PUSHR d4; if() #750 Body Start
LOAD d2,0.0002; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1780; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #750 Body End
POPARGS d5,0.0003; if() #461 Else End
RETURNFUNC; Func[void __UpdateEWeaponVisualFlags(EWeapon)] Body End
SETR d4,SP2; Func[void UpdateGhostZH1()] Body Start
PUSHR d4
CALLFUNC 0.8325; UsrFunc[void UpdateEWeapons()] Call
PEEK d4
CALLFUNC 0.0869; UsrFunc[void CleanUpGhostFFCs()] Call
PEEK d4
CALLFUNC 0.8725; UsrFunc[void UpdateGhostZHData1()] Call
POP d4
RETURNFUNC; Func[void UpdateGhostZH1()] Body End
PUSHV 0; Func[void UpdateGhostZHData1()] Body Start
SETR d4,SP2
SETR d2,CURDMAP; InlineFunc[int Game->GetCurDMap()] Body
LSHIFTV d2,8
PUSHR d2
SETR d2,CURDSCR; InlineFunc[int Game->GetCurDMapScreen()] Body
POP d3
ADDR d2,d3
STORE d2,0
SETR d2,gd27; if() #346 Test
PUSHR d2
POP d0
READPODARRAYV d2,7
PUSHR d2
LOAD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 8758,==; Test 'if'
SETV d2,0; if() #346 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2
LOAD d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 7,d2
GOTO 8776; if() #346 Body End
SETR d2,gd27; if() #575 Test AND if() #346 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,6
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 8776,==; Test 'if'
SETR d2,gd27; if() #575 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,6
SUBV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2; if() #575 Body End
POP d5; if() #346 Else End
RETURNFUNC; Func[void UpdateGhostZHData1()] Body End
SETR d4,SP2; Func[void UpdateGhostZH2()] Body Start
PUSHR d4
CALLFUNC 0.0994; UsrFunc[void DrawGhostFFCs()] Call
PEEK d4
CALLFUNC 0.0065; UsrFunc[void AutoGhost()] Call
PEEK d4
CALLFUNC 0.8787; UsrFunc[void UpdateGhostZHData2()] Call
POP d4
RETURNFUNC; Func[void UpdateGhostZH2()] Body End
SETR d4,SP2; Func[void UpdateGhostZHData2()] Body Start
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,1
ADDV d2,1
MODV d2,8
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
SETR d2,gd27; if() #347 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 8819,==; Test 'if'
SETR d2,gd27; if() #347 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ORV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
GOTO 8829; if() #347 Body End
SETR d2,gd27; if() #347 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,-2
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2; if() #347 Else End
SETR d2,gd27; if(true) #576 [Opt:AlwaysOn]
PUSHR d2
POP d0
READPODARRAYV d2,3
ADDV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 3,d2
SETR d2,gd27; if() #577 Test
PUSHR d2
POP d0
READPODARRAYV d2,3
COMPAREV d2,8
SETCMP d2,I>=
COMPAREV d2,0
GOTOCMP 8864,==; Test 'if'
SETV d2,0; if() #577 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 3,d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,2
ADDV d2,1
MODV d2,4
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 2,d2; if() #577 Body End
SETR d2,gd27; if(true) #578 [Opt:AlwaysOn]
PUSHR d2
POP d0
READPODARRAYV d2,5
ADDV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 5,d2
SETR d2,gd27; if() #579 Test
PUSHR d2
POP d0
READPODARRAYV d2,5
COMPAREV d2,8
SETCMP d2,I>=
COMPAREV d2,0
GOTOCMP 8899,==; Test 'if'
SETV d2,0; if() #579 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 5,d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,4
ADDV d2,1
MODV d2,4
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 4,d2; if() #579 Body End
RETURNFUNC; Func[void UpdateGhostZHData2()] Body End
SETR d4,SP2; Func[bool __IsScriptNameChar(int, bool)] Body Start
LOAD d2,0.0001; if() #693 Test
COMPAREV d2,97
SETCMP d2,I>=
COMPAREV d2,0
GOTOCMP 8913,==; Test 'if'
LOAD d2,0.0001; if() #694 Test AND if() #693 Body Start
COMPAREV d2,122
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 8913,==; Test 'if'
SETV d2,1; return Start AND if() #694 Body Start
GOTO 8948; return End AND if() #694 Body End
LOAD d2,0.0001; if() #693 Body End AND if() #695 Test
COMPAREV d2,65
SETCMP d2,I>=
COMPAREV d2,0
GOTOCMP 8925,==; Test 'if'
LOAD d2,0.0001; if() #696 Test AND if() #695 Body Start
COMPAREV d2,90
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 8925,==; Test 'if'
SETV d2,1; return Start AND if() #696 Body Start
GOTO 8948; return End AND if() #696 Body End
LOAD d2,0.0001; if() #695 Body End AND if() #697 Test
COMPAREV d2,95
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 8932,==; Test 'if'
SETV d2,1; return Start AND if() #697 Body Start
GOTO 8948; return End AND if() #697 Body End
LOAD d2,0; unless() #698 Test
COMPAREV d2,0
GOTOCMP 8947,!=; Test 'unless'
LOAD d2,0.0001; if() #699 Test AND unless() #698 Body Start
COMPAREV d2,48
SETCMP d2,I>=
COMPAREV d2,0
GOTOCMP 8947,==; Test 'if'
LOAD d2,0.0001; if() #700 Test AND if() #699 Body Start
COMPAREV d2,57
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 8947,==; Test 'if'
SETV d2,1; return Start AND if() #700 Body Start
GOTO 8948; return End AND if() #700 Body End
SETV d2,0; if() #699 Body End AND unless() #698 Body End AND return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[bool __IsScriptNameChar(int, bool)] Body End
PUSHV 0; Func[void __CopyEWeapon(EWeapon, int, int, int)] Body Start
SETR d4,SP2
LOAD d2,0.0004; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNID; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Params End
CREATEEWEAPONR d2; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body Start
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body End
STORE d2,0
LOAD d2,0.0004; if() #590 Test
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 8982,==; Test 'if'
LOAD d2,0; InlineFunc[void EWeapon->UseSprite(int)] Params Start AND if() #590 Body Start
PUSHR d2
LOAD d2,0.0004
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void EWeapon->UseSprite(int)] Params End
POP d3; InlineFunc[void EWeapon->UseSprite(int)] Body Start
SETR REFEWPN,d3
EWPNUSESPRITER d2; InlineFunc[void EWeapon->UseSprite(int)] Body End AND if() #590 Body End
LOAD d2,0.0004; if() #350 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNEXTEND
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 9118,==; Test 'if'
SETV d2,3; if() #350 Body Start
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNEXTEND,d2
LOAD d2,0.0004
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNTXSZ,d2
LOAD d2,0.0004
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNTYSZ,d2
LOAD d2,0.0004
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,16
SETV d2,16
PUSHR d2
LOAD d2,0.0004
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHXSZ,d2
LOAD d2,0.0004
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
MULTV d2,16
SETV d2,16
PUSHR d2
LOAD d2,0.0004
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
POP d3
MULTR d2,d3
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHYSZ,d2
LOAD d2,0.0003
PUSHR d2
LOAD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOAD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOAD d2,0.0002
PUSHR d2
LOAD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOAD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
GOTO 9138; if() #350 Body End
LOAD d2,0.0003; if() #350 Else Start
SUBV d2,8
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOAD d2,0.0002
SUBV d2,8
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2; if() #350 Else End
LOAD d2,0.0004
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOAD d2,0.0004
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNPOWER,d2
SETV d2,1
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNANGULAR,d2
LOAD d2,0.0001
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
LOAD d2,0; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1671; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOAD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0004
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,8
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0004
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,10
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0004; if() #351 Test
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,15
GOTOCMP 9275,!=
LOAD d2,0.0004
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,-1
GOTOCMP 9275,!=
SETV d2,1
GOTO 9276
SETV d2,0
COMPAREV d2,0
GOTOCMP 9295,==; Test 'if'
PUSHR d4; if() #351 Body Start
LOAD d2,0; UsrFunc[int __GetEWeaponThrowHeight(EWeapon)] Params Start
PUSHR d2; UsrFunc[int __GetEWeaponThrowHeight(EWeapon)] Params End
CALLFUNC 0.2161; UsrFunc[int __GetEWeaponThrowHeight(EWeapon)] Call
POP d4
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 9313; if() #351 Body End
LOAD d2,0.0004; if() #351 Else Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #351 Else End
LOAD d2,0.0004
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,11
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0004
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,12
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0004
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,13
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0004
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,14
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0.0004
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,-257
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOAD d2,0; if() #591 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,32
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 9426,==; Test 'if'
SETV d2,0; if() #591 Body Start
PUSHR d2
LOAD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNCOLLDET,d2; if() #591 Body End
LOAD d2,0; if() #592 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 9443,==; Test 'if'
PUSHR d4; if() #592 Body Start
LOAD d2,0; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1780; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #592 Body End
POPARGS d5,0.0005
RETURNFUNC; Func[void __CopyEWeapon(EWeapon, int, int, int)] Body End
PUSHV 0; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body Start
SETR d4,SP2
LOAD d2,0; for() #189 LoopTest
PUSHR d2
LOAD d2,0.0001
SUBV d2,1
POP d3
COMPARER d3,d2
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 9493,==; for() #189 TestFail?
LOAD d2,0.0006; InlineFunc[bool Screen->isSolid(int, int)] Params Start AND if() #761 Test AND for() #189 Body Start
PUSHR d2
LOAD d2,0.0004
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0005
PUSHR d2
LOAD d2,0.0003
POP d3
ADDR d2,d3
PUSHR d2
LOAD d2,0.0002
POP d3
ADDR d2,d3
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
GOTOCMP 9489,==; Test 'if'
SETV d2,0; if() #762 Test AND if() #761 Body Start
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,4
COMPAREV d2,0
GOTOCMP 9489,==; Test 'if'
SETV d2,1; return Start AND if() #762 Body Start
GOTO 9494; return End AND if() #762 Body End
LOAD d2,0; if() #761 Body End AND for() #189 Body End AND for() #189 LoopIncrement
ADDV d2,1
STORE d2,0
GOTO 9447; for() #189 End
SETV d2,0; return Start
POPARGS d5,0.0007; return End
RETURNFUNC; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body End


PUSHR d0; void run(int) Params
PUSHR REFITEMCLASS; void run(int) Body Start
SETR d4,SP2
LOAD d2,0.0001; if() #524 Test
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 16,==; Test 'if'
SETV d2,-1; if() #524 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2
GOTO 22; if() #524 Body End
LOAD d2,0.0001; if() #524 Else Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2; if() #524 Else End
POPARGS d5,0.0002
QUIT; void run(int) Body End


SETV gd9,0; void run() Body Start
SETV gd10,0
SETV gd12,0
SETV gd11,0
SETV gd5,0
SETV gd15,0
SETV gd6,0
SETV gd14,0
SETV gd13,0
SETV gd7,0
SETV gd8,0
SETV gd2,0
SETV gd3,0
SETV gd4,0
ALLOCATEGMEMV d2,25
SETR gd26,d2
SETV gd16,0
SETV gd17,0
SETV gd21,0
SETV gd18,0
SETV gd22,0
SETV gd19,0
SETV gd20,0
ALLOCATEGMEMV d2,32
SETR gd25,d2
SETV gd23,0
SETV gd24,0
ALLOCATEGMEMV d2,8
SETR gd27,d2
ALLOCATEGMEMV d2,1000
SETR gd28,d2
ALLOCATEGMEMV d2,4096
SETR gd1,d2
QUIT; void run() Body End