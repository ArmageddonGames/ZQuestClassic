Compiling 'bumper.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

PUSHR D0; void run(int) Params
PUSHR REFFFC; void run(int) Body Start
PUSHARGSV 0,0.0007
SETR D4,SP
LOADD D2,7
PUSHR D2
POP REFFFC
SETR D2,DATA
STORED D2,6
SETV D2,0
PUSHR D2
LOADD D2,7
POP D3
PUSHR D2
PUSHR D3
SETV D2,7
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD,D2
PUSHARGSR D4,0.0002; if() #555 Test AND while(true) #8 Body [Opt:AlwaysOn] Start AND Int.Func[int Distance(int, int, int, int)] Params Start
LOADD D2,7; UsrFunc[int CenterX(FFC)] Params Start
PUSHR D2; UsrFunc[int CenterX(FFC)] Params End
CALLFUNC 0.0752; UsrFunc[int CenterX(FFC)] Call
POP D4
PUSHR D2
PUSHR D4
LOADD D2,7; UsrFunc[int CenterY(FFC)] Params Start
PUSHR D2; UsrFunc[int CenterY(FFC)] Params End
CALLFUNC 0.0775; UsrFunc[int CenterY(FFC)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 0.0744; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 0.0748; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; Int.Func[int Distance(int, int, int, int)] Params End
CALLFUNC 0.0407; Int.Func[int Distance(int, int, int, int)] Call
POP D4
PUSHR D2
LOADD D2,7
PUSHR D2
POP REFFFC
SETR D2,FFTWIDTH
MULTV D2,8
ADDV D2,2
POP D3
COMPARER D3,D2
GOTOCMP 59,>=
SETR D2,LINKZ
COMPAREV D2,0
GOTOCMP 59,!=
SETV D2,1
GOTO 60
SETV D2,0
COMPAREV D2,0
GOTOCMP 105,==; Test 'if'
LOADD D2,7; if() #556 Test AND if() #555 Body Start
PUSHR D2
SETV D2,7
PUSHR D2
POP D0
POP REFFFC
SETR D2,FFINITDD
COMPAREV D2,0
SETCMP D2,I==
COMPAREV D2,0
GOTOCMP 102,==; Test 'if'
SETV D2,76; InlineFunc[void Game->PlaySound(int)] Params AND if() #556 Body Start
PLAYSOUNDR D2; InlineFunc[void Game->PlaySound(int)] Body
PUSHARGSR D4,0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOADD D2,7; UsrFunc[int CenterX(FFC)] Params Start
PUSHR D2; UsrFunc[int CenterX(FFC)] Params End
CALLFUNC 0.0752; UsrFunc[int CenterX(FFC)] Call
POP D4
PUSHR D2
PUSHR D4
LOADD D2,7; UsrFunc[int CenterY(FFC)] Params Start
PUSHR D2; UsrFunc[int CenterY(FFC)] Params End
CALLFUNC 0.0775; UsrFunc[int CenterY(FFC)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 0.0744; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 0.0748; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0452; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORED D2,5
LOADD D2,8
STORED D2,4
SETV D2,16
STORED D2,3; if() #556 Body End
PUSHR D4
CALLFUNC 0.0798; UsrFunc[void NoAction()] Call
POP D4; if() #555 Body End
LOADD D2,4; if() #557 Test
COMPAREV D2,0
SETCMP D2,I>
COMPAREV D2,0
GOTOCMP 135,==; Test 'if'
LOADD D2,2; if() #557 Body Start
PUSHR D2
PUSHR D4
PUSHV 3; UsrFunc[int VectorX(int, int)] Params Start
LOADD D2,5
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.0843; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2,D3
STORED D2,2
LOADD D2,1
PUSHR D2
PUSHR D4
PUSHV 3; UsrFunc[int VectorY(int, int)] Params Start
LOADD D2,5
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.0853; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2,D3
STORED D2,1
LOADD D2,4
SUBV D2,1
STORED D2,4; if() #557 Body End
LOADD D2,2; InlineFunc[int Abs(int)] Params AND if() #558 Test
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2,0
SETCMP D2,I>
COMPAREV D2,0
GOTOCMP 259,==; Test 'if'
STOREDV 0,0; for() #187 setup AND if() #558 Body Start
LOADD D2,0; for() #187 LoopTest
COMPAREV D2,4
GOTOCMP 150,>=
LOADD D2,2
COMPAREV D2,-1
GOTOCMP 150,>
SETV D2,1
GOTO 151
SETV D2,0
COMPAREV D2,0
GOTOCMP 200,==; for() #187 TestFail?
PUSHR D4; if() #182 Test AND for() #187 Body Start
PUSHR LINKX; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params Start
PUSHR LINKY
PUSHV 2
PUSHV 1
PUSHV 0; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.0471; UsrFunc[bool CanWalk(int, int, int, int, bool)] Call
POP D4
COMPAREV D2,0
GOTOCMP 172,==; Test 'if'
SETR D2,LINKX; if() #182 Body Start
SUBV D2,1
PUSHR D2
POP D2
SETR LINKX,D2
LOADD D2,2
ADDV D2,1
STORED D2,2
GOTO 196; if() #182 Body End
LOADD D2,1; InlineFunc[int Abs(int)] Params AND if() #559 Test AND if() #182 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2,0
SETCMP D2,I>
COMPAREV D2,0
GOTOCMP 194,==; Test 'if'
LOADD D2,1; if() #559 Body Start
PUSHR D2
PUSHR D4
LOADD D2,1; UsrFunc[int Sign(int)] Params Start
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.0863; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
LOADD D2,2; InlineFunc[int Abs(int)] Params Start
DIVV D2,2; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
MULTR D2,D3
POP D3
ADDR D2,D3
STORED D2,1; if() #559 Body End
SETV D2,0
STORED D2,2; if() #182 Else End
LOADD D2,0; for() #187 Body End AND for() #187 LoopIncrement
ADDV D2,1
STORED D2,0
GOTO 142; for() #187 End
STOREDV 0,0; for() #188 setup
LOADD D2,0; for() #188 LoopTest
COMPAREV D2,4
GOTOCMP 209,>=
LOADD D2,2
COMPAREV D2,1
GOTOCMP 209,<
SETV D2,1
GOTO 210
SETV D2,0
COMPAREV D2,0
GOTOCMP 259,==; for() #188 TestFail?
PUSHR D4; if() #183 Test AND for() #188 Body Start
PUSHR LINKX; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params Start
PUSHR LINKY
PUSHV 3
PUSHV 1
PUSHV 0; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.0471; UsrFunc[bool CanWalk(int, int, int, int, bool)] Call
POP D4
COMPAREV D2,0
GOTOCMP 231,==; Test 'if'
SETR D2,LINKX; if() #183 Body Start
ADDV D2,1
PUSHR D2
POP D2
SETR LINKX,D2
LOADD D2,2
SUBV D2,1
STORED D2,2
GOTO 255; if() #183 Body End
LOADD D2,1; InlineFunc[int Abs(int)] Params AND if() #560 Test AND if() #183 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2,0
SETCMP D2,I>
COMPAREV D2,0
GOTOCMP 253,==; Test 'if'
LOADD D2,1; if() #560 Body Start
PUSHR D2
PUSHR D4
LOADD D2,1; UsrFunc[int Sign(int)] Params Start
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.0863; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
LOADD D2,2; InlineFunc[int Abs(int)] Params Start
DIVV D2,2; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
MULTR D2,D3
POP D3
ADDR D2,D3
STORED D2,1; if() #560 Body End
SETV D2,0
STORED D2,2; if() #183 Else End
LOADD D2,0; for() #188 Body End AND for() #188 LoopIncrement
ADDV D2,1
STORED D2,0
GOTO 201; for() #188 End
LOADD D2,1; if() #558 Body End AND InlineFunc[int Abs(int)] Params AND if() #561 Test
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2,0
SETCMP D2,I>
COMPAREV D2,0
GOTOCMP 382,==; Test 'if'
STOREDV 0,0; for() #189 setup AND if() #561 Body Start
LOADD D2,0; for() #189 LoopTest
COMPAREV D2,4
GOTOCMP 274,>=
LOADD D2,1
COMPAREV D2,-1
GOTOCMP 274,>
SETV D2,1
GOTO 275
SETV D2,0
COMPAREV D2,0
GOTOCMP 324,==; for() #189 TestFail?
PUSHR D4; if() #184 Test AND for() #189 Body Start
PUSHR LINKX; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params Start
PUSHR LINKY
PUSHV 0
PUSHV 1
PUSHV 0; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.0471; UsrFunc[bool CanWalk(int, int, int, int, bool)] Call
POP D4
COMPAREV D2,0
GOTOCMP 296,==; Test 'if'
SETR D2,LINKY; if() #184 Body Start
SUBV D2,1
PUSHR D2
POP D2
SETR LINKY,D2
LOADD D2,1
ADDV D2,1
STORED D2,1
GOTO 320; if() #184 Body End
LOADD D2,2; InlineFunc[int Abs(int)] Params AND if() #562 Test AND if() #184 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2,0
SETCMP D2,I>
COMPAREV D2,0
GOTOCMP 318,==; Test 'if'
LOADD D2,2; if() #562 Body Start
PUSHR D2
PUSHR D4
LOADD D2,2; UsrFunc[int Sign(int)] Params Start
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.0863; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
LOADD D2,1; InlineFunc[int Abs(int)] Params Start
DIVV D2,2; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
MULTR D2,D3
POP D3
ADDR D2,D3
STORED D2,2; if() #562 Body End
SETV D2,0
STORED D2,1; if() #184 Else End
LOADD D2,0; for() #189 Body End AND for() #189 LoopIncrement
ADDV D2,1
STORED D2,0
GOTO 266; for() #189 End
STOREDV 0,0; for() #190 setup
LOADD D2,0; for() #190 LoopTest
COMPAREV D2,4
GOTOCMP 333,>=
LOADD D2,1
COMPAREV D2,1
GOTOCMP 333,<
SETV D2,1
GOTO 334
SETV D2,0
COMPAREV D2,0
GOTOCMP 382,==; for() #190 TestFail?
PUSHR D4; if() #185 Test AND for() #190 Body Start
PUSHR LINKX; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params Start
PUSHR LINKY
PUSHARGSV 1,0.0002
PUSHV 0; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.0471; UsrFunc[bool CanWalk(int, int, int, int, bool)] Call
POP D4
COMPAREV D2,0
GOTOCMP 354,==; Test 'if'
SETR D2,LINKY; if() #185 Body Start
ADDV D2,1
PUSHR D2
POP D2
SETR LINKY,D2
LOADD D2,1
SUBV D2,1
STORED D2,1
GOTO 378; if() #185 Body End
LOADD D2,2; InlineFunc[int Abs(int)] Params AND if() #563 Test AND if() #185 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2,0
SETCMP D2,I>
COMPAREV D2,0
GOTOCMP 376,==; Test 'if'
LOADD D2,2; if() #563 Body Start
PUSHR D2
PUSHR D4
LOADD D2,2; UsrFunc[int Sign(int)] Params Start
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.0863; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
LOADD D2,1; InlineFunc[int Abs(int)] Params Start
DIVV D2,2; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
MULTR D2,D3
POP D3
ADDR D2,D3
STORED D2,2; if() #563 Body End
SETV D2,0
STORED D2,1; if() #185 Else End
LOADD D2,0; for() #190 Body End AND for() #190 LoopIncrement
ADDV D2,1
STORED D2,0
GOTO 325; for() #190 End
LOADD D2,3; if() #561 Body End AND if() #564 Test
COMPAREV D2,0
SETCMP D2,I>
COMPAREV D2,0
GOTOCMP 390,==; Test 'if'
LOADD D2,3; if() #564 Body Start
SUBV D2,1
STORED D2,3; if() #564 Body End
LOADD D2,6
PUSHR D2
LOADD D2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV D2,4; InlineFunc[untyped Floor(untyped)] Params End
FLOOR D2; InlineFunc[untyped Floor(untyped)] Body
POP D3
ADDR D2,D3
PUSHR D2
LOADD D2,7
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA,D2
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #8 Body [Opt:AlwaysOn] End
GOTO 22; while() #8 End AND [Opt:NeverRet] AND void run(int) Body End
POP D2; Func[int Distance(int, int, int, int)] Body Start
POP D1
POP D0
POP D6
SETR D2,DISTANCE
RETURNFUNC; Func[int Distance(int, int, int, int)] Body End
SETR D4,SP; Func[int DirNormal(int)] Body Start
LOADD D2,0; switch() #15 Key
SETR SWITCHKEY,D2; Store key
COMPAREV SWITCHKEY,8
GOTOCMP 433,==; case '80000'
COMPAREV SWITCHKEY,9
GOTOCMP 435,==; case '90000'
COMPAREV SWITCHKEY,10
GOTOCMP 437,==; case '100000'
COMPAREV SWITCHKEY,11
GOTOCMP 439,==; case '110000'
COMPAREV SWITCHKEY,12
GOTOCMP 441,==; case '120000'
COMPAREV SWITCHKEY,13
GOTOCMP 443,==; case '130000'
COMPAREV SWITCHKEY,14
GOTOCMP 445,==; case '140000'
COMPAREV SWITCHKEY,15
GOTOCMP 447,==; case '150000'
GOTO 449; switch() #15 NoMatch
SETV D2,0; Case block AND return Start
GOTO 450; return End
SETV D2,5; Case block AND return Start
GOTO 450; return End
SETV D2,3; Case block AND return Start
GOTO 450; return End
SETV D2,7; Case block AND return Start
GOTO 450; return End
SETV D2,1; Case block AND return Start
GOTO 450; return End
SETV D2,6; Case block AND return Start
GOTO 450; return End
SETV D2,2; Case block AND return Start
GOTO 450; return End
SETV D2,4; Case block AND return Start
GOTO 450; return End
LOADD D2,0; Case block AND return Start
POP D5; return End
RETURNFUNC; Func[int DirNormal(int)] Body End
SETR D4,SP; Func[int Angle(int, int, int, int)] Body Start
LOADD D2,1; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR D2
LOADD D2,3
POP D3
SUBR D3,D2
PUSHR D3
LOADD D2,0
PUSHR D2
LOADD D2,2
POP D3
SUBR D3,D2
SETR D1,D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
SETR D3,D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2,D3; InlineFunc[int RadtoDeg(int)] Body
POPARGS D5,0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
PUSHARGSV 0,0.0004; Func[bool CanWalk(int, int, int, int, bool)] Body Start
SETR D4,SP
STOREDV 8,3
LOADD D2,8
ADDV D2,15
STORED D2,2
LOADD D2,7
ADDV D2,15
STORED D2,1
LOADD D2,4; if() #29 Test
COMPAREV D2,0
GOTOCMP 485,==; Test 'if'
SETV D2,0; if() #29 Body Start
STORED D2,3; if() #29 Body End
PUSHR D4; switch() #4 Key
LOADD D2,6; UsrFunc[int DirNormal(int)] Params Start
PUSHR D2; UsrFunc[int DirNormal(int)] Params End
CALLFUNC 0.0413; UsrFunc[int DirNormal(int)] Call
POP D4
SETR SWITCHKEY,D2; Store key
COMPAREV SWITCHKEY,0
GOTOCMP 500,==; case '0'
COMPAREV SWITCHKEY,1
GOTOCMP 563,==; case '10000'
COMPAREV SWITCHKEY,2
GOTOCMP 613,==; case '20000'
COMPAREV SWITCHKEY,3
GOTOCMP 672,==; case '30000'
GOTO 730; switch() #4 NoMatch
LOADD D2,7; Case block AND return Start
PUSHR D2
LOADD D2,5
POP D3
SUBR D3,D2
SETR D2,D3
COMPAREV D2,0
GOTOCMP 559,<
LOADD D2,8; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR D2
LOADD D2,7
PUSHR D2
LOADD D2,3
POP D3
ADDR D2,D3
PUSHR D2
LOADD D2,5
POP D3
SUBR D3,D2
SETR D1,D3; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP D0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV D2,0
GOTOCMP 559,!=
LOADD D2,8; InlineFunc[bool Screen->isSolid(int, int)] Params Start
ADDV D2,8
PUSHR D2
LOADD D2,7
PUSHR D2
LOADD D2,3
POP D3
ADDR D2,D3
PUSHR D2
LOADD D2,5
POP D3
SUBR D3,D2
SETR D1,D3; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP D0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV D2,0
GOTOCMP 559,!=
LOADD D2,2; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR D2
LOADD D2,7
PUSHR D2
LOADD D2,3
POP D3
ADDR D2,D3
PUSHR D2
LOADD D2,5
POP D3
SUBR D3,D2
SETR D1,D3; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP D0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV D2,0
GOTOCMP 559,!=
SETV D2,0
GOTO 560
SETV D2,1
COMPAREV D2,0
SETCMP D2,I==
GOTO 742; return End
LOADD D2,1; Case block AND return Start
PUSHR D2
LOADD D2,5
POP D3
ADDR D2,D3
COMPAREV D2,176
GOTOCMP 609,>=
LOADD D2,8; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR D2
LOADD D2,1
PUSHR D2
LOADD D2,5
POP D3
ADDR D2,D3
SETR D1,D2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP D0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV D2,0
GOTOCMP 609,!=
LOADD D2,8; InlineFunc[bool Screen->isSolid(int, int)] Params Start
ADDV D2,8
PUSHR D2
LOADD D2,1
PUSHR D2
LOADD D2,5
POP D3
ADDR D2,D3
SETR D1,D2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP D0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV D2,0
GOTOCMP 609,!=
LOADD D2,2; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR D2
LOADD D2,1
PUSHR D2
LOADD D2,5
POP D3
ADDR D2,D3
SETR D1,D2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP D0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV D2,0
GOTOCMP 609,!=
SETV D2,0
GOTO 610
SETV D2,1
COMPAREV D2,0
SETCMP D2,I==
GOTO 742; return End
LOADD D2,8; Case block AND return Start
PUSHR D2
LOADD D2,5
POP D3
SUBR D3,D2
SETR D2,D3
COMPAREV D2,0
GOTOCMP 668,<
LOADD D2,8; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR D2
LOADD D2,5
POP D3
SUBR D3,D2
PUSHR D3
LOADD D2,7
PUSHR D2
LOADD D2,3
POP D3
ADDR D2,D3
SETR D1,D2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP D0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV D2,0
GOTOCMP 668,!=
LOADD D2,8; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR D2
LOADD D2,5
POP D3
SUBR D3,D2
PUSHR D3
LOADD D2,7
PUSHR D2
LOADD D2,3
POP D3
ADDR D2,D3
ADDV D2,7
SETR D1,D2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP D0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV D2,0
GOTOCMP 668,!=
LOADD D2,8; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR D2
LOADD D2,5
POP D3
SUBR D3,D2
PUSHR D3
LOADD D2,1
SETR D1,D2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP D0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV D2,0
GOTOCMP 668,!=
SETV D2,0
GOTO 669
SETV D2,1
COMPAREV D2,0
SETCMP D2,I==
GOTO 742; return End
LOADD D2,2; Case block AND return Start
PUSHR D2
LOADD D2,5
POP D3
ADDR D2,D3
COMPAREV D2,256
GOTOCMP 726,>=
LOADD D2,2; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR D2
LOADD D2,5
POP D3
ADDR D2,D3
PUSHR D2
LOADD D2,7
PUSHR D2
LOADD D2,3
POP D3
ADDR D2,D3
SETR D1,D2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP D0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV D2,0
GOTOCMP 726,!=
LOADD D2,2; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR D2
LOADD D2,5
POP D3
ADDR D2,D3
PUSHR D2
LOADD D2,7
PUSHR D2
LOADD D2,3
POP D3
ADDR D2,D3
ADDV D2,7
SETR D1,D2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP D0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV D2,0
GOTOCMP 726,!=
LOADD D2,2; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR D2
LOADD D2,5
POP D3
ADDR D2,D3
PUSHR D2
LOADD D2,1
SETR D1,D2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP D0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV D2,0
GOTOCMP 726,!=
SETV D2,0
GOTO 727
SETV D2,1
COMPAREV D2,0
SETCMP D2,I==
GOTO 742; return End
ALLOCATEMEMV D2,60; Case block
STORED D2,0
WRITEPODSTRING D2,"Invalid direction %d passed to CanWalk(x,y,dir,step,bool) \n"
LOADD D2,0; InlineFunc[void printf(char32)] Params Start
PUSHR D2
LOADD D2,6
PUSHVARGR D2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP D5; InlineFunc[void printf(char32)] Body End
LOADD D3,0
DEALLOCATEMEMR D3
SETV D2,0; return Start
POPARGS D5,0.0009; return End
RETURNFUNC; Func[bool CanWalk(int, int, int, int, bool)] Body End
SETR D4,SP; Func[int CenterLinkX()] Body Start
SETR D2,LINKX; return Start
ADDV D2,8
RETURNFUNC; return End AND Func[int CenterLinkX()] Body End
SETR D4,SP; Func[int CenterLinkY()] Body Start
SETR D2,LINKY; return Start
ADDV D2,8
RETURNFUNC; return End AND Func[int CenterLinkY()] Body End
SETR D4,SP; Func[int CenterX(FFC)] Body Start
LOADD D2,0; return Start
PUSHR D2
POP REFFFC
SETR D2,X
PUSHR D2
LOADD D2,0
PUSHR D2
POP REFFFC
SETR D2,FFTWIDTH
MULTV D2,8
SETV D2,8
PUSHR D2
LOADD D2,0
PUSHR D2
POP REFFFC
SETR D2,FFTWIDTH
POP D3
MULTR D2,D3
POP D3
ADDR D2,D3
POP D5; return End
RETURNFUNC; Func[int CenterX(FFC)] Body End
SETR D4,SP; Func[int CenterY(FFC)] Body Start
LOADD D2,0; return Start
PUSHR D2
POP REFFFC
SETR D2,Y
PUSHR D2
LOADD D2,0
PUSHR D2
POP REFFFC
SETR D2,FFTHEIGHT
MULTV D2,8
SETV D2,8
PUSHR D2
LOADD D2,0
PUSHR D2
POP REFFFC
SETR D2,FFTHEIGHT
POP D3
MULTR D2,D3
POP D3
ADDR D2,D3
POP D5; return End
RETURNFUNC; Func[int CenterY(FFC)] Body End
PUSHV 0; Func[void NoAction()] Body Start
SETR D4,SP
LOADD D2,0; for() #74 LoopTest
COMPAREV D2,14
SETCMP D2,I<
COMPAREV D2,0
GOTOCMP 841,==; for() #74 TestFail?
LOADD D2,0; if() #249 Test AND for() #74 Body Start
COMPAREV D2,9
GOTOCMP 811,!=
GOTO 811
SETV D2,1
GOTO 812
SETV D2,0
COMPAREV D2,0
GOTOCMP 837,!=; Test 'if' AND continue 1; AND if() #249 Body
LOADD D2,0; if() #250 Test
COMPAREV D2,6
GOTOCMP 820,!=
GOTO 820
SETV D2,1
GOTO 821
SETV D2,0
COMPAREV D2,0
GOTOCMP 837,!=; Test 'if' AND continue 1; AND if() #250 Body
SETV D2,0
PUSHR D2
LOADD D2,0
PUSHR D2
POP D0
POP D2
SETR BUTTONINPUT,D2
SETV D2,0
PUSHR D2
LOADD D2,0
PUSHR D2
POP D0
POP D2
SETR BUTTONPRESS,D2; for() #74 Body End
LOADD D2,0; for() #74 LoopIncrement
ADDV D2,1
STORED D2,0
GOTO 800; for() #74 End
POP D5
RETURNFUNC; Func[void NoAction()] Body End
SETR D4,SP; Func[int VectorX(int, int)] Body Start
LOADD D2,0; InlineFunc[int Cos(int)] Params Start AND return Start
SETR D3,D2; InlineFunc[int Cos(int)] Params End
COSR D2,D3; InlineFunc[int Cos(int)] Body
PUSHR D2
LOADD D2,1
POP D3
MULTR D2,D3
POPARGS D5,0.0002; return End
RETURNFUNC; Func[int VectorX(int, int)] Body End
SETR D4,SP; Func[int VectorY(int, int)] Body Start
LOADD D2,0; InlineFunc[int Sin(int)] Params Start AND return Start
SETR D3,D2; InlineFunc[int Sin(int)] Params End
SINR D2,D3; InlineFunc[int Sin(int)] Body
PUSHR D2
LOADD D2,1
POP D3
MULTR D2,D3
POPARGS D5,0.0002; return End
RETURNFUNC; Func[int VectorY(int, int)] Body End
SETR D4,SP; Func[int Sign(int)] Body Start
LOADD D2,0; if() #119 Test
COMPAREV D2,0
SETCMP D2,I>
COMPAREV D2,0
GOTOCMP 871,==; Test 'if'
SETV D2,1; return Start AND if() #119 Body Start
GOTO 879; return End AND if() #119 Body End
LOADD D2,0; if() #120 Test AND if() #119 Else Start
COMPAREV D2,0
SETCMP D2,I<
COMPAREV D2,0
GOTOCMP 878,==; Test 'if'
SETV D2,-1; return Start AND if() #120 Body Start
GOTO 879; return End AND if() #120 Body End
SETV D2,0; return Start AND if() #120 Else Start
POP D5; return End AND if() #120 Else End AND if() #119 Else End
RETURNFUNC; Func[int Sign(int)] Body End


ALLOCATEGMEMV D2,4096; void run() Body Start
SETGVARR 0,D2
QUIT; void run() Body End