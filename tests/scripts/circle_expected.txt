Compiling 'circle.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Generating object code
Pass 6: Assembling
Success!
Compile finished with exit code '0' (success)

PUSHR d0; void run(int, int, int, int, int) Params
PUSHR d1
PUSHR d2
PUSHR d3
PUSHR d4
PUSHR REFFFC; void run(int, int, int, int, int) Body Start
PUSHARGSR d2,0.0002
SETR d4,SP
LOADD d2,4
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 16
LOADD d2,7
STORED d2,4
LOADD d2,5
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 26
SETV d3,360; InlineFunc[int Rand(int)] Params
RNDR d2,d3; InlineFunc[int Rand(int)] Body
STORED d2,5
LOADD d2,2
PUSHR d2
POP REFFFC
SETR d2,X
STORED d2,1
LOADD d2,2
PUSHR d2
POP REFFFC
SETR d2,Y
STORED d2,0
LOADD d2,5
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,5
LOADD d2,5
COMPAREV d2,-360
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 53
LOADD d2,5
ADDV d2,360
STORED d2,5
GOTO 63
LOADD d2,5
COMPAREV d2,360
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 63
LOADD d2,5
SUBV d2,360
STORED d2,5
LOADD d2,3
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 107
LOADD d2,1
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,5; InlineFunc[int Cos(int)] Params
SETR d3,d2
COSR d2,d3; InlineFunc[int Cos(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
LOADD d2,0
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,5; InlineFunc[int Sin(int)] Params
SETR d3,d2
SINR d2,d3; InlineFunc[int Sin(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
GOTO 190
LOADD d2,1
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,5; InlineFunc[int Cos(int)] Params
SETR d3,d2
COSR d2,d3; InlineFunc[int Cos(int)] Body
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3; InlineFunc[int Cos(int)] Params
SETR d3,d2
COSR d2,d3; InlineFunc[int Cos(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,5; InlineFunc[int Sin(int)] Params
SETR d3,d2
SINR d2,d3; InlineFunc[int Sin(int)] Body
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3; InlineFunc[int Sin(int)] Params
SETR d3,d2
SINR d2,d3; InlineFunc[int Sin(int)] Body
POP d3
MULTR d2,d3
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
LOADD d2,0
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,5; InlineFunc[int Sin(int)] Params
SETR d3,d2
SINR d2,d3; InlineFunc[int Sin(int)] Body
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3; InlineFunc[int Cos(int)] Params
SETR d3,d2
COSR d2,d3; InlineFunc[int Cos(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,5; InlineFunc[int Cos(int)] Params
SETR d3,d2
COSR d2,d3; InlineFunc[int Cos(int)] Body
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3; InlineFunc[int Sin(int)] Params
SETR d3,d2
SINR d2,d3; InlineFunc[int Sin(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
WAITFRAME; InlineFunc[void Waitframe()] Body
GOTO 36
POPARGS d5,0.0008
QUIT; void run(int, int, int, int, int) Body End


QUIT; void run() Body

