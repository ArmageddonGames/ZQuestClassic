name: Release

on:
  schedule:
    # Once a week at midnight EST on saturday.
    - cron: '0 4 * * 6'
  workflow_dispatch:
    inputs:
      number:
        description: Alpha version number. If not set, does a nightly build
        type: string
        required: false

jobs:
  check_date:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@v2
      - name: print latest_commit
        run: echo ${{ github.sha }}

      - id: should_run
        continue-on-error: true
        if: ${{ github.event_name == 'schedule' }}
        run: test -z $(git rev-list --after="1 week" ${{ github.sha }}) && echo "::set-output name=should_run::false"

  create_tag:
    runs-on: ubuntu-latest
    outputs:
      release_tag_name: ${{ steps.make-vars.outputs.release_tag_name }}
      release_name: ${{ steps.make-vars.outputs.release_name }}
    steps:
      - name: Get current time
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DD
      - id: make-vars
        run: |
          if [ '${{ github.event.inputs.number }}' != '' ]; then
            # Alpha
            echo "::set-output name=release_tag_name::2.55-alpha-${{ inputs.number }}"
            echo "::set-output name=release_name::2.55 Alpha ${{ inputs.number }}"
          else
            # Nightly
            echo "::set-output name=release_tag_name::nightly-${{ steps.current-time.outputs.formattedTime }}"
            echo "::set-output name=release_name::Nightly ${{ steps.current-time.outputs.formattedTime }}"
          fi

  release-win:
    needs:
      - check_date
      - create_tag
    if: ${{ needs.check_date.outputs.should_run != 'false' }}

    runs-on: windows-2022
    strategy:
      matrix:
        arrays: [
          {arch: x64, name: Windows x64},
          {arch: win32, name: Windows x86},
        ]
      fail-fast: false

    steps:
    - uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.arrays.arch }}

    - name: git clone
      uses: actions/checkout@v2

    - name: Install Dependencies
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: install .github/dependencies.config -y

    - name: Configure *.h.sig
      # Generate compilersig: MSVC 19.32.31332.0 [Should automatically fetch this somehow, instead of hardcoding... -Em]
      run: |
        echo '#define DEV_SIGNOFF "Build_Script"' > src/metadata/sigs/devsig.h.sig
        echo '#define __TIMEZONE__ "UTC"' >> src/metadata/sigs/devsig.h.sig
        echo '#define V_ZC_COMPILERSIG 1' >> src/metadata/sigs/compilersig.h.sig
        echo '#define COMPILER_V_FIRST 19' >> src/metadata/sigs/compilersig.h.sig
        echo '#define COMPILER_V_SECOND 32' >> src/metadata/sigs/compilersig.h.sig
        echo '#define COMPILER_V_THIRD 31332' >> src/metadata/sigs/compilersig.h.sig
        echo '#define COMPILER_V_FOURTH 0' >> src/metadata/sigs/compilersig.h.sig
        echo '#define COMPILER_NAME "MSVC"' >> src/metadata/sigs/compilersig.h.sig
        echo '#define COMPILER_VERSION "v17, 2022"' >> src/metadata/sigs/compilersig.h.sig
    # Alpha.
    - if: "${{ github.event.inputs.number != '' }}"
      run: |
        echo '#undef V_ZC_ALPHA' >> src/metadata/versionsig.h
        echo '#define V_ZC_ALPHA ${{inputs.number}}' >> src/metadata/versionsig.h
    # Nightly.
    - if: "${{ github.event.inputs.number == '' }}"
      run: |
        echo '#undef ZC_IS_NIGHTLY' >> src/metadata/versionsig.h
        echo '#define ZC_IS_NIGHTLY 0' >> src/metadata/versionsig.h

    - run: cmake . -A ${{ matrix.arrays.arch }}
    - run: cmake --build . --config Release
    - run: echo y | ./buildpack.bat
      working-directory: output/_auto
    - run: mv output/_auto/buildpack.zip "output/_auto/Zelda Classic ${{ matrix.arrays.name }}.zip"

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ needs.create_tag.outputs.release_name }}
        tag_name: ${{ needs.create_tag.outputs.release_tag_name }}
        files: "output/_auto/Zelda Classic ${{ matrix.arrays.name }}.zip"
        prerelease: true
        fail_on_unmatched_files: true
        generate_release_notes: true
