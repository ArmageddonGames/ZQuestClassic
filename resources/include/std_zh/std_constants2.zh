// Contains required constants for std.zh and ZScript functions.

#include "std_zh/std.cfg"
#include "std_zh/limits.zh"

//some type shorthands
typedef const int define;
typedef const int DEFINE;
typedef const float DEFINEF;
typedef const long DEFINEL;
typedef const bool DEFINEB;
typedef const untyped DEFINEU;

typedef const int CONFIG;
typedef const float CONFIGF;
typedef const long CONFIGL;
typedef const bool CONFIGB;
typedef const untyped CONFIGU; 

DEFINEF PI				= 3.1416;
DEFINEF PI2				= 6.2832;

DEFINEF RADIAN 			= 57.2958; //Multiplication value for converting radians to degrees. 
DEFINEF DEGREE			= 0.0174; //Multiplication value for converting degrees to radians.

DEFINE SQRT_ERROR			= 464; // The return value of SafeSqrt() if a negative value is passed. 
DEFINEF SQRT_MAX			= 463.4095; //The largest square root thet ZC can return.


DEFINEF MAX_CONSTANT		= 214747.9999 + (OPTION_VALUE(TRUE_INT_SIZE) ? 0.3648 : 0);
DEFINEF MIN_CONSTANT		= -214747.9999 - (OPTION_VALUE(TRUE_INT_SIZE) ? 0.3649 : 0);


DEFINE MAX_SCRIPTDRAWINGCOMMANDS	= 1000;

DEFINE MAX_INT 			= 214747 + (OPTION_VALUE(TRUE_INT_SIZE) ? 1 : 0);
DEFINE MIN_INT 			= -214747 - (OPTION_VALUE(TRUE_INT_SIZE) ? 1 : 0);
DEFINE MAX_FLOAT 			= 214747.9999 + (OPTION_VALUE(TRUE_INT_SIZE) ? 0.3648 : 0);
DEFINE MIN_FLOAT 			= -214747.9999 - (OPTION_VALUE(TRUE_INT_SIZE) ? 0.3649 : 0);
DEFINE MAX_SHORT             = 32767;
DEFINE MIN_SHORT             = -32768;
DEFINE MAX_BYTE              = 255;
DEFINE MIN_BYTE              = 0;

DEFINE MAX_COUNTER 			= WORD_MAX;
DEFINE MIN_COUNTER 			= WORD_MIN;

DEFINEL MAX_TIME             = 1944000000L; // Max value of [Game->Time].

DEFINE MIN_LWEAPON 			= 1; //Lowest numbered objects.
DEFINE MIN_EWEAPON 			= 1;
DEFINE MIN_NPC			= 1;
DEFINE MIN_ITEM			= 1;
DEFINE MAX_LWEAPON 			= 255; //1 to 255.
DEFINE MAX_EWEAPON 			= 255; //1 to 255.
DEFINE MAX_NPCS	 		= 255; //1 to 255.
DEFINE MAX_ITEM	 		= 255; //1 to 255;

DEFINE MIN_FFC			= 1;
DEFINE MAX_FFC			= 128;
DEFINE MIN_OBJ			= 1; //Short, const for loops.

DEFINE MIN_COUNTER_INDEX		= 0;
DEFINE MAX_COUNTER_INDEX		= 106;
DEFINE NUM_COUNTERS			= 107; //0 to 106

DEFINE MIN_COMBO_POS 		= 0;
DEFINE MAX_COMBO_POS 		= 175;
DEFINE NUM_COMBO_POS 		= 176;

DEFINE MAX_OBJECT_POINTERS 		= 255; //Max of any one type. 
DEFINE MAX_WEAPON_POINTERS 		= 510; //eweapon and lweapon combined.
DEFINE MAX_TOTAL_OBJECT_POINTERS 	= 1020; //Max shared, across the three types. 
DEFINE MAX_SPRITES 			= 1020; //npc, eweapon, and lweapon
DEFINE MAX_DRAWING 			= 1000; //Maximum number of simultaneous drawing commands.

DEFINE MIN_BITMAP_X			= 0; //Legal Bitmap Region for Drawing
DEFINE MAX_BITMAP_X			= 511;
DEFINE MIN_BITMAP_Y			= 0;
DEFINE MAX_BITMAP_Y		 	= 511;

DEFINE MAX_GLOBAL_VARIABLES		= 255;
DEFINE MAX_VARIABLES			= 255; //Vars in operation at any one time.
DEFINE MAX_BITSPERVARIABLE		= 18;

DEFINE MIN_ITEMDATA			= 0;
DEFINE MAX_ITEMDATA			= 255;
DEFINE NUM_ITEMDATA         = 256;

DEFINE NUM_LEVELS           = 512;

DEFINE MAX_ARRAY_POINTERS	 	= 4095; //Arrays in operation. 
DEFINE MAX_TILES 			= 214499;
DEFINE MAX_COMBOS			= 65279;
DEFINE MAX_STRINGS			= 65519; //Strings in String Editor

DEFINE HP_PER_HEART			= 16;
DEFINE MP_PER_BLOCK			= 32;

DEFINE MAX_MESSAGES			= 65535;
DEFINE MAX_MESSAGELENGTH		= 145; //Pass an array of (at least) this size to Game->GetMessage

DEFINE MAX_MAPS 			= 256;
DEFINE MAX_DMAPS			= 512;
DEFINE MAX_DMAPNAMELENGTH		= 21; //Size of arrays to pass to Game->GetDMapX
DEFINE MAX_DMAPTITLELENGTH		= 21;
DEFINE MAX_DMAPINTROLENGTH		= 73;

//FFC Size Limitations
DEFINE MAX_FFC_W 			= 4; //Four tiles wide
DEFINE MAX_FFC_H 			= 4; //Four tiles high
DEFINE MAX_FFC_EFFECT_W		= 64; //Sixty-four pixels wide.
DEFINE MAX_FFC_EFFECT_H		= 64; //Sixty four pixels high. 

//Default array sizes
DEFINE INIT_D_SIZE			= 8;
DEFINE INIT_A_SIZE			= 2;
DEFINE MISC_SIZE			= 32;
DEFINE NPC_ATTRIBUTES_SIZE		= 32;
DEFINE ITEM_ATTRIBUTES_SIZE		= 10;
DEFINE GAMEMISC_SIZE 		= 32;
DEFINE MAX_DEFENSE 			= 42;
DEFINE MAX_DEFENCE 			= 42;

DEFINE SCREEN_W 			= 256; // Width of the screen, in pixels.
DEFINE SCREEN_H 			= 176; // Height of the screen, in pixels.

DEFINE SCREEN_RIGHT 			= 255; //The rightmost screen pixel.
DEFINE SCREEN_LEFT 			= 0; //The leftmost screen pixel.
DEFINE SCREEN_TOP 			= 0; //The top screen pixel, below the subscreen.
DEFINE SCREEN_BOTTOM 		= 175; //The lowest screen pixel.  

DEFINE SUBSCREEN_BOTTOM		= -1; //Bottom of passive subscreen.
DEFINE SUBSCREEN_TOP 		= -56; //Top of passive subscreen.

DEFINE SCREEN_CENTER_X 		= 128;
DEFINE SCREEN_CENTRE_X 		= 128;
DEFINE SCREEN_CENTER_Y 		= 88; 
DEFINE SCREEN_CENTRE_Y 		= 88; 

//Defaults from Init Data
DEFINEF GRAVITY			= 0.16;
DEFINEF TERMINAL_VELOCITY		= 3.20;




//User-Defined Sprites Range 088 to 255



					//Equivalent Degrees and Radians for Cardinal Directions
//Degrees
DEFINE DEG_DIR_RIGHTUP 	= 315;
DEFINE DEG_DIR_UPRIGHT 	= 315;
DEFINE DEG_DIR_UP 		= 270;
DEFINE DEG_DIR_UPLEFT 	= 225;
DEFINE DEG_DIR_LEFTUP 	= 225;
DEFINE DEG_DIR_LEFT 		= 180;
DEFINE DEG_DIR_LEFTDOWN 	= 135;
DEFINE DEG_DIR_DOWNLEFT 	= 135;
DEFINE DEG_DIR_DOWN 		= 90;
DEFINE DEG_DIR_RIGHTDOWN 	= 45;
DEFINE DEG_DIR_DOWNRIGHT 	= 45;
DEFINE DEG_DIR_RIGHT 	= 0;

//Radians
DEFINEF RAD_DIR_RIGHTUP 	= 5.4978;
DEFINEF RAD_DIR_UPRIGHT 	= 5.4978;
DEFINEF RAD_DIR_UP 		= 4.7214;
DEFINEF RAD_DIR_UPLEFT 	= 3.927;
DEFINEF RAD_DIR_LEFTUP 	= 3.927;
DEFINEF RAD_DIR_LEFT 	= 3.1416; //3.1519; //Pi
DEFINEF RAD_DIR_LEFTDOWN 	= 2.3562; //Pi
DEFINEF RAD_DIR_DOWNLEFT 	= 2.3562; //Pi
DEFINEF RAD_DIR_DOWN 	= 1.5708;
DEFINEF RAD_DIR_RIGHTDOWN 	= 0.7854;
DEFINEF RAD_DIR_DOWNRIGHT 	= 0.7854;
DEFINEF RAD_DIR_RIGHT 	= 0; 






//! We need some better names for Extend constants. 









// Dummy weapons, for use with scripts.

// unimplemented


// Used with [lweapon::DeadState] and [eweapon::DeadState].
enum WeaponDeadState {
	WDS_NOHIT             = -10, // This value switches collision detection off. Deprecated by [lweapon::CollDetection].
	WDS_ALIVE             = -1,  // Weapon is currently 'alive'.
	WDS_DEAD              = 0,   // Use to dispose of most weapons.
	WDS_BEAMSHARDS        = 23,  // Used with [LW_BEAM] to shatter it into shards.
	WDS_ARROW             = 4,   // Used with [LW_ARROW] to make them 'wink out' using tile 54.
	WDS_BOUNCE            = 1    // Used with [LW_BRANG] or [LW_HOOKSHOT] to make it 'bounce off' and begin returning to Link.
};


//Default enemy IDs. Use with CreateNPC().

//NPC hit point values. Use with npc->HP to make the enemy die in a special manner.
DEFINE HP_SILENT = -1000;  // The enemy will die without their Death Sound playing.
DEFINE HP_GLEEOKHEAD = 1000; //Floating Gleeok heads have this as their HP value. 

//Walking Enemy Indices
DEFINE NPCA_WALK_SHOTTYPE 		= 0;
DEFINE NPCA_WALK_DEATHTYPE 		= 1;
DEFINE NPCA_WALK_DEATH_ATTR_1 	= 2;
DEFINE NPCA_WALK_DEATH_ATTR_2 	= 3;
DEFINE NPCA_WALK_DEATH_ATTR_3 	= 4;
DEFINE NPCA_WALK_EXTRA_SHOTS 	= 5;
DEFINE NPCA_WALK_TOUCHEFFECT 	= 6;
DEFINE NPCA_WALK_EFFECT_STR 		= 7;
DEFINE NPCA_WALK_WALKSTYLE 		= 8;
DEFINE NPCA_WALK_WALK_ATTRIB 	= 9;

	//Walking Attributes (Settings)
	//Shot Type
	DEFINE NPCA_WALK_1SHOT		= 0;
	DEFINE NPCA_WALK_ENDHALT		= 1;
	DEFINE NPCA_WALK_RAPIDFIRE		= 2;
	DEFINE NPCA_WALK_1FAST		= 3;
	DEFINE NPCA_WALK_1SLANT		= 4;
	DEFINE NPCA_WALK_3SHOTS		= 5;
	DEFINE NPCA_WALK_4SHOTS		= 6;
	DEFINE NPCA_WALK_5SHOTS		= 7;
	DEFINE NPCA_WALK_3FAST		= 8;
	DEFINE NPCA_WALK_BREATH		= 9;
	DEFINE NPCA_WALK_8SHOTS		= 10;
	DEFINE NPCA_WALK_SUMMON		= 11;
	DEFINE NPCA_WALK_SUMMONLAYER		= 12;
	//Death Type
	DEFINE NPCA_WALK_DEATH_NORMAL	= 0;
	DEFINE NPCA_WALK_DEATH_SPLITHIT	= 1;
	DEFINE NPCA_WALK_DEATH_SPLIT		= 2;
	DEFINE NPCA_WALK_DEATH_8SHOTS	= 3;
	DEFINE NPCA_WALK_DEATH_EXPLODE	= 4;
	DEFINE NPCA_WALK_DEATH_TRIBBLE	= 5;
	//Touch Effcts
	DEFINE NPCA_WALK_TOUCH_NORMAL	= 0;
	DEFINE NPCA_WALK_TOUCH_TEMPJINX	= 1;
	DEFINE NPCA_WALK_TOUCH_PERMJINX	= 2;
	DEFINE NPCA_WALK_TOUCH_CUREJINX	= 3;
	DEFINE NPCA_WALK_TOUCH_LOSEMAGIC	= 4;
	DEFINE NPCA_WALK_TOUCH_LOSERUPEES	= 5;
	DEFINE NPCA_WALK_TOUCH_DRUNK		= 6;
	DEFINE NPCA_WALK_TOUCH_EATITEMS	= 7;
	DEFINE NPCA_WALK_TOUCH_EATMAGIC	= 8;
	DEFINE NPCA_WALK_TOUCH_EATRUPEES	= 9;
	//Walkstyle
	DEFINE NPCA_WALK_WS_NORMAL		= 0;
	DEFINE NPCA_WALK_WS_ROPE		= 1;
	DEFINE NPCA_WALK_WS_VIRE		= 2;
	DEFINE NPCA_WALK_WS_POLSVOICE	= 3;

//Gohma Indices
DEFINE NPCA_GOHMA_SHOT_TYPE 			= 0;
	//Gohma Shot Type Settings
	DEFINE NPCA1_GOHMA_1SHOT		= 0;
	DEFINE NPCA_GOHMA_3SHOTS		= 1;
	DEFINE NPCA_GOHMA_BREATH		= 2;

//Wallmaster Indices
DEFINE NPCA_WALLMASTER_FIXED_DIST 		= 0;
	//Wallmaster Settings
	DEFINE NPCA_WALLMASTER_FIXED_DIST_ON = 0;
	DEFINE NPCA_WALLMASTER_FIXED_DIST_OFF = 1;

//Keese Indices
DEFINE NPCA_KEESE_MOVEMENT			= 0;
DEFINE NPCA_KEESE_DEATHTYPE 			= 1;
	//Movement Style
	DEFINE NPCA_KEESE_WS_KEESE 		= 0;
	DEFINE NPCA_KEESE_WS_BAT 		= 1;
	//Death Type
	DEFINE NPCA_KEESE_DEATH_NORMAL	= 0;
	DEFINE NPCA_KEESE_DEATH_TRIBBLE	= 1;

//Digdogger Indices
DEFINE NPCA_DIG_ID_1				= 0; //Digdogger ID 1
DEFINE NPCA_DIG_ID_2				= 1; //Digdogger ID 1
DEFINE NPCA_DIG_ID_3				= 2; //Digdogger ID 3
DEFINE NPCA_DIG_ID_4				= 3; //Digdogger ID 4
DEFINE NPCA_DIG_ENEM_1_QUANTITY		= 4; //Quantity of enemy 1.
DEFINE NPCA_DIG_ENEM_2_QUANTITY		= 5; //Quantity of enemy 1.
DEFINE NPCA_DIG_ENEM_3_QUANTITY		= 6; //Quantity of enemy 1.
DEFINE NPCA_DIG_ENEM_4_QUANTITY		= 7; //Quantity of enemy 1.
DEFINE NPCA_DIG_TYPE				= 8; //Type of digdogger
	//Digdogger Type Settings
	DEFINE NPCA_DIG_TYPE_NORMAL		= 0; //Digdogger main
	DEFINE NPCA_DIG_TYPE_KID		= 1; //Digdogger kid

//Dodongo Indices
DEFINE NPCA_DODONGO_TYPE		= 8; //Tyoe of Dodongo
	//Dodongo Type Settings
	DEFINE NPCA_DODONGO_TYPE_NES = 0; //NES Dodongo
	DEFINE NPCA_DODONGO_TYPE_BS 	= 1; //BS Dodongo

//Gleeok Indices
DEFINE NPCA_GLEEOK_HEADS 		= 0;
DEFINE NPCA_GLEEOK_HEAD_HP 		= 1;
DEFINE NPCA_GLEEOK_WEAPON 		= 2;
	//Gleeok Weapon Settings
	DEFINE NPCA_GLEEOK_1SHOT	= 0;
	DEFINE NPCA_GLEEOK_BREATH	= 2;
DEFINE NPCA_GLEEOK_CLK 		= 3; //48 by defaault. 
//IDK what this setting does. It is th Clk line param in esGleeok::esGleeok, but Clk is not used in the function. -Z
DEFINE NPCA_GLEEOK_NECK_SEGMENTS 	= 4;
DEFINE NPCA_GLEEOK_NECK_OFFSET_1 	= 5;
DEFINE NPCA_GLEEOK_NECK_OFFSET_2	= 6;
DEFINE NPCA_GLEEOK_HEAD_OFFSET  	= 7;
DEFINE NPCA_GLEEOK_HEAD_FLY_OFFSET 	= 8;

//Lanmola Indices
DEFINE NPCA_LANMOLA_SEGMENTS  	= 0;
DEFINE NPCA_LANMOLA_SEGMENT_LAG 	= 1;
DEFINE NPCA_LANMOLA_SEGMENT_DROPS 	= 2;
	//Lanmola Drop Settings
	DEFINE NPCA_LANMOLA_NODROP	= 0;
	DEFINE NPCA_LANMOLA_DROP	= 1;

//Leever Indices
DEFINE NPCA_LEVER_MOVE		= 0; //Engage Type
	//Leever Movement Settings
	DEFINE NPCA_LEEVER_PATH	= 0; //Link;s path
	DEFINE NPCA1_LEEVER_INPLACE	= 1; //In Place
	DEFINE NPCA_LEEVER_PATH2	= 0; //Link's path plus second (leever 3)
DEFINE NPCA_LEVER_SUBMERGE_CSET	= 1;
DEFINE NPCA_LEVER_EMERGE_STEP	= 2;

//Manhandla Indices
DEFINE NPCA_MANHANDLA_FRAMERATE	= 0;
DEFINE NPCA_MANHANDLA_SIZE 		= 1;
	//Manhandla Size Settings
	DEFINE NPCA_MANHANDLA_SMALL 	= 0; //4-heads
	DEFINE NPCA_MANHANDLA_LARGE 	= 1; //8-heads

//Moldorm Indices
DEFINE NPCA_MOLDORM_SEGMENTS 	= 0;
DEFINE NPCA_MOLDORM_SEGMENT_DROPS 	= 1;
	//Moldorm Drop Settings
	DEFINE NPCA_MOLDORM_NODROP	= 0; //no drop per degment
	DEFINE NPCA_MOLDORM_DROP	= 1; //drop per segment

//Patra Indices
DEFINE NPCA_PATRA_RINGEYES 		= 0;
DEFINE NPCA_PATRA_INNEREYES 		= 1;
DEFINE NPCA_PATRA_EYEHP 		= 2;
DEFINE NPCA_PATRA_EYE_MOVEMENT 	= 3;
	//Patra Eye Movmnt Settings
	DEFINE NPCA_PATRA_CIRCLE 	= 0;
	DEFINE NPCA_PATRA_OVAL 	= 1;
DEFINE NPCA_PATRA_SHOOTERS 		= 4;
	//Patra Shooters Settings
	DEFINE NPCA_PATRA_SHOOTERS_NONE = 0;
	DEFINE NPCA_PATRA_SHOOTERS_CORE = 1;
	DEFINE NPCA_PATRA_SHOOTERS_INNER = 2;
DEFINE NPCA_PATRA_PATTERN_ODDS 	= 5;
DEFINE NPCA_PATRA_PATTERN_CYCLES 	= 6;
DEFINE NPCA_PATRA_EYE_OFFSET 	= 7;
DEFINE NPCA_PATRA_EYE_CSET 		= 8;
DEFINE NPCA_PATRA_TYPE 		= 9;
	//Patra Type (Size) Settings
	DEFINE NPCA_PATRA_SMALL 	= 0; //1x1 core
	DEFINE NPCA_PATRA_LARGE 	= 1; //2x2 core

//Rock Indices
DEFINE NPCA_ROCK_SIZE 		= 9;
	//Rock Settings
	DEFINE NPCA_ROCK_SIZE_SMALL 	= 0; //1x1
	DEFINE NPCA_ROCK_SIZE_LARGE 	= 1; //1x1

//Wizzrobe Indices
DEFINE NPCA_WIZ_WALKSTYLE 		= 0;
	//Wizzrobe Walkstyle Settings
	DEFINE NPCA_WIZ_TELEPORT 	= 0;
	DEFINE NPCA_WIZ_PHASE 	= 1;
DEFINE NPCA_WIZ_SHOTTYPE 		= 1;
	//Wizzrobe Shot Type Settings
	DEFINE NPCA_WIZ_1SHOT 	= 0;
	DEFINE NPCA_WIZ_8SHOTS 	= 1;
	DEFINE NPCA_WIZ_SUMMON 	= 2;
	DEFINE NPCA_WIZ_SUMMON_LAYER = 3;
DEFINE NPCA_WIZ_SHOT_ATTR_1 		= 2;
DEFINE NPCA_WIZ_SOLIDCOMBOS 		= 3;
	//Wizzrobe Solid Combos Settings
	DEFINE NPCA_WIZ_SOLID_OK_NO 	= 0;
	DEFINE NPCA_WIZ_SOLID_OK_YES = 1;
DEFINE NPCA_WIZ_TELEPORT_DELAY 	= 4;

	
//Trap Indices
DEFINE NPCA_TRAP_DIR 		= 0;
	//Trap Dir Settings
	DEFINE NPCA_TRAP_DIR_4WAY 	= 0;
	DEFINE NPCA_TRAP_DIR_H 	= 1; //horizontal
	DEFINE NPCA_TRAP_DIR_V 	= 2; //vertical
DEFINE NPCA_TRAP_MOVE 		= 1;
	//Trap Movement Settings
	DEFINE NPCA_TRAP_MOVE_LOS 	= 0; //line of sight
	DEFINE NPCA_TRAP_MOVE_CONSTANT = 1;


//Tektite Indices
DEFINE NPCA_TEKTITE_JUMP_START 	= 0;
DEFINE NPCA_TEKTITE_JUMP_CONT 	= 1;
DEFINE NPCA_TEKTITE_JUMP_VELOCITY 	= 2;

//! These may be offset here, as MM defines:
//!	DEFINE NPCMF_SPAWNFLICKER = 0x0010; //Spawn animation = flicker (???) 
//!	in stdExtra.zh.  If so, the values should be offset to include this, ending at 0x2000. 
// Fixed







//! There are four fonts in the fonts.dat file that are absent here. -Z

//New Fonts for 2.54+


DEFINE MAX_FONT = 100;
DEFINE MIN_FONT = 0;
DEFINE NUM_FONTS = MAX_FONT+1;

//DEFINE TF_CENTRED           = 1; // in ./locale -- prints the string centered on (x)


// Render Targets. Used with Screen->"*RenderTarget" and Screen->"Bitmap" drawing functions.
enum RenderTarget
{
	RT_CURRENT                     = -2, // Used with Blit(). mode7(), and RevBlit() for the current RT as dest.
	RT_SCREEN                      = -1, // Draws to screen.
	RT_BITMAP0                     = 0,  // Draws to off-screen bitmap 0.
	RT_BITMAP1                     = 1,  // Draws to off-screen bitmap 1.
	RT_BITMAP2                     = 2,  // Draws to off-screen bitmap 2.
	RT_BITMAP3                     = 3,  // Draws to off-screen bitmap 3.
	RT_BITMAP4                     = 4,  // Draws to off-screen bitmap 4.
	RT_BITMAP5                     = 5,  // Draws to off-screen bitmap 5.
	RT_BITMAP6                     = 6,  // Draws to off-screen bitmap 6.
};

//Screen Flag categories. Flags from each category are ORed together, starting with the first flag
//See Screen Data dialog for what flags are contained in each category. Use in Screen->Flags
enum
{
	SF_ROOMTYPE,
	SF_VIEW,
	SF_SECRETS,
	SF_WARP,
	SF_ITEMS,
	SF_COMBOS,
	SF_SAVE,
	SF_FFC,
	SF_WHISTLE,
	SF_MISC,
	SF_LAST
};

//! These DMap Flag values do not return the expected results when compared via TraeS()ing what is anticipated!

//Screen Flag Roomtype
enum
{
	SFR_INTERIOR,
	SFR_DUNGEON,
	SFR_SIDEVIEW,
	
	SFR_LAST
};

//Screen Flag View
enum
{
	SFV_INVISLINK,
	SFV_NOLINKMARKER,
	SFV_NOSUBSCREEN,
	SFV_NOOFFSET,  //'...but don't offset'
	SFV_LAYER2BG,  //Layer 2 is Background
	SFV_LAYER3BG,
	SFV_DARKROOM, 
	SFV_DARK_DITHER, 
	SFV_DARK_TRANS, 
	
	SFV_LAST
};

//Screen Flag Secrets
enum
{
	SFS_BLOCKSHUT, //Block->Shutters
	SFS_TEMPSECRETS, //Secrets are temporary.
	SFS_TRIGPERM,  //All Triggers->Perm Secret
	SFS_ALLTRIGFLAGS,  //All triggers->16-31
	
	SFS_LAST
};

//Screen Flag Warp
enum
{
	SFW_AUTODIRECT, //Auto Warps are Direct
	SFW_SENDSIRECT, //Sensitive Warps are direct.
	SFW_MAZEPATHS,  //Use maze Path
	SFW_MAZEOVERRIDE,  //maze Overrides Sidewarps
	SFW_SPRITECARRY, //Sprites carry over. 
	SFW_DISABLE_MIRROR, //Disable Magic Mirror
	
	SFW_LAST
};


//Screen Flag Items
enum 
{
	SFI_HOLDUP, //Hold up item.
	SFI_FALLS, //Falls from ceiling
	SFI_SECRETSITEM,  //Secret reveals item
	SFI_ITEMSECRET,  //Item triggers secrets
	SFI_ITEMSECRETPERM, //Item triggering secrets is permanent
	SFI_ITEMRETURNS, //Regular item always returns
	SFI_SPECIALITEMRETURNS, //Special item always returns
	
	SFI_LAST
};

//Screen Flag Combos
enum
{
	SFC_MIDAIR, //Combos affect midair Link
	SFC_CYCLEINIT, //Cycle combos on screen init.
	SFC_IGNOREBOOTS,  //Damage combos ignore boots. 
	SFC_TOGGLERINGS,  //Toggle 'Rings Affect Combos'
	
	SFC_LAST
};

//Screen Flag Save
enum
{
	SFSV_SAVECONTHERE, //Save Point->ontinue here.
	SFSV_SAVEONENTRY, //Save game on entry.
	SFSV_CONTHERE,  //Comtinue here.
	SFSV_NOCONTINUEWARP,  //No continue Here after warp. 
	
	SFSV_LAST
};

//Screen Flags FFC
enum
{
	SFF_WRAP,   //Freeform Combos Wrap Around
	SFF_NOCARRYOVER, //No FFC carry over. 
	
	SFF_LAST
};

//Screen Flags Whistle
enum
{
	SFWH_STAIRS = 0, //Whistle->Stairs
	SFWH_PALCHANGE, //Whistle->Palette Change
	SFWH_DRYLAKE,  //Whistle->Dry lake
	
	SFWH_LAST
};

//Old constants, use the ones above.
DEFINE SFW_STAIRS = SFWH_STAIRS; //Whistle->Stairs
DEFINE SFW_PALCHANGE = SFWH_PALCHANGE; //Whistle->Palette Change
DEFINE SFW_DRYLAKE = SFWH_DRYLAKE;  //Whistle->Dry lake

//Misc. Screen flags. Bitshift 1 by the constant and OR to use.
enum
{
	SFM_ALLOW_LADDER,   //Toggle 'Allow Ladder'
	SFM_NO_DIVING,      //Toggle 'No Diving' 
	SFM_SCRIPT1,         //General use 1 (Scripts)
	SFM_SCRIPT2,         //General use 2 (Scripts)
	SFM_SCRIPT3,        //General use 3 (Scripts)
	SFM_SCRIPT4,        //General use 4 (Scripts)
	SFM_SCRIPT5,        //General use 5 (Scripts)

	SFM_LAST
};


// See [ScreenEnemyFlagIndex].
enum ScreenEnemyFlagSpawn
{
	SEFSP_ZORA,
	SEFSP_CORNERTRAP,
	SEFSP_MIDDLETRAP,
	SEFSP_ROCK,
	SEFSP_SHOOTER,
	
	SEFSP_LAST
};

// See [ScreenEnemyFlagIndex].
enum ScreenEnemyFlagList1
{
	SEFL1_RINGLEADER,
	SEFL1_CARRYITEM,
	SEFL1_INVIS,
	SEFL1_BOSS,
	SEFL1_TRAPS_IGNORE_SOLID,
	
	SEFL1_LAST
};

// See [ScreenEnemyFlagIndex].
enum ScreenEnemyFlagList2
{
	SEFL2_ALWAYSRET,
	SEFL2_ENEMIES_ITEM,
	SEFL2_ENEMEIS_SECRET,
	SEFL2_ENEMIES_SECRET_PERM,
	SEFL2_CHAIN_ENEMIES_TRIGGERS,
	
	SEFL2_LAST
};



// Used with [dmapdata::Flagset].
enum DMapFlag
{
	DMFS_CAVESNOTCELLARS,     //Use caves instead of item cellars
	DMFS_3STAIRWARPS,         //Allow 3-stair warps
	DMFS_WWIND,               //Allow whistle whirlwinds
	DMFS_GUYCAVES,            //Special rooms and guys are in caves only
	DMFS_NOCOMPASS,           //Don't display compass marker in minimap
	DMFS_WAVY,                //Underwater wave effect
	DMFS_WWINDRET,            //Whistle whirlwind returns Link to beginning
	DMFS_ALWAYSINTROMSG,      //Always display intro string
	DMFS_VIEWMAP,             //View overworld map by pressing 'Map'
	DMFS_DMAPMAP,             //...But only show screens marked in minimap
	DMFS_MINIMAPCOLORFIX,     //Use minimap foreground color 2
	DMFS_MINIMAPCOLOURFIX = DMFS_MINIMAPCOLORFIX,    //Use minimap foreground color 2
	DMFS_SCRIPT1,             //DMap Script Flag 1
	DMFS_SCRIPT2,             //DMap Script Flag 2
	DMFS_SCRIPT3,             //DMap Script Flag 3
	DMFS_SCRIPT4,             //DMap Script Flag 4
	DMFS_SCRIPT5,             //DMap Script Flag 5
	DMFS_RESERVED,            //RESERVED DO NOT USE
	DMFS_LAYER3ISBACKGROUND,  //Layer 3 is Background
	DMFS_LAYER2ISBACKGROUND,  //Layer 2 is Background
	DMFS_TRUECELLARENEMIES,   //True Cellar Enemies
	DMFS_BUNNY,               //Become Bunny with no Pearl
	DMFS_MIRRORCONTINUE,      //Mirror Continues instead of Warping
	DMFS_MAX
};

//Screen states. Use these with Screen->State[], etc.
enum ScreenState {
	ST_DOORUP             = 0, // The locked/bomb door has been permanently unlocked/bombed
	ST_DOORDOWN           = 1, // The locked/bomb door has been permanently unlocked/bombed
	ST_DOORLEFT           = 2, // The locked/bomb door has been permanently unlocked/bombed
	ST_DOORRIGHT          = 3, // The locked/bomb door has been permanently unlocked/bombed
	ST_ITEM               = 4, // If set, the item is gone
	ST_SPECIALITEM        = 5, // If set, the Cave/Item Cellar/Dive For Item/Armos item is gone
	ST_ENEMYNORETURN      = 6, // If set, enemies won't return
	ST_TEMPNORETURN       = 7, // If set, enemies won't return. This is automatically unset when you leave the DMap
	ST_LOCKBLOCK          = 8, // The lock block on the screen has been triggered
	ST_BOSSLOCKBLOCK      = 9, // The boss lock block on the screen has been triggered
	ST_CHEST              = 10, // The unlocked chest on this screen has been opened
	ST_LOCKEDCHEST        = 11, // The locked chest on this screen has been opened
	ST_BOSSCHEST          = 12, // The boss chest on this screen has been opened
	ST_SECRET             = 13, // Screen Secrets have been made permanent
	ST_VISITED            = 14, // If set, this screen will appear on the Overworld Map
	ST_LIGHTBEAM          = 15  // If set, the light triggers on the screen have been triggered
};






//2.54+ Flags















// Used with [Hero->SetItemSlot].
enum ItemSlot { ITM_SLOT_B, ITM_SLOT_A, ITM_SLOT_X, ITM_SLOT_Y };


//MapData

//45 to 127 unused. 





DEFINEF DIR16_DEG_INCREMENT = 22.5; //Number of degrees per 1/16 rotation

DEFINEF DIR16_DEG_UP 		= 270;
DEFINEF DIR16_DEG_UPUPLEFT = 247.5;

DEFINEF DIR16_DEG_UPLEFT 	= 225;
DEFINEF DIR16_DEG_LEFTLEFTUP = 202.5;
DEFINEF DIR16_DEG_LEFT 		= 180;
DEFINEF DIR16_DEG_LEFTLEFTDOWN = 157.5;
DEFINEF DIR16_DEG_LEFTDOWN 	= 135;
DEFINEF DIR16_DEG_DOWNDOWNLEFT = 112.5;
DEFINEF DIR16_DEG_DOWN 		= 90;
DEFINEF DIR16_DEG_DOWNDOWNRIGHT = 67.5;
DEFINEF DIR16_DEG_RIGHTDOWN 	= 45;
DEFINEF DIR16_DEG_RIGHTRIGHTDOWN = 22.5;
DEFINEF DIR16_DEG_RIGHT 	= 0;
DEFINEF DIR16_DEG_RIGHTUPUP  = 292.5;
DEFINEF DIR16_DEG_RIGHTUP 	= 315;
DEFINEF DIR16_DEG_RIGHTRIGHTUP 	= 337.5;


DEFINEF DIR16_RADS_UP 		= 4.7214;
DEFINEF DIR16_RADS_UPUPLEFT = 4.3197;
DEFINEF DIR16_RADS_UPLEFT 	= 3.927;
DEFINEF DIR16_RADS_LEFTLEFTUP = 3.5343;
DEFINEF DIR16_RADS_LEFT 	= 3.1416; //3.1519; //Pi
DEFINEF DIR16_RADS_LEFTLEFTDOWN = 2.7489;
DEFINEF DIR16_RADS_LEFTDOWN 	= 2.3562; 
DEFINEF DIR16_RADS_DOWNDOWNLEFT = 1.9635;
DEFINEF DIR16_RADS_DOWN 	= 1.5708;
DEFINEF DIR16_RADS_DOWNDOWNRIGHT = 1.1781;
DEFINEF DIR16_RADS_RIGHTDOWN 	= 0.7854;
DEFINEF DIR16_RADS_RIGHTRIGHTDOWN = 0.3927; 
DEFINEF DIR16_RADS_RIGHT 	= 0; 
DEFINEF DIR16_RADS_RIGHTRIGHTUP = 5.8905;
DEFINEF DIR16_RADS_RIGHTUP 	= 5.4978;
DEFINEF DIR16_RADS_RIGHTUPUP 	= 5.1141;

// DMap Types for use with [dmapdata::Type]
enum DMapType {
	DMAP_DUNGEON,
	DMAP_OVERWORLD,
	DMAP_CAVE,
	DMAP_BSOVERWORLD
};




//Old name for compat of old scripts

//Manual Sprite Carryover

//Prevent Stepping forward in dungeon screens (experimental)


//MIDI values, used for 'Screen->MIDI', 'dmapdata->MIDI', 'mapdata->MIDI', 'Audio->PlayMIDI'
enum
{
    MIDI_USE_DMAP = -4, //ONLY for 'Screen->MIDI' and 'mapdata->MIDI'
    MIDI_NONE,
    MIDI_OVERWORLD,
    MIDI_DUNGEON,
    MIDI_LEVEL9 //==0, cannot be played by 'Audio->PlayMIDI'
};

// Engine processes that can be paused. Used with [Game->Suspend].
enum SuspendType { 
	
	// Combo animation
	susptCOMBOANIM,
	
	// Main Sprite animation by type
	susptGUYS, susptLWEAPONS, susptEWEAPONS, susptITEMS, susptLINK, 
	
	// FFC (e.g. movement, changers, but not scripts)
	susptUPDATEFFC,
	
	// Sprite subclasses
	susptDECORATIONS, susptPARTICLES, //sprite subclasses
	
	// Palette events
	susptPALCYCLE, susptLAKES, //lake dries up
	
	// game system events
	susptCOLLISIONS, susptCONTROLSTATE, susptONEFRAMECONDS, susptSCRIPDRAWCLEAR, susptQUAKE,

	// Script Types
	susptGLOBALGAME, susptNPCSCRIPTS, susptLWEAPONSCRIPTS, susptEWEAPONSCRIPTS, susptITEMSPRITESCRIPTS,

	susptFFCSCRIPTS, susptLINKACTIVE, susptITEMSCRIPTENGINE, susptDMAPSCRIPT, susptSCREENSCRIPTS,
	susptSUBSCREENSCRIPTS, susptCOMBOSCRIPTS,
	
	// Moving items
	susptCONVEYORSITEMS = 60, susptDRAGGINGITEM, susptROAMINGITEM,
	// Misc
	susptLENS, susptHOOKSHOT, susptMOVINGBLOCKS, susptMAGICCAST, susptSCREENDRAW,

	susptLAST,
};



// Used with [messagedata::Flags].
enum MessageFlag
{
	MSGFLAG_WRAP,         // If the text wraps around the bounding box
	MSGFLAG_CONT,         // If the message is the continuation of a previous one
	MSGFLAG_CENTER,       // Reserved
	MSGFLAG_RIGHT,        // Reserved
	MSGFLAG_FULLTILE,     // If the background tile should be treated as the UL of a tile block,
	                      // instead of the UL of a 2x2 adjustable frame
	MSGFLAG_TRANS_BG,     // If the background should be translucent
	MSGFLAG_TRANS_FG,     // If the text should be translucent
};

// TODO ! delete this, but we need a `bool mapdata::Flagset[]` ...
//Flags for GetMapscreenFlag, SetMapscreenFlag
enum mapscreenflags
{
	// Room Types
	MSF_INTERIOR, MSF_DUNGEON, MSF_SIDEVIEW,
	
	// View
	MSF_INVISLINK, MSF_NOLINKMARKER, MSF_NOSUBSCREEN, MSF_NOOFFSET, MSF_LAYER3BG,
	MSF_LAYER2BG, MSF_DARKROOM,
	
	// Secrets
	MSF_BLOCKSHUT, MSF_TEMPSECRETS, MSF_TRIGPERM, MSF_ALLTRIGFLAGS,
	
	// Warp
	MSF_AUTODIRECT, MSF_SENDSIRECT, MSF_MAZEPATHS, MSF_MAZEOVERRIDE, MSF_SPRITECARRY,
	MSF_DIRECTTIMEDWARPS, MSF_SECRETSISABLETIMEWRP, MSF_RANDOMTIMEDWARP,
	
	// Item
	MSF_HOLDUP, MSF_FALLS,
	
	// Combo
	MSF_MIDAIR, MSF_CYCLEINIT, MSF_IGNOREBOOTS, MSF_TOGGLERINGS,
	
	// Save
	MSF_SAVECONTHERE, MSF_SAVEONENTRY, MSF_CONTHERE, MSF_NOCONTINUEWARP,
	
	// FFC
	MSF_WRAPFFC, MSF_NOCARRYOVERFFC, 
	
	// Whistle 
	MSF_STAIRS, MSF_PALCHANGE, MSF_DRYLAKE,
	
	// Enemies
	MSF_INVISIBLEENEMIES, MSF_TRAPS_IGNORE_SOLID, MSF_EMELIESALWAYSRETURN, MSF_ENEMIES_ITEM, MSF_ENEMEIS_SECRET,
	MSF_ENEMIES_SECRET_PERM,
	
	// Misc
	MSF_ALLOW_LADDER, MSF_NO_DIVING, MSF_SFXONENTRY, MSF_LENSEFFECT,
		 
	//Custom / Script 
	MSF_SCRIPT1,
	MSF_CUSTOM1 = MSF_SCRIPT1,
	MSF_SCRIPT2,
	MSF_CUSTOM2 = MSF_SCRIPT2,
	MSF_SCRIPT3,
	MSF_CUSTOM3 = MSF_SCRIPT3,
	MSF_SCRIPT4,
	MSF_CUSTOM4 = MSF_SCRIPT4,
	MSF_SCRIPT5,
	MSF_CUSTOM5 = MSF_SCRIPT5,
	MSF_LAST
};

// @deprecated Use [MoveFlag] instead.
enum HeroMoveFlag
{
	HEROMV_OBEYS_GRAVITY,
	HEROMV_CAN_PITFALL,
	HEROMV_NO_FAKE_Z = 8,
	HEROMV_NO_REAL_Z
};

// @deprecated Use [MoveFlag] instead.
enum ItemspriteMoveFlag
{
	ITEMMV_OBEYS_GRAVITY,
	ITEMMV_CAN_PITFALL,
	ITEMMV_NO_FAKE_Z = 8,
	ITEMMV_NO_REAL_Z
};

// @deprecated Use [MoveFlag] instead.
enum WeaponMoveFlag
{
	WPNMV_OBEYS_GRAVITY,
	WPNMV_CAN_PITFALL,
	WPNMV_NO_FAKE_Z = 8,
	WPNMV_NO_REAL_Z
};

enum MoveFlag
{
	MV_OBEYS_GRAVITY,
	MV_CAN_PITFALL,
	MV_NO_FAKE_Z = 8,
	MV_NO_REAL_Z
};


// "special" walk flags
enum NPCWalkType
{
	SPW_NONE, SPW_DOOR, SPW_CLIPRIGHT, SPW_FLOATER, SPW_TRAP, SPW_HALFSTEP, 
	SPW_WATER, SPW_WIZZROBE, SPW_CLIPBOTTOMRIGHT
};

enum NPCMoveStatus
{
	NPCMS_PAUSED, NPCMS_SPEEDUP, NPCMS_NORMAL, NPCMS_SLOWDOWN
};


enum DitherType
{
	DITH_CHECKER, DITH_CHECKER_INV,
	DITH_CRISS_CROSS, DITH_CRISS_CROSS_INV,
	DITH_DIAG_ULDR, DITH_DIAG_ULDR_INV,
	DITH_DIAG_URDL, DITH_DIAG_URDL_INV,
	DITH_ROW, DITH_ROW_INV,
	DITH_COL, DITH_COL_INV,
	DITH_DOTS, DITH_DOTS_INV,
	DITH_GRID, DITH_GRID_INV,
	DITH_STATIC, DITH_STATIC_INV,
	DITH_STATIC2, DITH_STATIC2_INV,
	DITH_STATIC3, DITH_STATIC3_INV,
	DITH_DOTS2, DITH_DOTS2_INV,
	DITH_DOTS3, DITH_DOTS3_INV,
	DITH_DOTS4, DITH_DOTS4_INV,
	DITH_MAX
};

enum BottleFlag
{
	BTF_REVIVE,
	BTF_USEWHENFULL,
	BTF_CURESWORDJINX,
	BTF_CUREITEMJINX,
	BTF_CURESHIELDJINX,
	BTF_MAX
};

enum ComboGenFlag
{
	GENFLAG_HOOKSHOTTABLE,
	GENFLAG_SWITCHHOOKABLE,
	GENFLAG_MAX
};

enum InteractButton
{
	INTBTN_A,
	INTBTN_B,
	INTBTN_L,
	INTBTN_R,
	INTBTN_EX1,
	INTBTN_EX2,
	INTBTN_EX3,
	INTBTN_EX4,

	INTBTN_X = INTBTN_EX1,
	INTBTN_Y = INTBTN_EX2,
};

DEFINE BIT_INTBTN_A = 1b << INTBTN_A;
DEFINE BIT_INTBTN_B = 1b << INTBTN_B;
DEFINE BIT_INTBTN_L = 1b << INTBTN_L;
DEFINE BIT_INTBTN_R = 1b << INTBTN_R;
DEFINE BIT_INTBTN_EX1 = 1b << INTBTN_EX1;
DEFINE BIT_INTBTN_EX2 = 1b << INTBTN_EX2;
DEFINE BIT_INTBTN_EX3 = 1b << INTBTN_EX3;
DEFINE BIT_INTBTN_EX4 = 1b << INTBTN_EX4;

DEFINE BIT_INTBTN_X = BIT_INTBTN_EX1;
DEFINE BIT_INTBTN_Y = BIT_INTBTN_EX2;

enum ItemButton
{
	ITMBTN_A,
	ITMBTN_B,
	ITMBTN_X,
	ITMBTN_Y,
	NUM_ITMBTN
};

enum ComboTriggerFlag
{
	TRIGFLAG_SWORD, //Weapons->LWeapons->Sword - Triggered by Sword LWeapons
	TRIGFLAG_SWORDBEAM, //Weapons->LWeapons->Sword Beam - Triggered by Sword Beam LWeapons
	TRIGFLAG_BRANG, //Weapons->LWeapons->Boomerang - Triggered by Boomerang LWeapons
	TRIGFLAG_BOMB, //Weapons->LWeapons->Bomb Boom - Triggered by Bomb (explosion) LWeapons
	TRIGFLAG_SBOMB, //Weapons->LWeapons->Super Bomb Boom - Triggered by Super Bomb (explosion) LWeapons
	TRIGFLAG_LITBOMB, //Weapons->LWeapons->Placed Bomb - Triggered by Bomb (placed) LWeapons
	TRIGFLAG_LITSBOMB, //Weapons->LWeapons->Placed Super Bomb - Triggered by Super Bomb (placed) LWeapons
	TRIGFLAG_ARROW, //Weapons->LWeapons->Arrow - Triggered by Arrow LWeapons
	TRIGFLAG_FIRE, //Weapons->LWeapons->Fire - Triggered by Fire LWeapons
	TRIGFLAG_WHISTLE, //Weapons->LWeapons->Whistle - Triggered by Whistle LWeapons (whistle played)
	TRIGFLAG_BAIT, //Weapons->LWeapons->Bait - Triggered by Bait LWeapons
	TRIGFLAG_WAND, //Weapons->LWeapons->Wand - Triggered by Wand Handle LWeapon
	TRIGFLAG_MAGIC, //Weapons->LWeapons->Magic - Triggered by Magic LWeapons
	TRIGFLAG_WIND, //Weapons->LWeapons->Wind - Triggered by Wind LWeapons
	TRIGFLAG_REFMAGIC, //Weapons->LWeapons->Refl. Magic - Triggered by Reflected Magic LWeapons
	TRIGFLAG_REFFIREBALL, //Weapons->LWeapons->Refl. Fireball - Triggered by Reflected Fireball LWeapons
	TRIGFLAG_REFROCK, //Weapons->LWeapons->Refl. Rock - Triggered by Reflected Rock LWeapons
	TRIGFLAG_HAMMER, //Weapons->LWeapons->Hammer - Triggered by Hammer LWeapon
	TRIGFLAG_RESET_ANIM, //Effects->Reset Anim - On trigger, reset the animation of the combo.
	TRIGFLAG_INVERT_PROXIMITY, //Other->Invert Proximity Req. - Proximity requirement is reversed
	TRIGFLAG_BTN_TOP, //Other->Btn: Top - Triggered by button press from above
	TRIGFLAG_BTN_BOTTOM, //Other->Btn: Bottom - Trigger by button press from below
	TRIGFLAG_BTN_LEFT, //Other->Btn: Left - Trigger by button press from left
	TRIGFLAG_BTN_RIGHT, //Other->Btn: Right - Trigger by button press from right
	TRIGFLAG_INVERT_MIN_MAX, //Weapons->LWeapons->Max Level Instead - Treat the 'TriggerLevel' as a max instead of a min
	TRIGFLAG_STEP, //Other->'Step->' - Triggered by 'Step->'
	TRIGFLAG_STEP_SENS, //Other->'Step-> (Sensitive)' - Triggered by 'Step->Sensitive'
	TRIGFLAG_SHUTTER, //Other->'Shutter->' - Triggered by 'Shutter->'
	TRIGFLAG_CTYPE_EFFECTS, //Effects->'->ComboType Effects' - On trigger, cause the combo's type-related effects to occur. (ex: opening a chest)
	TRIGFLAG_ONLY_GENTRIG, //Other->'Only Gen Triggers' - Don't allow the combo to trigger via it's normal trigger methods (ex: bush via slashing)
	TRIGFLAG_KILL_WEAPON, //Weapons->Effects->'Kill Triggering Weapon' - If triggered by a weapon, kill the weapon.
	TRIGFLAG_EW_FIREBALL, //Weapons->EWeapons->Fireball - Triggered by Fireball EWeapons
	TRIGFLAG_HOOKSHOT, //Weapons->LWeapons->Hookshot - Triggered by Hookshot LWeapons
	TRIGFLAG_SPARKLE, //Weapons->LWeapons->Sparkle - Triggered by Sparkle LWeapons
	TRIGFLAG_BYRNA, //Weapons->LWeapons->Byrna - Triggered by Byrna LWeapons
	TRIGFLAG_REFBEAM, //Weapons->LWeapons->Refl. Beam - Triggered by Reflected Beam LWeapons
	TRIGFLAG_STOMP, //Weapons->LWeapons->Stomp - Triggered by Stomp Boot LWeapons
	TRIGFLAG_SCRIPT1, //Weapons->LWeapons->Custom Weapon 1 - Triggered by 'Custom Weapon 01' LWeapons
	TRIGFLAG_SCRIPT2, //Weapons->LWeapons->Custom Weapon 2 - Triggered by 'Custom Weapon 02' LWeapons
	TRIGFLAG_SCRIPT3, //Weapons->LWeapons->Custom Weapon 3 - Triggered by 'Custom Weapon 03' LWeapons
	TRIGFLAG_SCRIPT4, //Weapons->LWeapons->Custom Weapon 4 - Triggered by 'Custom Weapon 04' LWeapons
	TRIGFLAG_SCRIPT5, //Weapons->LWeapons->Custom Weapon 5 - Triggered by 'Custom Weapon 05' LWeapons
	TRIGFLAG_SCRIPT6, //Weapons->LWeapons->Custom Weapon 6 - Triggered by 'Custom Weapon 06' LWeapons
	TRIGFLAG_SCRIPT7, //Weapons->LWeapons->Custom Weapon 7 - Triggered by 'Custom Weapon 07' LWeapons
	TRIGFLAG_SCRIPT8, //Weapons->LWeapons->Custom Weapon 8 - Triggered by 'Custom Weapon 08' LWeapons
	TRIGFLAG_SCRIPT9, //Weapons->LWeapons->Custom Weapon 9 - Triggered by 'Custom Weapon 09' LWeapons
	TRIGFLAG_SCRIPT10, //Weapons->LWeapons->Custom Weapon 10 - Triggered by 'Custom Weapon 10' LWeapons
	TRIGFLAG_AUTO, //Other->Always Triggered - Triggered automatically, every frame.
	TRIGFLAG_TRIG_SECRETS, //Effects->Triggers Secrets - Triggered by 'Secrets->'
	TRIGFLAG_INVERT_ITEMREQ, //Counters/Items->Invert Item Req - Invert the item requirement (require NOT having the item)
	TRIGFLAG_CONSUME_ITEMREQ, //Counters/Items->Consume Item Req - On trigger, consume the required item.
	TRIGFLAG_COUNTER_GE, //Counters/Items->'Require >=' - Only trigger if the counter has >= the specified amount
	TRIGFLAG_COUNTER_LT, //Counters/Items->'Require <' - Only trigger if the counter has < the specified amount
	TRIGFLAG_COUNTER_EAT, //Counters/Items->Consume Amount - Consume the specified amount from the counter. Negative amounts add.
	TRIGFLAG_COUNTER_NOT_ONLY_TRIG_EAT, //Counters/Items->Consume w/o trig - Consume the specified amount from the counter even if the combo failed to trigger.
	TRIGFLAG_LIGHTON, //Other->'Light On->' - Triggered by a lightbeam.
	TRIGFLAG_LIGHTOFF, //Other->'Light Off->' - Triggered by lack of a lightbeam.
	TRIGFLAG_PUSH, //Other->'Push->' - Triggered when the [Hero] pushes into the combo.
	TRIGFLAG_LENS_ON, //Other->'Lens On->' - Triggered when the lens is revealing.
	TRIGFLAG_LENS_OFF, //Other->'Lens Off->' - Triggered when the lens is not revealing.
	TRIGFLAG_EW_ARROW, //Weapons->EWeapons->Arrow - Triggered by Arrow EWeapons
	TRIGFLAG_EW_BRANG, //Weapons->EWeapons->Boomerang - Triggered by Boomerang EWeapons
	TRIGFLAG_EW_SWORD, //Weapons->EWeapons->Sword - Triggered by Sword EWeapons
	TRIGFLAG_EW_ROCK, //Weapons->EWeapons->Rock - Triggered by Rock EWeapons
	TRIGFLAG_EW_SCRIPT1, //Weapons->EWeapons->Custom Weapon 1 - Triggered by 'Custom Weapon 01' EWeapons
	TRIGFLAG_EW_SCRIPT2, //Weapons->EWeapons->Custom Weapon 2 - Triggered by 'Custom Weapon 02' EWeapons
	TRIGFLAG_EW_SCRIPT3, //Weapons->EWeapons->Custom Weapon 3 - Triggered by 'Custom Weapon 03' EWeapons
	TRIGFLAG_EW_SCRIPT4, //Weapons->EWeapons->Custom Weapon 4 - Triggered by 'Custom Weapon 04' EWeapons
	TRIGFLAG_EW_SCRIPT5, //Weapons->EWeapons->Custom Weapon 5 - Triggered by 'Custom Weapon 05' EWeapons
	TRIGFLAG_EW_SCRIPT6, //Weapons->EWeapons->Custom Weapon 6 - Triggered by 'Custom Weapon 06' EWeapons
	TRIGFLAG_EW_SCRIPT7, //Weapons->EWeapons->Custom Weapon 7 - Triggered by 'Custom Weapon 07' EWeapons
	TRIGFLAG_EW_SCRIPT8, //Weapons->EWeapons->Custom Weapon 8 - Triggered by 'Custom Weapon 08' EWeapons
	TRIGFLAG_EW_SCRIPT9, //Weapons->EWeapons->Custom Weapon 9 - Triggered by 'Custom Weapon 09' EWeapons
	TRIGFLAG_EW_SCRIPT10, //Weapons->EWeapons->Custom Weapon 10 - Triggered by 'Custom Weapon 10' EWeapons
	TRIGFLAG_EW_MAGIC, //Weapons->EWeapons->Magic - Triggered by Magic EWeapons
	TRIGFLAG_EW_BBLAST, //Weapons->EWeapons->Bomb Blast - Triggered by Bomb (explosion) EWeapons
	TRIGFLAG_EW_SBBLAST, //Weapons->EWeapons->SBomb Blast - Triggered by Super Bomb (explosion) EWeapons
	TRIGFLAG_EW_LITBOMB, //Weapons->EWeapons->Lit Bomb - Triggered by Bomb (unexploded) EWeapons
	TRIGFLAG_EW_LITSBOMB, //Weapons->EWeapons->Lit SBomb - Triggered by Super Bomb (unexploded) EWeapons
	TRIGFLAG_EW_FIRETRAIL, //Weapons->EWeapons->Fire Trail - Triggered by Fire Trail EWeapons
	TRIGFLAG_EW_FLAME, //Weapons->EWeapons->Flame - Triggered by Flame EWeapons
	TRIGFLAG_EW_WIND, //Weapons->EWeapons->Wind - Triggered by Wind EWeapons
	TRIGFLAG_EW_FLAME2, //Weapons->EWeapons->Flame 2 - Triggered by Flame 2 EWeapons
	TRIGFLAG_SPECIAL_ITEM, //States/Spawning->Spawns Special Item - The spawned item will be the special item
	TRIGFLAG_EXST_ITEM, //States/Spawning->Trigger ExState after item pickup - Trigger ExState after picking up the spawned item
	TRIGFLAG_EXST_ENEMY, //States/Spawning->Trigger ExState after enemy kill - Trigger ExState after killing the spawned enemy
	TRIGFLAG_AUTOGRAB_ITEM, //States/Spawning->Spawned Item auto-collects - Spawned item auto-collects
	TRIGFLAG_KILL_ENEMIES, //Other->'Enemies->' - Triggered when all enemies are killed
	TRIGFLAG_SECRETSTR, //Other->'Secrets->' - Triggered when screen secrets are triggered
	TRIGFLAG_THROWN, //Weapons->LWeapons->Thrown - Triggered by Thrown Object weapons
	TRIGFLAG_QUAKESTUN, //Weapons->LWeapons->Quake Hammer - Triggered by a Quake Stun
	TRIGFLAG_SQUAKESTUN, //Weapons->LWeapons->S. Quake Hammer - Triggered by a Super Quake Stun
	TRIGFLAG_ANYFIRE, //Weapons->Other->Any Fire - Triggered by Any Fire
	TRIGFLAG_STRONGFIRE, //Weapons->Other->Strong Fire - Triggered by Strong Fire
	TRIGFLAG_MAGICFIRE, //Weapons->Other->Magic Fire - Triggered by Magic Fire
	TRIGFLAG_DIVINEFIRE, //Weapons->Other->Divine Fire - Triggered by Divine Fire
	TRIGFLAG_TRIGLEVELSTATE, //States/Spawning->'LevelState->' - Triggered by Level State
	TRIGFLAG_LEVELSTATE, //States/Spawning->'->LevelState' - Triggers Level State
	TRIGFLAG_TRIGGLOBALSTATE, //States/Spawning->'GlobalState->' - Triggered by Global State
	TRIGFLAG_GLOBALSTATE, //States/Spawning->'->GlobalState' - Triggers Global State
	TRIGFLAG_DO_KILL_ENEMIES, //Effects->Kill Enemies - Kill all enemies
	TRIGFLAG_DO_CLEAR_ENEMIES, //Effects->Clear Enemies - Delete all enemies
	TRIGFLAG_DO_CLEAR_LWEAPONS, //Effects->Clear LWeapons - Delete all lweapons
	TRIGFLAG_DO_CLEAR_EWEAPONS, //Effects->Clear EWeapons - Delete all eweapons
	TRIGFLAG_IGNITE_WEAPONS_ANY, //Weapons->Effects->Ignite Weapon (Any) - Light the triggering weapon on normal fire.
	TRIGFLAG_IGNITE_WEAPONS_STRONG, //Weapons->Effects->Ignite Weapon (Strong) - Light the triggering weapon on strong fire.
	TRIGFLAG_IGNITE_WEAPONS_MAGIC, //Weapons->Effects->Ignite Weapon (Magic) - Light the triggering weapon on magic fire.
	TRIGFLAG_IGNITE_WEAPONS_DIVINE, //Weapons->Effects->Ignite Weapon (Divine) - Light the triggering weapon on divine fire.
	TRIGFLAG_SEPARATE_WEAPON_TRIGGERS, //Weapons->Effects->Weapon Separate Triggers - Triggering weapons only trigger weapon-related effects
	TRIGFLAG_TGROUP_CONTRIB, //States/Spawning->Contributes To TrigGroup - This combo contributes to its' TrigGroup
	TRIGFLAG_TGROUP_LESS, //States/Spawning->'TrigGroup Less->' - When the number of combos that contribute to this combo's Trigger Group is LESS than the Trigger Group Val, trigger this combo.
	TRIGFLAG_TGROUP_GREATER, //States/Spawning->'TrigGroup Greater->' - When the number of combos that contribute to this combo's Trigger Group is GREATER than the Trigger Group Val, trigger this combo.
	TRIGFLAG_TRIG_PUSHED, //Other->'Pushed->' - Triggers when this combo, as a pushblock, settles into a new positon.
	TRIGFLAG_TRIG_DIVE, //Other->'Dive->' - Triggers when the [Hero] dives on this combo.
	TRIGFLAG_TRIG_DIVE_SENS, //Other->'Dive-> (Sensitive)' - Triggers when the [Hero] dives on this combo. More sensitive hitbox than 'TRIGFLAG_TRIG_DIVE'
	TRIGFLAG_REFARROW, //Weapons->LWeapons->Refl. Arrow - Triggered by Reflected Arrow LWeapons
	TRIGFLAG_REFFIRE, //Weapons->LWeapons->Refl. Fire - Triggered by Reflected Fire LWeapons
	TRIGFLAG_REFFIRE2, //Weapons->LWeapons->Refl. Fire 2 - Triggered by Reflected Fire 2 LWeapons
	TRIGFLAG_TOGGLE_DARKNESS, //Effects->Toggle Darkness - Toggle the screen being a dark room
	TRIGFLAG_REQ_DARKNESS, //Other->Req. Darkness - Can only trigger if the screen is a dark room
	TRIGFLAG_REQ_NO_DARKNESS, //Other->Req. Darkness - Can only trigger if the screen is lit (not a dark room)
	TRIGFLAG_LITEM_REQUIRE, //Counters/Items->Require All - Require all the specified LItems to trigger the combo
	TRIGFLAG_LITEM_INV_REQUIRE, //Counters/Items->Require Not All - Require not all (some is ok) of the specified LItems to trigger the combo
	TRIGFLAG_LITEM_SET, //Counters/Items->'->Set' - Grants the specified LItems. If 'TRIGFLAG_LITEM_UNSET' is also on, toggles them instead.
	TRIGFLAG_LITEM_UNSET, //Counters/Items->'->Unset' - Removes the specified LItems. If 'TRIGFLAG_LITEM_SET' is also on, toggles them instead.
	TRIGFLAG_TINT_CLEAR, //Graphics->'->Clear Tint' - Clears the palette tint.
	TRIGFLAG_ONLY_GROUNDED_WEAPONS, //Weapons->Other->'Only Grounded Weapons' - weapons with Z > 0 won't trigger the combo

	TRIGFLAG_MAX_IN_USE,
	TRIGFLAG_MAX = 32*6
};

//Higher blockflag bits are too high for zscript! Use long access...


enum ScriptTiming
{
	SCR_TIMING_INIT = -1,
	SCR_TIMING_START_FRAME, SCR_TIMING_POST_COMBO_ANIM, SCR_TIMING_POST_POLL_INPUT,
	SCR_TIMING_POST_FFCS, SCR_TIMING_POST_GLOBAL_ACTIVE,
	SCR_TIMING_POST_PLAYER_ACTIVE, SCR_TIMING_POST_DMAPDATA_ACTIVE,
	SCR_TIMING_POST_DMAPDATA_PASSIVESUBSCREEN, SCR_TIMING_POST_COMBOSCRIPT,
	SCR_TIMING_POST_PUSHBLOCK,
	SCR_TIMING_POST_ITEMSPRITE_SCRIPT, SCR_TIMING_POST_ITEMSPRITE_ANIMATE,
	SCR_TIMING_POST_NPC_ANIMATE, SCR_TIMING_POST_EWPN_ANIMATE, SCR_TIMING_POST_EWPN_SCRIPT,
	SCR_TIMING_POST_OLD_ITEMDATA_SCRIPT, SCR_TIMING_POST_PLAYER_ANIMATE,
	SCR_TIMING_POST_NEW_ITEMDATA_SCRIPT, SCR_TIMING_POST_CASTING,
	SCR_TIMING_POST_LWPN_ANIMATE,
	SCR_TIMING_POST_DECOPARTICLE_ANIMATE, SCR_TIMING_POST_COLLISIONS_PALETTECYCLE,
	SCR_TIMING_WAITDRAW, SCR_TIMING_POST_GLOBAL_WAITDRAW, SCR_TIMING_POST_PLAYER_WAITDRAW,
	SCR_TIMING_POST_DMAPDATA_ACTIVE_WAITDRAW, SCR_TIMING_POST_DMAPDATA_PASSIVESUBSCREEN_WAITDRAW,
	SCR_TIMING_POST_SCREEN_WAITDRAW, SCR_TIMING_POST_FFC_WAITDRAW, SCR_TIMING_POST_COMBO_WAITDRAW,
	SCR_TIMING_POST_ITEM_WAITDRAW, SCR_TIMING_POST_NPC_WAITDRAW, SCR_TIMING_POST_EWPN_WAITDRAW,
	SCR_TIMING_POST_LWPN_WAITDRAW, SCR_TIMING_POST_ITEMSPRITE_WAITDRAW,
	SCR_TIMING_PRE_DRAW, SCR_TIMING_POST_DRAW, SCR_TIMING_POST_STRINGS, SCR_TIMING_END_FRAME,
	SCR_NUM_TIMINGS
};

// Used with [genericdata::ExitState] and [genericdata::ReloadState].
enum GenericScriptStateIndex
{
	GENSCR_ST_RELOAD, //When reloading from save select screen
	GENSCR_ST_CONTINUE, //When F6->Continue
	GENSCR_ST_CHANGE_SCREEN, //When screen changes
	GENSCR_ST_CHANGE_DMAP, //When dmap changes
	GENSCR_ST_CHANGE_LEVEL, //When level changes
	GENSCR_NUMST
};

// Used with [WaitEvent].
enum GenericScriptEvent
{
	GENSCR_EVENT_NIL = -1, //N/A (error value)
	GENSCR_EVENT_INIT, //When loading in from a save/new quest
	GENSCR_EVENT_CONTINUE, //When F6->Continue
	GENSCR_EVENT_FFC_PRELOAD, //When FFCs run 'on screen init'
	GENSCR_EVENT_CHANGE_SCREEN, //When the screen changes
	GENSCR_EVENT_CHANGE_DMAP, //When the dmap changes
	GENSCR_EVENT_CHANGE_LEVEL, //When the level changes
	GENSCR_EVENT_HERO_HIT_1, //Hero is hit, before ring applied
	GENSCR_EVENT_HERO_HIT_2, //Hero is hit, after ring applied
	GENSCR_EVENT_COLLECT_ITEM, //Item is collected
	GENSCR_EVENT_ENEMY_DROP_ITEM_1, //Enemy drops item (before item created)
	GENSCR_EVENT_ENEMY_DROP_ITEM_2, //Enemy drops item (if & after item created)
	GENSCR_EVENT_ENEMY_DEATH, //Enemy dying
	GENSCR_EVENT_ENEMY_HIT1, //Enemy hit, before defenses
	GENSCR_EVENT_ENEMY_HIT2, //Enemy hit, after defenses
	GENSCR_EVENT_POST_COLLECT_ITEM, //After item is collected (post hold if held)
	GENSCR_EVENT_PLAYER_FALL, //Hero falls in a pitfall
	GENSCR_EVENT_PLAYER_DROWN, //Hero drowns
	GENSCR_NUMEVENT
};
enum //Game->EventData[] indexes for 'GENSCR_EVENT_HERO_HIT_1' and 'GENSCR_EVENT_HERO_HIT_2'
{
	GENEV_HEROHIT_DAMAGE, //Damage to be taken
	GENEV_HEROHIT_HITDIR, //Dir to be knocked in
	GENEV_HEROHIT_NULLIFY, //Bool: to nullify the hit, or not
	GENEV_HEROHIT_NAYRUON, //Bool: if nayru's love will nullify the damage, or not
	GENEV_HEROHIT_IFRAMES, //Number of IFrames to have after hit, if not nullified
	GENEV_HEROHIT_HITTYPE, //What type of object is hitting the hero ('OBJTYPE_')
	GENEV_HEROHIT_HITOBJ, //The pointer to that object
	GENEV_HEROHIT_HITTYPE2, //A second type of object (sometimes 'OBJTYPE_NONE')
	GENEV_HEROHIT_HITOBJ2 //The pointer to the second object
};
enum //Game->EventData[] indexes for 'GENSCR_EVENT_COLLECT_ITEM'
{
	GENEV_ITEMCOL_ID, //Item ID to be gained
	GENEV_ITEMCOL_PICKUP, //Pickup flags for the item pickup
	GENEV_ITEMCOL_PSTR, //Pickup string to be displayed
	GENEV_ITEMCOL_PSTRFLAGS, //Pickup string flags
	GENEV_ITEMCOL_NULLIFY, //Bool: to nullify the item pickup, or not
	GENEV_ITEMCOL_ITEMPTR, //'itemsprite' object pointer
	GENEV_ITEMCOL_TYPE, //Type of hit; see GENEVT_ICTYPE_
	GENEV_ITEMCOL_WPNPTR //'lweapon' object pointer, or 'NULL' if no weapon is available
};
enum //Game->EventData[] indexes for 'GENSCR_EVENT_ENEMY_DROP_ITEM_1'
{
	GENEV_EDI1_NPC, //the npc pointer
	GENEV_EDI1_ITEMID, //the chosen item ID
	GENEV_EDI1_DROPSET //the dropset the ID was chosen from
	//If the ITEMID is set to `-2`, the dropset will be rolled automatically.
	//ITEMID of -1 means no item will be dropped.
};
enum //Game->EventData[] indexes for 'GENSCR_EVENT_ENEMY_DROP_ITEM_2'
{
	GENEV_EDI2_NPC, //the npc pointer
	GENEV_EDI2_ITM //the itemsprite pointer
};
enum //Game->EventData[] indexes for 'GENSCR_EVENT_ENEMY_DEATH'
{
	GENEV_EDEATH_DYING, //Bool: if the enemy is dying, or not (set false to cancel death)
	GENEV_EDEATH_NPC //the npc pointer
};
enum //Game->EventData[] indexes for 'GENSCR_EVENT_ENEMY_HIT1' and 'GENSCR_EVENT_ENEMY_HIT2'
{
	GENEV_EHIT_POWER, //damage amount
	GENEV_EHIT_DEFENSETYPE, //defense type
	GENEV_EHIT_UNBLOCKABLE, //unblockable flagset
	GENEV_EHIT_WEAPONID, //weapon ID
	GENEV_EHIT_NULLIFY, //Bool: if true the hit will not connect
	GENEV_EHIT_NPCPTR, //npc pointer
	GENEV_EHIT_LWPNPTR //lweapon pointer
};
enum //Game->EventData[] indexes for 'GENSCR_EVENT_PLAYER_FALL' and 'GENSCR_EVENT_PLAYER_DROWN'
{
	GENEV_PLAYER_FALLDROWN_COMBO //The combo ID the [Hero] is falling/drowning into.
};

enum //constants for 'GENEV_ITEMCOL_TYPE'
{
	GENEVT_ICTYPE_COLLECT, //Hero collected the item
	GENEVT_ICTYPE_MELEE, //Melee weapon collected the item
	GENEVT_ICTYPE_MELEE_EW, //Melee weapon collected the item
	GENEVT_ICTYPE_RANGED_DRAG //Ranged weapon collected, and will drag //Only 'NULLIFY' can be edited here
};
enum //constants for 'GENEV_HEROHIT_HITTYPE' / 'GENEV_HEROHIT_HITTYPE2'
{
	OBJTYPE_NONE = -1,
	OBJTYPE_NPC, OBJTYPE_LWPN, OBJTYPE_EWPN, OBJTYPE_ITSPR, OBJTYPE_COMBODATA,
	OBJTYPE_COMBOPOS, OBJTYPE_FFC,
	NUM_OBJTYPE
};



enum //Combodata LiftFlags[]
{
	LF_LIFTABLE,
	LF_DROPSET,
	LF_DROPONLIFT,
	LF_SPECIALITEM,
	LF_NOUCSET,
	LF_NOWPNCMBCSET,
	LF_BREAKONSOLID
};

enum 
{
	CSPACE_RGB,
	CSPACE_CMYK, 
	CSPACE_HSV, CSPACE_HSV_CW, CSPACE_HSV_CCW, 
	CSPACE_HSL, CSPACE_HSL_CW, CSPACE_HSL_CCW, 
	CSPACE_LAB, 
	CSPACE_LCH, CSPACE_LCH_CW, CSPACE_LCH_CCW,
	CSPACE_NUMCSPACE
};


enum //For 'itemdata->RunScript()'
{
	ISCR_KILL, ISCR_RUN, ISCR_PERPETUAL
};

enum //For 'itemdata->PickupType'
{
	IPTYPE_DISABLED,
	IPTYPE_SET,
	IPTYPE_ADD,
	IPTYPE_SUB,
	IPTYPE_LIMIT
};



enum //spritedata->Flags[] indexes
{
	SPRFL_AUTOFLASH,
	SPRFL_2PFLASH,
	SPRFL_HFLIP,
	SPRFL_VFLIP,
	SPRFL_BEHIND,
	NUM_SPRFL
};

enum //Light shapes for torch combos, lantern itemdata, and GlowShape variables
{
	LIGHT_CIRCLE,
	LIGHT_CONE,
	LIGHT_SQUARE
};

//Override Flag constants, compare with itemdata->OverrideFlags, itemdata->WeaponOverrideFlags and npcdata->OverrideFlags. These correspond to the "Enabled" checkboxes in the Graphics->Size tab in the Item and Enemy Editors. Add or OR (|) these together 
const int SZOF_TILEWIDTH      = 1;     //0000000001b, 0x001
const int SZOF_TILEHEIGHT     = 2;     //0000000010b, 0x002
const int SZOF_HITWIDTH       = 4;     //0000000100b, 0x004
const int SZOF_HITHEIGHT      = 8;     //0000001000b, 0x008
const int SZOF_HITZHEIGHT     = 16;     //0000010000b, 0x010
const int SZOF_HITXOFFSET     = 32;     //0000100000b, 0x020
const int SZOF_HITYOFFSET     = 64;     //0001000000b, 0x040
const int SZOF_DRAWXOFFSET    = 128;     //0010000000b, 0x080
const int SZOF_DRAWYOFFSET    = 256;     //0100000000b, 0x100
const int SZOF_DRAWZOFFSET    = 512;     //1000000000b, 0x200, Enemies only.

//Special hardcoded draw layers
//Note: These may draw multiple times, or no times at all, during a frame.
//      Timing may vary from frame to frame, and based on QRs or other settings.
enum
{
	SPLAYER_PLAYER_DRAW = -200000,  //The [Hero], when this occurs changes based on various conditions.
	SPLAYER_EWEAP_BEHIND_DRAW, //Eweapons with 'Behind = true'
	SPLAYER_EWEAP_FRONT_DRAW, //Eweapons with 'Behind = false'
	SPLAYER_LWEAP_BEHIND_DRAW, //Lweapons with 'Behind = true'
	SPLAYER_LWEAP_FRONT_DRAW, //Lweapons with 'Behind = false'
	SPLAYER_LWEAP_ABOVE_DRAW, //Lweapons with (Z+FakeZ) > Init Data 'Jump Layer Height', IF the [Hero] is also above this height.
	SPLAYER_CHAINLINK_DRAW, //Hookshot chain links. This may draw multiple times per frame.
	SPLAYER_NPC_DRAW, //Enemies
	SPLAYER_NPC_ABOVEPLAYER_DRAW, //Enemies 'grabbing' the [Hero], or with a higher Z than the [Hero]
	SPLAYER_NPC_AIRBORNE_DRAW, //Flying enemies, or enemies in the Z axis (amount required QR dependant)
	SPLAYER_ITEMSPRITE_DRAW, //Itemsprites
	SPLAYER_FAIRYITEM_DRAW, //Moving fairies
	SPLAYER_PUSHBLOCK, //Pushable Blocks
	SPLAYER_MOVINGBLOCK, //Moving Pushable Blocks
	SPLAYER_OVERHEAD_CMB, //Overhead combos
	SPLAYER_OVERHEAD_FFC, //Overhead ffcs
	SPLAYER_DARKROOM_UNDER, //Under dark room darkness
	SPLAYER_DARKROOM_OVER, //Over dark room darkness
	SPLAYER_FFC_DRAW, //Non-Overhead ffcs
	SPLAYER_LENS_UNDER_1, //Lens drawing secrets/revealing things
	SPLAYER_LENS_UNDER_2, //Lens drawing secrets/revealing things
	SPLAYER_LENS_OVER //Lens drawing blackness to cover most of the screen
};

enum //for Hero->LiftFlags[]
{
	LIFTFL_DISABLE_SHIELD,
	LIFTFL_DISABLE_ITEMS,
	LIFTFL_NO_SWIMMING,
	LIFTFL_DROP_ON_HIT,
	LIFTFL_MAX
};

enum
{
	MR_SCREEN,
	MR_DMAP,
	MR_LEVEL,
	MR_NEVER
};

enum
{	
	MRF_NOCUT,
	MRF_REVERT
};


enum
{
	ITM_BURNSPR_NO_BURN,
	ITM_BURNSPR_ANY_BURN,
	ITM_BURNSPR_STRONG_BURN,
	ITM_BURNSPR_MAGIC_BURN,
	ITM_BURNSPR_DIVINE_BURN,
	ITM_BURNSPR_MAX
};

//{ This section for engine subscreen stuff
enum //Subscreen Types
{
	SSTYPE_ACTIVE,
	SSTYPE_PASSIVE,
	SSTYPE_OVERLAY,
	SSTYPE_MAX
};

//Subscreen Flags
enum
{
	SSFL_ACTIVE_NOPAGEWRAP,
	SSFL_ACTIVE_OVERRIDE_SELECTOR,
	SSFL_ACTIVE_MAX
};
enum
{
	SSFL_PASSIVE_MAX
};
enum
{
	SSFL_OVERLAY_MAX
};

enum //Transition Types
{
	TRANS_TY_INSTANT,
	TRANS_TY_SLIDE,
	TRANS_TY_PIXEL,
	TRANS_TY_MAX
};

//Transition arguments
enum
{
	TRANS_INSTANT_ARG_MAX
};
enum
{
	TRANS_SLIDE_ARG_DIR,
	TRANS_SLIDE_ARG_SPEED,
	TRANS_SLIDE_ARG_MAX
};
enum
{
	TRANS_PIXEL_ARG_INVERT,
	TRANS_PIXEL_ARG_DURATION,
	TRANS_PIXEL_ARG_XOFF,
	TRANS_PIXEL_ARG_YOFF,
	TRANS_PIXEL_ARG_MAX
};

enum //Transition Flags
{
	TRANSFLAG_NO_HIDE_SELECTOR,
	TRANSFLAG_MAX
};


enum SubscreenWidgetType
{
	SUBWIDG_NULL, SUBWIDG_FRAME, SUBWIDG_TEXT, SUBWIDG_LINE, SUBWIDG_RECT,
	SUBWIDG_TIME, SUBWIDG_MMETER, SUBWIDG_LMETER, SUBWIDG_BTNITM, SUBWIDG_COUNTER,
	SUBWIDG_OLDCTR, SUBWIDG_MMAPTITLE, SUBWIDG_MMAP, SUBWIDG_LMAP, SUBWIDG_BGCOLOR,
	SUBWIDG_ITEMSLOT, SUBWIDG_MCGUFF_FRAME, SUBWIDG_MCGUFF, SUBWIDG_TILEBLOCK, SUBWIDG_MINITILE,
	SUBWIDG_SELECTOR, SUBWIDG_LGAUGE, SUBWIDG_MGAUGE, SUBWIDG_TEXTBOX, SUBWIDG_SELECTEDTEXT,
	SUBWIDG_MISCGAUGE, SUBWIDG_BTNCOUNTER,
	SUBWIDG_MAX
};

enum //Visibility Flags
{
	SUBVISIB_CLOSED, //Visible while the active subscreen is closed
	SUBVISIB_OPEN, //Visible while the active subscreen is open
	SUBVISIB_SCROLLING, //Visible while the active subscreen is opening/closing
	SUBVISIB_NO_MSGSTR, //Hide while a message string is displaying
	SUBVISIB_MAX
};

enum //Widget genflags
{
	SUBW_GENFL_SELECTABLE,
	SUBW_GENFL_PGMODE_NOWRAP,
	SUBW_GENFL_SELECTOR_OVERRIDE,
	SUBW_GENFL_MAX
};

enum SubscreenPageMode
{
	SUB_PGMODE_NONE, //no page change
	SUB_PGMODE_NEXT, //next page
	SUB_PGMODE_PREV, //previous page
	SUB_PGMODE_TARG, //specified page
	SUB_PGMODE_MAX
};

enum //Special Subscreen CSet Values
{
	SUB_CS_MCGUFF         = -1,
	SUB_CS_MCGUFF_FRAME   = -2,
	SUB_CS_OW_MAP         = -3,
	SUB_CS_DUNG_MAP       = -4,
	SUB_CS_BLUEFRAME      = -5,
	SUB_CS_HCPIECES       = -6,
	SUB_CS_SSVINE         = -7,
	SUB_CS_MIN            = -8
};
enum //Special Subscreen Color Values
{
	SUB_COLOR_SYS_0       = -1,
	SUB_COLOR_SYS_1       = -2,
	SUB_COLOR_SYS_2       = -3,
	SUB_COLOR_SYS_3       = -4,
	SUB_COLOR_SYS_4       = -5,
	SUB_COLOR_SYS_5       = -6,
	SUB_COLOR_SYS_6       = -7,
	SUB_COLOR_SYS_7       = -8,
	SUB_COLOR_SYS_8       = -9,
	SUB_COLOR_SYS_9       = -10,
	SUB_COLOR_SYS_10      = -11,
	SUB_COLOR_SYS_11      = -12,
	SUB_COLOR_SYS_12      = -13,
	SUB_COLOR_SYS_13      = -14,
	SUB_COLOR_SYS_14      = -15,
	SUB_COLOR_SYS_15      = -16,
	SUB_COLOR_TEXT        = -17,
	SUB_COLOR_CAPTION     = -18,
	SUB_COLOR_OVERW_BG    = -19,
	SUB_COLOR_DUNG_BG     = -20,
	SUB_COLOR_DUNG_FG     = -21,
	SUB_COLOR_CAVE_FG     = -22,
	SUB_COLOR_BS_DARK     = -23,
	SUB_COLOR_BS_GOAL     = -24,
	SUB_COLOR_COMPASS_L   = -25,
	SUB_COLOR_COMPASS_D   = -26,
	SUB_COLOR_SUBSCR_BG   = -27,
	SUB_COLOR_SUBSCR_SHD  = -28,
	SUB_COLOR_MCGUFF_FRM  = -29,
	SUB_COLOR_LMAP_BG     = -30,
	SUB_COLOR_LMAP_FG     = -31,
	SUB_COLOR_HERODOT     = -32,
	SUB_COLOR_MSGTXT      = -33,
	SUB_COLOR_TRANSPARENT = -34,
	SUB_COLOR_MIN         = -35
};
enum //Special Subscreen Tile Values
{
	SUB_SPTILE_SSVINE     = -1,
	SUB_SPTILE_MAGICMETER = -2,
	SUB_SPTILE_MIN        = -3
};
//{ Subscreen type-specific flag constants

enum // Flags for SUBWIDG_FRAME
{
	SUBW_FRAME_FLAG_TRANSP,
	SUBW_FRAME_FLAG_OVERLAY,
	SUBW_FRAME_NUMFLAGS
};
enum // Flags for SUBWIDG_TEXT
{
	SUBW_TEXT_NUMFLAGS
};
enum // Flags for SUBWIDG_LINE
{
	SUBW_LINE_FLAG_TRANSP,
	SUBW_LINE_NUMFLAGS
};
enum // Flags for SUBWIDG_RECT
{
	SUBW_RECT_FLAG_TRANSP,
	SUBW_RECT_FLAG_FILLED,
	SUBW_RECT_NUMFLAGS
};
enum // Flags for SUBWIDG_TIME
{
	SUBW_TIME_FLAG_ALTSTR,
	SUBW_TIME_NUMFLAGS
};
enum // Flags for SUBWIDG_MMETER
{
	SUBW_MMETER_NUMFLAGS
};
enum // Flags for SUBWIDG_LMETER
{
	SUBW_LMETER_FLAG_BOTTOM,
	SUBW_LMETER_NUMFLAGS
};
enum // Flags for SUBWIDG_BTNITM
{
	SUBW_BTNITM_FLAG_TRANSP,
	SUBW_BTNITM_NUMFLAGS
};
enum // Flags for SUBWIDG_COUNTER
{
	SUBW_COUNTER_FLAG_SHOW0,
	SUBW_COUNTER_FLAG_ONLYSEL,
	SUBW_COUNTER_NUMFLAGS
};
enum // Flags for SUBWIDG_OLDCTR
{
	SUBW_OLDCTR_FLAG_USEX,
	SUBW_OLDCTR_NUMFLAGS
};
enum // Flags for SUBWIDG_MMAPTITLE
{
	SUBW_MMAPTITLE_FLAG_REQMAP,
	SUBW_MMAPTITLE_FLAG_ONELINE,
	SUBW_MMAPTITLE_NUMFLAGS
};
enum // Flags for SUBWIDG_MMAP
{
	SUBW_MMAP_FLAG_SHOWMAP,
	SUBW_MMAP_FLAG_SHOWPLAYER,
	SUBW_MMAP_FLAG_SHOWCOMPASS,
	SUBW_MMAP_NUMFLAGS
};
enum // Flags for SUBWIDG_LMAP
{
	SUBW_LMAP_FLAG_SHOWMAP,
	SUBW_LMAP_FLAG_SHOWROOM,
	SUBW_LMAP_FLAG_SHOWPLAYER,
	SUBW_LMAP_FLAG_LARGE,
	SUBW_LMAP_NUMFLAGS
};
enum // Flags for SUBWIDG_BGCOLOR
{
	SUBW_BGCOLOR_NUMFLAGS
};
enum // Flags for SUBWIDG_ITEMSLOT
{
	SUBW_ITEMSLOT_FLAG_INVIS,
	SUBW_ITEMSLOT_FLAG_NON_EQUIPPABLE,
	SUBW_ITEMSLOT_MOVE_IGNORE_SPEC_SELTEXT,
	SUBW_ITEMSLOT_MOVE_IGNORE_SPEC_DISPLAY,
	SUBW_ITEMSLOT_FLAG_NO_INTERACT_WO_ITEM,
	SUBW_ITEMSLOT_FLAG_NO_INTERACT_WO_EQUIP,
	SUBW_ITEMSLOT_FLAG_NO_UNEQUIP,
	SUBW_ITEMSLOT_NUMFLAGS
};
enum // Flags for SUBWIDG_MCGUFF_FRAME
{
	SUBW_MCGUFF_FRAME_FLAG_SHOWFRAME,
	SUBW_MCGUFF_FRAME_FLAG_SHOWPIECES,
	SUBW_MCGUFF_FRAME_FLAG_LARGEPIECES,
	SUBW_MCGUFF_FRAME_NUMFLAGS
};
enum // Flags for SUBWIDG_MCGUFF
{
	SUBW_MCGUFF_FLAG_OVERLAY,
	SUBW_MCGUFF_FLAG_TRANSP,
	SUBW_MCGUFF_NUMFLAGS
};
enum // Flags for SUBWIDG_TILEBLOCK
{
	SUBW_TILEBLOCK_FLAG_OVERLAY,
	SUBW_TILEBLOCK_FLAG_TRANSP,
	SUBW_TILEBLOCK_NUMFLAGS
};
enum // Flags for SUBWIDG_MINITILE
{
	SUBW_MINITILE_FLAG_OVERLAY,
	SUBW_MINITILE_FLAG_TRANSP,
	SUBW_MINITILE_NUMFLAGS
};
enum // Flags for SUBWIDG_SELECTOR
{
	SUBW_SELECTOR_FLAG_TRANSP,
	SUBW_SELECTOR_FLAG_LARGE,
	SUBW_SELECTOR_FLAG_USEB,
	SUBW_SELECTOR_NUMFLAGS
};
enum // Flags for SUBWIDG_LGAUGE,SUBWIDG_MGAUGE,SUBWIDG_MISCGAUGE
{
	SUBW_GAUGE_FLAG_MOD1,
	SUBW_GAUGE_FLAG_MOD2,
	SUBW_GAUGE_FLAG_MOD3,
	SUBW_GAUGE_FLAG_MOD4,
	SUBW_GAUGE_FLAG_UNIQUE_LAST,
	SUBW_GAUGE_FLAG_FULL_TILE,
	SUBW_GAUGE_FLAG_ANIMATE_UNDER,
	SUBW_GAUGE_FLAG_ANIMATE_OVER,
	SUBW_GAUGE_FLAG_ANIMATE_PERCENT,
	SUBW_GAUGE_FLAG_ANIMATE_SKIP_FIRST,
	SUBW_GAUGE_FLAG_INFITEM_REQUIRE,
	SUBW_GAUGE_FLAG_INFITEM_DISALLOW,
	SUBW_GAUGE_FLAG_GRID_RTOL,
	SUBW_GAUGE_FLAG_GRID_TTOPB,
	SUBW_GAUGE_FLAG_GRID_COLUMN_FIRST,
	SUBW_GAUGE_FLAG_GRID_SNAKE_PATTERN,
	SUBW_GAUGE_NUMFLAGS
};
enum // Flags for SUBWIDG_TEXTBOX
{
	SUBW_TEXTBOX_FLAG_WORDWRAP,
	SUBW_TEXTBOX_NUMFLAGS
};
enum // Flags for SUBWIDG_SELECTEDTEXT
{
	SUBW_SELECTEDTEXT_FLAG_WORDWRAP,
	SUBW_SELECTEDTEXT_NUMFLAGS
};
enum // Flags for SUBWIDG_BTNCOUNTER
{
	SUBW_BTNCOUNTER_FLAG_SHOW0,
	SUBW_BTNCOUNTER_FLAG_NOCOLLAPSE,
	SUBW_BTNCOUNTER_NUMFLAGS
};

//} End section for subscreen type-specific flag constants
//} End section for engine subscreen stuff

// Sound effect IDs. Used with [Audio->PlaySound].
enum SoundEffect
{
	SFX_ARROW                      = 1,  // Arrow is fired.
	SFX_BEAM                       = 2,  // Sword beam is fired.
	SFX_BOMB                       = 3,  // Bomb explodes.
	SFX_BRANG                      = 4,  // Boomerang spinning.
	SFX_CHARGE1                    = 35, // Sword powering up.
	SFX_CHARGE2                    = 36, // Sword powering up again (Hurricane Spin).
	SFX_CURSOR                     = 5,  // Subscreen cursor.
	SFX_CLINK                      = 6,  // Shield is hit.
	SFX_CLEARED                    = 7,  // Chime when screen item appears.
	SFX_DINSFIRE                   = 37, // Din's Fire blast.
	SFX_DODONGO                    = 8,  // Dodongo's roar.
	SFX_SHUTTER                    = 9,  // Shutter bang.
	SFX_EDEAD                      = 10, // Enemy is killed.
	SFX_EHIT                       = 11, // Enemy is hit.
	SFX_LOWHP                      = 12, // Low hearts warning beep.
	SFX_FALL                       = 38, // Enemy falls from ceiling (unused).
	SFX_FARORESWIND                = 39, // Farore's Wind spell.
	SFX_FIRE                       = 13, // Flame roar.
	SFX_FIREBALL                   = 40, // Enemy fireball.
	SFX_GANON                      = 14, // Music when Ganon appears/dies.
	SFX_GASP                       = 15, // Boss is hit.
	SFX_GRASSCUT                   = 41, // Grass or bush slashed.
	SFX_HAMMER                     = 16, // Hammer pound.
	SFX_HAMMERPOST                 = 42, // Pounded a post.
	SFX_HOOKSHOT                   = 17, // Hookshot chain rattle.
	SFX_HOVER                      = 43, // Hover boots.
	SFX_ICE                        = 44, // Unused.
	SFX_JUMP                       = 45, // Jumping.
	SFX_LENSOFF                    = 46, // Lens of Truth off.
	SFX_LENSON                     = 47, // Lens of Truth on.
	SFX_MSG                        = 18, // Message typing.
	SFX_NAYRUSLOVE1                = 48, // Nayru's Love shield hum.
	SFX_NAYRUSLOVE2                = 49, // Nayru's Love shield running out.
	SFX_OUCH                       = 19, // Link is hit.
	SFX_PICKUP                     = 20, // Chime when item is held above head.
	SFX_PLACE                      = 21, // Bomb is placed.
	SFX_PLINK                      = 22, // Heart/Rupee is collected.
	SFX_PUSHBLOCK                  = 50, // Pushed a block.
	SFX_REFILL                     = 23, // Hearts being refilled.
	SFX_ROAR                       = 24, // Aquamentus, Gleeok and Ganon's roar.
	SFX_ROCK                       = 51, // Octorok rock is fired.
	SFX_ROCKETDOWN                 = 52, // Spell rocket descends.
	SFX_ROCKETUP                   = 53, // Spell rocket launched.
	SFX_SCALE                      = 25, // Chime when fairy appears/is picked up.
	SFX_SEA                        = 26, // "Ocean SFX" ambience.
	SFX_SECRET                     = 27, // Chime when secret is discovered.
	SFX_SPINATTACK                 = 54, // Sword spin.
	SFX_SPIRAL                     = 28, // Link dies.
	SFX_SPLASH                     = 55, // Splashing in shallow water.
	SFX_STAIRS                     = 29, // Link marches down stairs.
	SFX_SUMMON                     = 56, // Summoner magic.
	SFX_SWORD                      = 30, // Sword swipe.
	SFX_TAP1                       = 57, // Sword taps wall.
	SFX_TAP2                       = 58, // Sword taps bombable wall.
	SFX_PATRA                      = 31, // Patra and Manhandla's shriek.
	SFX_WAND                       = 32, // Magic is fired by Wizzrobes or Link.
	SFX_WHIRLWIND                  = 59, // Whistle whirlwind.
	SFX_WHISTLE                    = 33, // Whistle is played.
	SFX_ZELDA                      = 34, // Music when ending sequence begins.
};

// Used with [eweapon::UseSprite], [lweapon::UseSprite], and [portal::UseSprite].
enum SpriteID
{
	SP_ARROW_ENEMY                 = 19,
	SP_ARROW1                      = 10, // Wooden Arrow.
	SP_ARROW2                      = 11, // Silver Arrow.
	SP_ARROW3                      = 34, // Golden Arrow.
	SP_BAIT                        = 14, // Enemy bait.
	SP_BOMB_ENEMY                  = 76, // Bomb (Enemy, normal).
	SP_SBOMB_ENEMY                 = 77, // Bomb (Enemy, Super).
	SP_BOMB                        = 7,  // Normal Bomb.
	SP_SBOMB                       = 8,  // Super Bomb.
	SP_BRANG1                      = 4,  // Wooden Boomerang.
	SP_BRANG2                      = 5,  // Magical Boomerang.
	SP_BRANG3                      = 6,  // Fire Boomerang.
	SP_CANEOFBYRNA                 = 69, // Cane of Byrna Object.
	SP_BYRNABEAM                   = 87, // Cane of Byrna Orbiter.
	SP_BYRNASLASH                  = 70, // Cane of Byrna Slashing Sprite.
	SP_DINSFIRE_FALL               = 39, // Din's Fire (Falling).
	SP_DINSFIRE_RISE               = 38, // Din's Fire (Rising).
	SP_DINSFIRE_TRAIL_FALL         = 41, // Din's Fire (Trail, Falling).
	SP_DINSFIRE_TRAIL_RISE         = 40, // Din's Fire (Trail, Rising).
	SP_BOMB_ENEMY_EXPLOSION        = 78, // Normal Bomb Exploion (Enemy).
	SP_SBOMB_ENEMY_EXPLOSION       = 79, // Super Bomb Explosion (Enemy).
	SP_BOMB_EXPLOSION              = 9,  // Normal Bomb Explosion.
	SP_SBOMB_EXPLOSION             = 75, // Super Bomb Explosion.
	SP_FIRE_ENEMY                  = 35, // Fire (Enemy).
	SP_FIRE2_ENEMY                 = 81, // Fire 2 (Enemy).
	SP_FIRETRAIL2                  = 82, // Fire Trail 2 (Enemy) [Unused].
	SP_FIRETRAIL                   = 80, // Fire Trail (Enemy).
	SP_FIREBALL                    = 17, // Fireball (Enemy).
	SP_FLAME                       = 12, // Candle Fire.
	SP_FIRE                        = 12, // Candle Fire.
	SP_HAMMER                      = 25, // Hammer.
	SP_HOOKSHOT1_CHAIN_H           = 27, // Hookshot (Short, Chain, Horizontal).
	SP_HOOKSHOT1_CHAIN_V           = 42, // Hookshot (Short, Chain, Vertical).
	SP_HOOKSHOT1_HANDLE            = 28, // Hookshot Handle (Short).
	SP_HOOKSHOT1_HEAD              = 26, // Hookshot Head (Short).
	SP_HOOKSHOT2_CHAIN_H           = 72, // Hookshot (Short, Chain, Horizontal).
	SP_HOOKSHOT2_CHAIN_V           = 74, // Hookshot (Short, Chain, Vertical).
	SP_HOOKSHOT2_HANDLE            = 73, // Hookshot Handle (Short).
	SP_HOOKSHOT2_HEAD              = 71, // Hookshot Head (Short).
	SP_ICE                         = 83, // Ice Magic (Enemy, Unused).
	SP_MAGIC_ENEMY                 = 21, // Magic (Enemy).
	SP_MAGIC_FIRE                  = 85, // Magic (Fire).
	SP_MAGIC                       = 16, // Magic (Wand).
	SP_MISC44                      = 44, // Misc 44, unused.
	SP_MISC45                      = 45, // Misc 45, unused.
	SP_MISC57                      = 57, // Misc 57, unused.
	SP_MISC24                      = 24, // Misc 24, unused.
	SP_MISC_ARROW2                 = 29, // Silver Arrow Sparkles.
	SP_MISC_ARROW3                 = 30, // Golden Arrow Sparkles.
	SP_MISC_BRANG2                 = 31, // Magic Boomerang Sparkles.
	SP_MISC_BRANG3                 = 32, // Fire Boomerang Sparkles.
	SP_MISC_BUSH                   = 52, // Bush Leaf Clippings.
	SP_MISC_DEATH                  = 23, // Link Death Winkout.
	SP_MISC_FLOWER                 = 53, // Flower Clippings.
	SP_MISC_GRASS                  = 54, // Grass Clippings.
	SP_MISC_HAMMER                 = 33, // Hammer Impact.
	SP_MISC_HOVER                  = 84, // Hover Boots Glow.
	SP_MISC_MAGICMETER             = 37, // Magic Meter.
	SP_MISC_MORE                   = 43, // More Indicator.
	SP_MISC_QHEART                 = 86, // Quarter Heart.
	SP_MISC_RIPPLE                 = 56, // Ripples.
	SP_MISC_SHADOW2                = 51, // Shadow (Large).
	SP_MISC_SHADOW1                = 50, // Shadow (Small).
	SP_SPAWN                       = 22, // Enemy Spawn Poof.
	SP_MISC_SSVINE                 = 68, // Subscreen Vine.
	SP_TALLGRASS                   = 55, // Tall Grass Movement.
	SP_NAYRU_LEFT                  = 58, // Nayru's Love (Left).
	SP_NAYRU_LEFT2                 = 59, // Nayru's Love (Left, Returning).
	SP_NAYRU_RIGHT                 = 62, // Nayru's Love (Right).
	SP_NAYRU_RIGHT2                = 63, // Nayru's Love (Right, Returning).
	SP_NAYRU_BACK                  = 67, // Nayru's Love Shield (Back).
	SP_NAYRU_FRONT                 = 66, // Nayru's Love Shield (Front).
	SP_NAYRU_TRAIL_LEFT            = 60, // Nayru's Love Trail (Left).
	SP_NAYRU_TRAIL_LEFT2           = 61, // Nayru's Love Trail (Left, Returning).
	SP_NAYRU_TRAIL_RIGHT           = 64, // Nayru's Love Trail (Right).
	SP_NAYRU_TRAIL_RIGHT2          = 65, // Nayru's Love Trail (Right, Returning).
	SP_ROCK                        = 18, // Rock.
	SP_SWORD_ENEMY                 = 20, // Enemy Sword Beam.
	SP_SWORD1                      = 0,  // Wooden Sword.
	SP_SLASH1                      = 46, // Wooden Sword Slash.
	SP_SWORD2                      = 1,  // White Sword.
	SP_SLASH2                      = 47, // White Sword Slash.
	SP_SWORD3                      = 2,  // Magical Sword.
	SP_SLASH3                      = 48, // Magical Sword Slash.
	SP_SWORD4                      = 3,  // Master Sword.
	SP_SLASH4                      = 49, // Master Sword Slash.
	SP_WAND                        = 15, // Wand Object.
	SP_WHIRL                       = 13, // Whiste Whirlwind.
	SP_WIND                        = 36, // Wind Magic (Enemy).
};

// Extra Directions. Used with some stuff?
// @deprecated Use [Direction] instead!
enum Dir2
{
	DIR2_UP                        = 8,
	DIR2_RIGHTUP                   = 9,
	DIR2_RIGHT                     = 10,
	DIR2_RIGHTDOWN                 = 11,
	DIR2_DOWN                      = 12,
	DIR2_LEFTDOWN                  = 13,
	DIR2_LEFT                      = 14,
	DIR2_LEFTUP                    = 15,
	DIR2_UPRIGHT                   = 9,
	DIR2_DOWNRIGHT                 = 11,
	DIR2_DOWNLEFT                  = 13,
	DIR2_UPLEFT                    = 15,
};

// Sprite rendering extend modes. Used with [sprite::Extend].
enum ExtendMode
{
	EXT_NONE                       = 0, // Not extended.
	EXT_16X32                      = 1, // Sprite is extended as 16x32, or Link is extended in Sprites->Link to 16x32.
	EXT_32X32                      = 2, // Sprite is extended as 32x32, or Link is extended in Sprites->Link to 32x32.
	EXT_NORMAL                     = 3, // Extended.
	EXT_EXTENDED                   = 3, // Extended.
	EXT_NOSHADOW                   = 4, // Extended. NPC has no shadow.
};

// Level item flags. Used with [Game->LItems].
enum LevelItemBitflags
{
	LI_TRIFORCE                    = 0x01, // The Triforce of this Level has been obtained.
	LI_MAP                         = 0x02, // The Dungeon Map of this Level has been obtained.
	LI_COMPASS                     = 0x04, // The Compass of this Level has been obtained.
	LI_BOSS                        = 0x08, // A "Dungeon Boss" enemy has been slain.
	LI_BOSSKEY                     = 0x10, // The Boss Key of this Level has been obtained.
};

// Mouse button bitflags, used with [Link->InputMouseB].
// @deprecated Use [MouseIndex] and [Input->Mouse] instead!
enum MouseButtonBitflags
{
	MB_LEFTCLICK                   = 0x1,
	MB_RIGHTCLICK                  = 0x2,
	MB_MIDDLECLICK                 = 0x4,
};

// Controller buttons.
enum ButtonIndex
{
	CB_UP                          = 0,
	CB_DOWN                        = 1,
	CB_LEFT                        = 2,
	CB_RIGHT                       = 3,
	CB_A                           = 4,
	CB_B                           = 5,
	CB_START                       = 6,
	CB_L                           = 7,
	CB_R                           = 8,
	CB_MAP                         = 9,
	CB_EX1                         = 10,
	CB_X                           = 10,
	CB_EX2                         = 11,
	CB_Y                           = 11,
	CB_EX3                         = 12,
	CB_EX4                         = 13,
	CB_STICKUP                     = 14,
	CB_STICKDOWN                   = 15,
	CB_STICKLEFT                   = 16,
	CB_STICKRIGHT                  = 17,
	CB_AXIS_UP                     = 14,
	CB_AXIS_DOWN                   = 15,
	CB_AXIS_LEFT                   = 16,
	CB_AXIS_RIGHT                  = 17,
	CB_MAX                         = 18,
};

// Item IDs. Use with CreateItem() and Link->Item[].
// These are DEFAULT values, and may not be correct for custom quests which
// have overridden item action data.
enum ItemID
{
	I_AMULET1                      = 50,
	I_AMULET2                      = 63,
	I_ARROW1                       = 13,
	I_ARROW2                       = 14,
	I_ARROW3                       = 57,
	I_ARROWAMMO1                   = 70,
	I_ARROWAMMO10                  = 72,
	I_ARROWAMMO30                  = 73,
	I_ARROWAMMO5                   = 71,
	I_BAIT                         = 16,
	I_BOMB                         = 3,
	I_BOMBAMMO1                    = 77,
	I_BOMBAMMO30                   = 80,
	I_BOMBAMMO4                    = 78,
	I_BOMBAMMO8                    = 79,
	I_BOMBBAG1                     = 81,
	I_BOMBBAG2                     = 82,
	I_BOMBBAG3                     = 83,
	I_BOMBBAG4                     = 106,
	I_BOOK                         = 32,
	I_BOOTS                        = 55,
	I_BOSSKEY                      = 67,
	I_BOW1                         = 15,
	I_BOW2                         = 68,
	I_BRACELET1                    = 107,
	I_BRACELET2                    = 19,
	I_BRACELET3                    = 56,
	I_BRANG1                       = 23,
	I_BRANG2                       = 24,
	I_BRANG3                       = 35,
	I_CANDLE1                      = 10,
	I_CANDLE2                      = 11,
	I_CBYRNA                       = 88,
	I_CHARGERING1                  = 101,
	I_CHARGERING2                  = 102,
	I_CLOCK                        = 4,
	I_COMPASS                      = 22,
	I_CROSSSCROLL                  = 95,
	I_DINSFIRE                     = 64,
	I_DUST_PILE                    = 43,
	I_FAIRY                        = 34,
	I_FAIRYSTILL                   = 69,
	I_FARORESWIND                  = 65,
	I_FLIPPERS                     = 51,
	I_HAMMER                       = 54,
	I_HCPIECE                      = 49,
	I_HEART                        = 2,
	I_HEARTCONTAINER               = 28,
	I_HEARTRING1                   = 112,
	I_HEARTRING2                   = 113,
	I_HEARTRING3                   = 114,
	I_HOOKSHOT1                    = 52,
	I_HOOKSHOT2                    = 89,
	I_HOVERBOOTS                   = 92,
	I_KEY                          = 9,
	I_KILLALL                      = 62,
	I_LADDER1                      = 27,
	I_LADDER2                      = 108,
	I_LENS                         = 53,
	I_LETTER                       = 12,
	I_LETTERUSED                   = 90,
	I_LEVELKEY                     = 84,
	I_MAGICCONTAINER               = 58,
	I_MAGICJAR1                    = 59,
	I_MAGICJAR2                    = 60,
	I_MAGICKEY                     = 33,
	I_MAGICRING1                   = 115,
	I_MAGICRING2                   = 116,
	I_MAGICRING3                   = 117,
	I_MAGICRING4                   = 118,
	I_MAP                          = 21,
	I_MISC1                        = 46,
	I_MISC2                        = 47,
	I_NAYRUSLOVE                   = 66,
	I_PERILRING                    = 121,
	I_PERILSCROLL                  = 103,
	I_POTION1                      = 29,
	I_POTION2                      = 30,
	I_QUAKESCROLL1                 = 96,
	I_QUAKESCROLL2                 = 97,
	I_QUIVER1                      = 74,
	I_QUIVER2                      = 75,
	I_QUIVER3                      = 76,
	I_QUIVER4                      = 105,
	I_RAFT                         = 26,
	I_RING1                        = 17,
	I_RING2                        = 18,
	I_RING3                        = 61,
	I_ROCSFEATHER                  = 91,
	I_RUPEE1                       = 0,
	I_RUPEE10                      = 86,
	I_RUPEE100                     = 87,
	I_RUPEE20                      = 38,
	I_RUPEE200                     = 40,
	I_RUPEE5                       = 1,
	I_RUPEE50                      = 39,
	I_SBOMB                        = 48,
	I_SELECTA                      = 45,
	I_SELECTB                      = 85,
	I_SHIELD1                      = 93,
	I_SHIELD2                      = 8,
	I_SHIELD3                      = 37,
	I_SPINSCROLL1                  = 94,
	I_SPINSCROLL2                  = 98,
	I_STOMPBOOTS                   = 120,
	I_STONEAGONY                   = 119,
	I_SWORD1                       = 5,
	I_SWORD2                       = 6,
	I_SWORD3                       = 7,
	I_SWORD4                       = 36,
	I_TRIFORCE                     = 20,
	I_TRIFORCEBIG                  = 44,
	I_WALLET500                    = 41,
	I_WALLET999                    = 42,
	I_WALLETA                      = 104,
	I_WAND                         = 25,
	I_WEALTHMEDAL                  = 109,
	I_WEALTHMEDAL2                 = 110,
	I_WEALTHMEDAL3                 = 111,
	I_WHIMSICALRING                = 122,
	I_WHISPRING1                   = 99,
	I_WHISPRING2                   = 100,
	I_WHISTLE                      = 31,
};

// Item pickup flags. OR (|) these together to use with item->Pickup
// Other values are reserved for internal usage, and have no effect.
enum ItemPickupBitflags
{
	IP_BIGRANGE                    = 0x0001, // INTERNAL Collision rectangle is large.
	IP_HOLDUP                      = 0x0002, // Link holds it up when collecting it.
	IP_ST_ITEM                     = 0x0004, // Sets the screen state "Item" when collected.
	IP_DUMMY                       = 0x0008, // A 'dummy' item, such as rupee markers in shops. Can't be collected and ignores gravity.
	IP_CHECK                       = 0x0010, // INTERNAL Check restrictions (money in a shop, etc.).
	IP_MONEY                       = 0x0020, // INTERNAL This item causes money loss (bomb upgrade, swindle room, etc.).
	IP_FADE                        = 0x0040, // INTERNAL Blinks if fadeclk>0.
	IP_ENEMYCARRIED                = 0x0080, // The item-carrying NPC carries it. If no NPC has an item, the most recently created NPC carries it.
	IP_TIMEOUT                     = 0x0100, // Disappears after 512 frames. Can be collected by melee weapons if the related quest rule is not set.
	IP_BIGTRIFORCE                 = 0x0200, // INTERNAL Large collision rectangle (used for large triforce).
	IP_NODRAW                      = 0x0400, // INTERNAL Don't draw this (for underwater items).
	IP_ST_SPECIALITEM              = 0x0800, // Sets the screen state "Special Item" when collected.
	IP_TRIGGERSECRETS              = 0x1000, // Triggers screen secrets when collected.
	IP_ALWAYSGRAB                  = 0x2000, // Item is always able to be picked up (ex. brang/hshot/arrows/melee weapons).
};

// LWeapon types. Use with Screen->CreateLWeapon() and Screen->LoadLWeapon().
enum LWeaponType
{
	LW_SWORD                       = 1,  // This cannot be created.
	LW_WAND                        = 12, // This cannot be created.
	LW_CANDLE                      = 12, // This cannot be created.
	LW_HAMMER                      = 19, // This cannot be created.
	LW_HOOKSHOT                    = 20, // This cannot be created.
	LW_CANEOFBYRNA                 = 27, // This cannot be created.
	LW_BUGNET                      = 52, // This cannot be created.
	LW_ARROW                       = 8,
	LW_BEAM                        = 2,  // Sword beam.
	LW_BRANG                       = 3,
	LW_BOMB                        = 6,
	LW_BOMBBLAST                   = 4,  // Bomb explosion.
	LW_SBOMB                       = 7,
	LW_SBOMBBLAST                  = 5,  // Super Bomb explosion.
	LW_FIRE                        = 9,
	LW_WHISTLE                     = 10, // Whistle music - kills Digdogger.
	LW_BAIT                        = 11,
	LW_MAGIC                       = 13, // Wand magic.
	LW_WIND                        = 15, // Whistle whirlwind.
	LW_REFMAGIC                    = 16, // Reflected wand magic.
	LW_REFFIREBALL                 = 17, // Reflected fireball.
	LW_REFROCK                     = 18, // Reflected rock.
	LW_REFBEAM                     = 28, // Reflected sword beam.
	LW_SPARKLE                     = 23,
	LW_FIRESPARKLE                 = 24, // Damages enemies.
	LW_SCRIPT1                     = 31,
	LW_SCRIPT2                     = 32,
	LW_SCRIPT3                     = 33,
	LW_SCRIPT4                     = 34,
	LW_SCRIPT5                     = 35,
	LW_SCRIPT6                     = 36,
	LW_SCRIPT7                     = 37,
	LW_SCRIPT8                     = 38,
	LW_SCRIPT9                     = 39,
	LW_SCRIPT10                    = 40,
	LW_ICE                         = 41,
	LW_THROWN                      = 44,
	LW_REFARROW                    = 53,
	LW_REFFIRE                     = 54,
	LW_REFFIRE2                    = 55,
};

// EWeapon types. Used with [Screen->CreateEWeapon] and [Screen->LoadEWeapon].
enum EWeaponType
{
	EW_ARROW                       = 130,
	EW_BRANG                       = 131,
	EW_BEAM                        = 132, // Sword beam.
	EW_ROCK                        = 133,
	EW_MAGIC                       = 134,
	EW_FIREBALL                    = 129,
	EW_FIREBALL2                   = 145, // Arcing boss fireball.
	EW_BOMB                        = 137, // Projectile bomb.
	EW_BOMBBLAST                   = 135, // Bomb explosion.
	EW_SBOMB                       = 138, // Projectile super bomb.
	EW_SBOMBBLAST                  = 136, // Super bomb explosion.
	EW_FIRETRAIL                   = 139,
	EW_FIRE                        = 140,
	EW_WIND                        = 141, // Wind wizzrobe magic.
	EW_FIRE2                       = 142,
	EW_SCRIPT1                     = 31,  // Dummy weapon, for use with scripts.
	EW_SCRIPT2                     = 32,
	EW_SCRIPT3                     = 33,
	EW_SCRIPT4                     = 34,
	EW_SCRIPT5                     = 35,
	EW_SCRIPT6                     = 36,
	EW_SCRIPT7                     = 37,
	EW_SCRIPT8                     = 38,
	EW_SCRIPT9                     = 39,
	EW_SCRIPT10                    = 40,
};

// Guy IDs. Used with [Screen->CreateNPC].
enum EnemyID
{
	NPC_ABEI                       = 1,
	NPC_AMA                        = 2,
	NPC_MERCHANT                   = 3,
	NPC_MOBLIN                     = 4,
	NPC_FIRE                       = 5,
	NPC_FAIRY                      = 6,
	NPC_GORIYA                     = 7,
	NPC_ZELDA                      = 8,
	NPC_ABEI2                      = 9,
	NPC_AQUAMENTUSL                = 93,
	NPC_AQUAMENTUSR                = 58,
	NPC_ARMOS                      = 37,
	NPC_BAT                        = 106,
	NPC_BOMBCHU                    = 160,
	NPC_BOULDER                    = 135,
	NPC_BUBBLEITEMP                = 118, // Permanently jinxes.
	NPC_BUBBLEITEMR                = 119, // Restores item usage.
	NPC_BUBBLEITEMT                = 117,
	NPC_BUBBLESWORDP               = 81,  // Permanently jinxes.
	NPC_BUBBLESWORDR               = 82,  // Restores sword usage.
	NPC_BUBBLESWORDT               = 51,
	NPC_CEILINGMASTER              = 101, // This enemy isn't implemented.
	NPC_DARKNUT1                   = 49,
	NPC_DARKNUT2                   = 50,
	NPC_DARKNUT3                   = 92,  // Splits when killed.
	NPC_DARKNUT4                   = 172, // This enemy isn't implemented.
	NPC_DARKNUT5                   = 87,  // Sword beams.
	NPC_DIGDOGGER1                 = 66,  // Splits into 1.
	NPC_DIGDOGGER3                 = 67,  // Splits into 3.
	NPC_DIGKID1                    = 68,  // Spawned by NPC_DIGDOGGER1.
	NPC_DIGKID2                    = 69,  // Spawned by NPC_DIGDOGGER3.
	NPC_DIGKID3                    = 70,  // Spawned by NPC_DIGDOGGER3.
	NPC_DIGKID4                    = 71,  // Spawned by NPC_DIGDOGGER3.
	NPC_DODONGO                    = 60,  // Uses one tile when walking vertically.
	NPC_DODONGOBS                  = 114, // Uses two tiles when walking vertically.
	NPC_DODONGOFIRE                = 115, // This enemy isn't implemented.
	NPC_ENEMYFIRE                  = 85,  // The Fire enemy in Princess Zelda's screen.
	NPC_FLOORMASTER                = 102, // This enemy isn't implemented.
	NPC_GANON                      = 78,
	NPC_GEL                        = 42,
	NPC_GELFIRE                    = 161,
	NPC_GELFIRETRIB                = 163,
	NPC_GELTRIB                    = 88,
	NPC_GHINI1                     = 35,
	NPC_GHINI2                     = 36,
	NPC_GHINIMGC                   = 173, // This enemy isn't implemented.
	NPC_GIBDO                      = 54,
	NPC_GLEEOK1                    = 62,
	NPC_GLEEOK1FIRE                = 109,
	NPC_GLEEOK2                    = 63,
	NPC_GLEEOK2FIRE                = 110,
	NPC_GLEEOK3                    = 64,
	NPC_GLEEOK3FIRE                = 111,
	NPC_GLEEOK4                    = 65,
	NPC_GLEEOK4FIRE                = 112,
	NPC_GOHMA1                     = 72,
	NPC_GOHMA2                     = 73,
	NPC_GOHMA3                     = 121,
	NPC_GOHMAFIRE                  = 122,
	NPC_GORIYA1                    = 45,
	NPC_GORIYA2                    = 46,
	NPC_GORIYA3                    = 136,
	NPC_GRAPBUGHP                  = 174, // This enemy isn't implemented.
	NPC_GRAPBUGMP                  = 175, // This enemy isn't implemented.
	NPC_ITEMFAIRY                  = 84,
	NPC_KEESE1                     = 38,
	NPC_KEESE2                     = 39,
	NPC_KEESE3                     = 40,
	NPC_KEESETRIB                  = 90,
	NPC_LANMOLA1                   = 74,
	NPC_LANMOLA2                   = 75,
	NPC_LEEVER1                    = 26,
	NPC_LEEVER2                    = 27,
	NPC_LEEVER3                    = 137,
	NPC_LIKELIKE                   = 53,
	NPC_LYNEL1                     = 30,
	NPC_LYNEL2                     = 31,
	NPC_LYNEL3                     = 168,
	NPC_MANHANDLA                  = 61,
	NPC_MANHANDLA2                 = 94,
	NPC_MOBLIN1                    = 28,
	NPC_MOBLIN2                    = 29,
	NPC_MOLDORM                    = 59,
	NPC_OCTOROCK1F                 = 22,
	NPC_OCTOROCK1S                 = 20,
	NPC_OCTOROCK2F                 = 23,
	NPC_OCTOROCK2S                 = 21,
	NPC_OCTOROCKBOMBF              = 141,
	NPC_OCTOROCKBOMBS              = 140,
	NPC_OCTOROCKFIREF              = 139,
	NPC_OCTOROCKFIRES              = 138,
	NPC_OCTOROCKMGC                = 86,
	NPC_PATRA1                     = 76,
	NPC_PATRA2                     = 104,
	NPC_PATRA3                     = 105,
	NPC_PATRABS                    = 103,
	NPC_PATRAOVAL                  = 77,
	NPC_PEAHAT                     = 32,
	NPC_PEAHATFIRE                 = 169, // This enemy isn't implemented.
	NPC_POLSVOICE                  = 55,
	NPC_POLSVOICEBS                = 171, // This enemy isn't implemented.
	NPC_POLSVOICEMGC               = 170,
	NPC_ROCK                       = 34,
	NPC_ROPE1                      = 44,
	NPC_ROPE2                      = 80,
	NPC_SHOOTFBALL                 = 83,
	NPC_SHOOTFLAME                 = 158,
	NPC_SHOOTFLAME2                = 159,
	NPC_SHOOTMAGIC                 = 154,
	NPC_SHOOTROCK                  = 155,
	NPC_SHOOTSPEAR                 = 156,
	NPC_SHOOTSWORD                 = 157,
	NPC_SPINTILE                   = 166,
	NPC_SPINTILERND                = 167, // Random spin tile.
	NPC_STALFOS1                   = 41,
	NPC_STALFOS2                   = 79,
	NPC_STALFOS3                   = 120,
	NPC_TEKTITE1                   = 24,
	NPC_TEKTITE2                   = 25,
	NPC_TEKTITE3                   = 165, // This enemy isn't implemented.
	NPC_TRAP                       = 47,
	NPC_TRAP8WAY                   = 142, // This enemy isn't implemented.
	NPC_TRAPBACKSLASHC             = 146, // This enemy isn't implemented.
	NPC_TRAPBACKSLASHLOS           = 147, // This enemy isn't implemented.
	NPC_TRAPCCLOCKWISEC            = 150, // This enemy isn't implemented.
	NPC_TRAPCCLOCKWISELOS          = 151, // This enemy isn't implemented.
	NPC_TRAPCLOCKWISEC             = 148, // This enemy isn't implemented.
	NPC_TRAPCLOCKWISELOS           = 149, // This enemy isn't implemented.
	NPC_TRAPDIAG                   = 143, // This enemy isn't implemented.
	NPC_TRAPHORIZC                 = 97,
	NPC_TRAPHORIZLOS               = 95,
	NPC_TRAPSLASHC                 = 144, // This enemy isn't implemented.
	NPC_TRAPSLASHLOS               = 145,
	NPC_TRAPVERTC                  = 98,
	NPC_TRAPVERTLOS                = 96,
	NPC_TRIGGER                    = 116,
	NPC_VIRE                       = 52,
	NPC_VIRETRIB                   = 91,
	NPC_WALLMASTER                 = 48,
	NPC_WIZZROBE1                  = 56,  // Teleports.
	NPC_WIZZROBE2                  = 57,  // Phases through blocks.
	NPC_WIZZROBEBAT                = 107,
	NPC_WIZZROBEBAT2               = 108, // This enemy isn't implemented.
	NPC_WIZZROBEFIRE               = 99,
	NPC_WIZZROBEICE                = 153, // This enemy isn't implemented.
	NPC_WIZZROBEMIRR               = 113,
	NPC_WIZZROBESUMM               = 152,
	NPC_WIZZROBEWIND               = 100,
	NPC_ZOL                        = 43,
	NPC_ZOLFIRE                    = 162,
	NPC_ZOLFIRETRIB                = 164,
	NPC_ZOLTRIB                    = 89,
	NPC_ZORA                       = 33,
};

// NPC Misc. Flags.
enum EnemyMiscBitflags
{
	NPCMF_0POWERWEAPS              = 0x0001, // Damaged by 0-Power Weapons.
	NPCMF_ISINVISIBLE              = 0x0002, // Is Invisible.
	NPCMF_NEVERRETURNS             = 0x0004, // Never Returns After Death.
	NPCMF_NOT_BEATABLE             = 0x0008, // Doesn't Count as beatable Enemy.
	NPCMF_SPAWNFLICKER             = 0x0010, // Unused.
	NPCMF_ONLY_LENS                = 0x0020, // Only Seen By Lens of truth.
	NPCMF_FLASHING                 = 0x0040, // Is Flashing.
	NPCMF_FLICKERING               = 0x0080, // Is Flickering.
	NPCMF_TRANSLUCENT              = 0x0100, // Is translucent.
	NPCMF_SHIELDED_FRONT           = 0x0200, // Shielded on Front.
	NPCMF_SHIELDED_LEFT            = 0x0400, // Shielded on Left.
	NPCMF_SHIELDED_RIGHT           = 0x0800, // Shielded on Right.
	NPCMF_SHIELDED_BACK            = 0x1000, // Shielded on Back.
	NPCMF_HAMMERBREAKS             = 0x2000, // Hammer Can break Shield.
};

// NPC Spawn Flags.
enum EnemySpawnBitflags
{
	NPCSF_ZORA                     = 0x0001, // Spawned by Zora Screen Flag.
	NPCSF_FALLINGROCK              = 0x0002, // Spawned by Falling Rocks Screen Flag.
	NPCSF_CORNERTRAP               = 0x0004, // Spawned by Corner Traps Screen Flag.
	NPCSF_HORIZTRAP                = 0x0008, // Spawned by Horiz Trap Combo Type or Flag.
	NPCSF_VERTTRAP                 = 0x0010, // Spawned by Vert Trap Combo Type or Flag.
	NPCSF_4WAYTRAP                 = 0x0020, // Spawned by 4-Way Trap Combo Type or Flag.
	NPCSF_LRTRAP                   = 0x0040, // Spawned by LR Trap Combo Type or Flag.
	NPCSF_UPTRAP                   = 0x0080, // Spawned by UD Trap Combo Type or Flag.
	NPCSF_MIDTRAP                  = 0x0100, // Spawned by Middle Traps Screen Flag.
	NPCSF_STATUEFIRE               = 0x0200, // Spawned by Statue Fire Screen Flag.
	NPCSF_ARMOS                    = 0x0400, // Spawned by Armos Combo Type.
	NPCSF_GRAVE                    = 0x0800, // Spawned by Grave Combo Type.
	NPCSF_GANONROOM                = 0x1000, // Spawned by Ganon Room Type.
	NPCSF_SPAWNANIM                = 0x2000, // Spawn Animation Type.
};

// Font types. Use with Screen->DrawCharacter *note -some of these fonts may not represent normal ascii characters,
// and all of these are completely undocumented. Use at your own peril.
enum FontType
{
	FONT_Z1                        = 0,
	FONT_Z3                        = 1,
	FONT_Z3SMALL                   = 2,
	FONT_DEF                       = 3,
	FONT_L                         = 4,
	FONT_L2                        = 5,
	FONT_P                         = 6,
	FONT_MATRIX                    = 7,
	FONT_ZTIME                     = 8,
	FONT_S                         = 9,
	FONT_S2                        = 10,
	FONT_SP                        = 11,
	FONT_SUBSCREEN1                = 12,
	FONT_SUBSCREEN2                = 13,
	FONT_SUBSCREEN3                = 14,
	FONT_SUBSCREEN4                = 15,
	FONT_GBLA                      = 16,
	FONT_LA                        = 16,
	FONT_GORON                     = 17,
	FONT_ZORAN                     = 18,
	FONT_HYLIAN1                   = 19,
	FONT_HYLIAN2                   = 20,
	FONT_HYLIAN3                   = 21,
	FONT_HYLIAN4                   = 22,
	FONT_GBORACLE                  = 23,
	FONT_GBORACLEP                 = 24,
	FONT_DSPHANTOM                 = 25,
	FONT_DSPHANTOMP                = 26,
	FONT_ATARI800                  = 27,
	FONT_ACORN                     = 28,
	FONT_ADOS                      = 29,
	FONT_ALLEGRO                   = 30,
	FONT_APPLE2                    = 31,
	FONT_APPLE2_80COL              = 32,
	FONT_APPLE2GS                  = 33,
	FONT_AQUARIUS                  = 34,
	FONT_ATARI400                  = 35,
	FONT_C64                       = 36,
	FONT_C64_HIRES                 = 37,
	FONT_CGA                       = 38,
	FONT_COCO                      = 39,  // Invrse chars for upper.
	FONT_COCO2                     = 40,  // Upper and lower.
	FONT_COUPE                     = 41,
	FONT_CPC                       = 42,  // Amstrad.
	FONT_FANTASY                   = 43,
	FONT_FDS_KANA                  = 44,
	FONT_FDSLIKE                   = 45,
	FONT_FDS_ROMAN                 = 46,
	FONT_FF                        = 47,  // Final Fantasy.
	FONT_FUTHARK                   = 48,  // Runes.
	FONT_GAIA                      = 49,
	FONT_HIRA                      = 50,
	FONT_JP                        = 51,
	FONT_KONG                      = 52,
	FONT_MANA                      = 53,
	FONT_MARIOLAND                 = 54,
	FONT_MOT                       = 55,  // Motorola.
	FONT_MSX0                      = 56,  // MSX, Mode 0.
	FONT_MSX1                      = 57,  // MSX, Mod 1.
	FONT_PET                       = 58,
	FONT_PSTART                    = 59,  // Nintendo-esque.
	FONT_SATURN                    = 60,  // Mr. Saturn.
	FONT_SCIFI                     = 61,
	FONT_SHERWOOD                  = 62,
	FONT_SINQL                     = 63,  // Sinclair QL.
	FONT_SPECTRUM                  = 64,
	FONT_SPECTRUM_LG               = 65,
	FONT_TI99                      = 66,
	FONT_TRS                       = 67,
	FONT_Z2                        = 68,  // Zelda 2 plus custom lowercase.
	FONT_ZX                        = 69,
	FONT_LISA                      = 70,  // Lisa OS System Font.
	FONT_NFONT                     = 71,
	FONT_S3                        = 72,
	FONT_CV3                       = 73,
	FONT_CHRONO                    = 74,
	FONT_NFONT2                    = 75,
	FONT_BAK                       = 76,
	FONT_GUNSTAR                   = 77,
	FONT_SMW_CREDITS               = 78,
	FONT_WL4                       = 79,
	FONT_BSZ                       = 80,
	FONT_BSZ_PROP                  = 81,
	FONT_FF6                       = 82,
	FONT_EVO_EDEN                  = 83,
	FONT_SMT                       = 84,
	FONT_ACTRAISER                 = 85,
	FONT_BAK_RUNES                 = 86,
	FONT_BAK_SMALL                 = 87,
	FONT_DISORIENT                 = 88,
	FONT_DOOM                      = 89,
	FONT_DRACULA                   = 90,
	FONT_EJIM                      = 91,
	FONT_FALLOUT                   = 92,
	FONT_GRADIUS                   = 93,
	FONT_LAMU_MSX                  = 94,
	FONT_MEGAMAN                   = 95,
	FONT_WINGDINGS                 = 96,
	FONT_PKMN2                     = 97,
	FONT_SMRPG                     = 98,
	FONT_UNDERTALE                 = 99,
	FONT_SMW                       = 100,
};

// PrintString Text Formats. Use with Screen->DrawString.
enum TextFormatAlign
{
	TF_NORMAL                      = 0, // Treats the left-most char as (x).
	TF_CENTERED                    = 1, // Prints the string centered on (x).
	TF_RIGHT                       = 2, // Treats the right-most char as (x).
};

// Polygon rendering modes. Use with Screen->"Psuedo 3D" or "*3D" drawing functions. ie; Polygon, Quad, or Triangle
// For more detail on these polygon rendering modes, see https://github.com/ZQuestClassic/ZQuestClassic/blob/main/third_party/allegro_legacy/docs/src/allegro._tx#L7808.
enum PolygonRenderMode
{
	PT_FLAT                        = 0,  // Single color shading.
	PT_FLATSHADED                  = 1,  // "" with flat shading (*3D only).
	PT_COLSHADED                   = 2,  // "" with color shading (*3D only).
	PT_TEXTURE                     = 3,  // Texture mapped polygon using 2d linear interpolation.
	PT_PTEXTURE                    = 4,  // "".
	PT_MASKTEXTURE                 = 5,  // Transparent texture mapped polygon using 2d linear interpolation.
	PT_MASKPTEXTURE                = 6,  // "".
	PT_LITTEXTURE                  = 7,  // "" with lighting (*3D only).
	PT_LITPTEXTURE                 = 8,  // "" (*3D only).
	PT_MASKLITTEXTURE              = 9,  // "" with transparency.
	PT_MASKLITPTEXTURE             = 10, // "".
	PT_TRANSTEXTURE                = 11, // Translucent texture mapped polygon using 2d linear interpolation.
	PT_TRANSPTEXTURE               = 12, // "".
	PT_MASKTRANSTEXTURE            = 13, // Translucent and transparent texture mapped polygon using 2d linear interpolation.
	PT_MASKTRANSPTEXTURE           = 14, // "".
};

// Screen Enemy Flag categories, handled in the same way as the SF_ constants.
// Used with [Screen->EFlags].
enum ScreenEnemyFlagIndex
{
	SEF_SPAWN                      = 0, // Corresponds to [ScreenEnemyFlagSpawn].
	SEF_LIST1                      = 1, // Corresponds to [ScreenEnemyFlagList1].
	SEF_LIST2                      = 2, // Corresponds to [ScreenEnemyFlagList2].
};

// Used with [Screen->RoomType], [mapdata::RoomType].
enum RoomType
{
	RT_DOORREPAIR                  = 5,
	RT_FEEDTHEGORIYA               = 7,
	RT_GAMBLE                      = 4,
	RT_GANON                       = 15,
	RT_ITEMPOND                    = 17, // Doesn't work.
	RT_LEARNSLASH                  = 19,
	RT_LEVEL9ENTRANCE              = 8,
	RT_MAGICUPGRADE                = 18,
	RT_MONEYORLIFE                 = 12,
	RT_MOREARROWS                  = 20,
	RT_MOREBOMBS                   = 11,
	RT_NONE                        = 0,
	RT_PAYFORINFO                  = 2,
	RT_POTIONORHEART               = 6,
	RT_POTIONSHOP                  = 9,
	RT_SECRETMONEY                 = 3,
	RT_SHOP                        = 10,
	RT_SPECIALITEM                 = 1,
	RT_STAIRWARP                   = 14,
	RT_TAKEONEITEM                 = 21,
	RT_TENRUPEES                   = 13,
	RT_ZELDA                       = 16,
};

// Used with [Game->DMapFlags].
// @deprecated Use [DMapFlag] and [dmapdata::Flagset] instead!
enum DMapBitflags
{
	DMF_CAVESNOTCELLARS            = 0x0001,  // Use caves instead of item cellars.
	DMF_3STAIRWARPS                = 0x0002,  // Allow 3-stair warps.
	DMF_WWIND                      = 0x0004,  // Allow whistle whirlwinds.
	DMF_GUYCAVES                   = 0x0008,  // Special rooms and guys are in caves only.
	DMF_NOCOMPASS                  = 0x0010,  // Don't display compass marker in minimap.
	DMF_WAVY                       = 0x0020,  // Underwater wave effect.
	DMF_WWINDRET                   = 0x0040,  // Whistle whirlwind returns Link to beginning.
	DMF_ALWAYSINTROMSG             = 0x0080,  // Always display intro string.
	DMF_VIEWMAP                    = 0x0100,  // View overworld map by pressing 'Map'.
	DMF_DMAPMAP                    = 0x0200,  // ...But only show screens marked in minimap.
	DMF_MINIMAPCOLORFIX            = 0x0400,  // Use minimap foreground color 2.
	DMF_MINIMAPCOLOURFIX           = 0x0400,  // Use minimap foreground color 2.
	DMF_SCRIPT1                    = 0x0800,  // DMap Script Flags.
	DMF_SCRIPT2                    = 0x1000,
	DMF_SCRIPT3                    = 0x2000,
	DMF_SCRIPT4                    = 0x4000,
	DMF_SCRIPT5                    = 0x8000,
	DMF_SIDEVIEW                   = 0x10000,
	DMF_LAYER3ISBACKGROUND         = 0x20000,
};

// Door Positions; indices of Screen->Door[].
enum DoorIndex
{
	DOOR_UP                        = 0,
	DOOR_DOWN                      = 1,
	DOOR_LEFT                      = 2,
	DOOR_RIGHT                     = 3,
};

// Door types. Use with Screen->Door[].
enum DoorType
{
	D_WALL                         = 0,
	D_OPEN                         = 1,
	D_LOCKED                       = 2,
	D_UNLOCKED                     = 3,  // A locked door that has been opened.
	D_SHUTTER                      = 4,  // Defeat enemies to unlock this door.
	D_BOMB                         = 6,  // A door that changes when bombed.
	D_BOMBED                       = 7,  // A door that has been bombed.
	D_WALKTHRU                     = 8,  // Push against the wall to pass through.
	D_BOSSLOCKED                   = 10,
	D_BOSSUNLOCKED                 = 11, // A boss door that has been opened.
	D_OPENSHUTTER                  = 12, // A shutter that has been opened.
	D_1WAYSHUTTER                  = 14, // A shutter that locks behind you and never opens.
	D_NONE                         = 16, // No door at all. Hero will not auto-walk.
};

// Sprite lists. Used with [Screen->ClearSprites].
enum SpriteList
{
	SL_GUYS                        = 0, // Enemies.
	SL_ITEMS                       = 1, // Items.
	SL_EWPNS                       = 2, // Enemy weapons.
	SL_LWPNS                       = 3, // Link's weapons.
	SL_DECORATIONS                 = 4, // Grass clippings, Hover boots glow, etc.
	SL_PARTICLES                   = 5, // Farore's Wind particles.
};

// Combo flags. Use with Screen->ComboF[].
enum ComboFlag
{
	CF_NONE                        = 0,
	CF_PUSHUPDOWN                  = 1,
	CF_PUSH4WAY                    = 2,
	CF_WHISTLE                     = 3,
	CF_CANDLE1                     = 4,
	CF_ARROW                       = 5,
	CF_BOMB                        = 6,
	CF_FAIRY                       = 7,
	CF_RAFT                        = 8,
	CF_ARMOSSECRET                 = 9,
	CF_ARMOSITEM                   = 10,
	CF_SBOMB                       = 11,
	CF_RAFTBRANCH                  = 12,
	CF_DIVEITEM                    = 13,
	CF_LENSMARKER                  = 14,
	CF_ZELDA                       = 15,
	CF_SECRETS01                   = 16,
	CF_SECRETS02                   = 17,
	CF_SECRETS03                   = 18,
	CF_SECRETS04                   = 19,
	CF_SECRETS05                   = 20,
	CF_SECRETS06                   = 21,
	CF_SECRETS07                   = 22,
	CF_SECRETS08                   = 23,
	CF_SECRETS09                   = 24,
	CF_SECRETS10                   = 25,
	CF_SECRETS11                   = 26,
	CF_SECRETS12                   = 27,
	CF_SECRETS13                   = 28,
	CF_SECRETS14                   = 29,
	CF_SECRETS15                   = 30,
	CF_SECRETS16                   = 31,
	CF_TRAPH                       = 32,
	CF_TRAPV                       = 33,
	CF_TRAP4WAY                    = 34,
	CF_TRAPLR                      = 35,
	CF_TRAPUD                      = 36,
	CF_ENEMY0                      = 37,
	CF_ENEMY1                      = 38,
	CF_ENEMY2                      = 39,
	CF_ENEMY3                      = 40,
	CF_ENEMY4                      = 41,
	CF_ENEMY5                      = 42,
	CF_ENEMY6                      = 43,
	CF_ENEMY7                      = 44,
	CF_ENEMY8                      = 45,
	CF_ENEMY9                      = 46,
	CF_PUSHLR                      = 47,
	CF_PUSHUP                      = 48,
	CF_PUSHDOWN                    = 49,
	CF_PUSHLEFT                    = 50,
	CF_PUSHRIGHT                   = 51,
	CF_PUSHUPDOWNNS                = 52,
	CF_PUSHLEFTRIGHTNS             = 53,
	CF_PUSH4WAYNS                  = 54,
	CF_PUSHUPNS                    = 55,
	CF_PUSHDOWNNS                  = 56,
	CF_PUSHLEFTNS                  = 57,
	CF_PUSHRIGHTNS                 = 58,
	CF_PUSHUPDOWNINS               = 59,
	CF_PUSHLEFTRIGHTINS            = 60,
	CF_PUSH4WAYINS                 = 61,
	CF_PUSHUPINS                   = 62,
	CF_PUSHDOWNINS                 = 63,
	CF_PUSHLEFTINS                 = 64,
	CF_PUSHRIGHTINS                = 65,
	CF_BLOCKTRIGGER                = 66,
	CF_NOBLOCKS                    = 67,
	CF_BRANG1                      = 68,
	CF_BRANG2                      = 69,
	CF_BRANG3                      = 70,
	CF_ARROW2                      = 71,
	CF_ARROW3                      = 72,
	CF_CANDLE2                     = 73,
	CF_WANDFIRE                    = 74,
	CF_DINSFIRE                    = 75,
	CF_WANDMAGIC                   = 76,
	CF_REFMAGIC                    = 77,
	CF_REFFIREBALL                 = 78,
	CF_SWORD1                      = 79,
	CF_SWORD2                      = 80,
	CF_SWORD3                      = 81,
	CF_SWORD4                      = 82,
	CF_SWORD1BEAM                  = 83,
	CF_SWORD2BEAM                  = 84,
	CF_SWORD3BEAM                  = 85,
	CF_SWORD4BEAM                  = 86,
	CF_HOOKSHOT                    = 87,
	CF_WAND                        = 88,
	CF_HAMMER                      = 89,
	CF_STRIKE                      = 90,
	CF_BLOCKHOLE                   = 91,
	CF_MAGICFAIRY                  = 92,
	CF_ALLFAIRY                    = 93,
	CF_SINGLE                      = 94,
	CF_SINGLE16                    = 95,
	CF_NOENEMY                     = 96,
	CF_NOGROUNDENEMY               = 97,
	CF_SCRIPT1                     = 98,
	CF_SCRIPT2                     = 99,
	CF_SCRIPT3                     = 100,
	CF_SCRIPT4                     = 101,
	CF_SCRIPT5                     = 102,
	CF_RAFTBOUNCE                  = 103,
	CF_PUSHED                      = 104,
	CF_SCRIPT6                     = 105,
	CF_SCRIPT7                     = 106,
	CF_SCRIPT8                     = 107,
	CF_SCRIPT9                     = 108,
	CF_SCRIPT10                    = 109,
	CF_SCRIPT11                    = 110,
	CF_SCRIPT12                    = 111,
	CF_SCRIPT13                    = 112,
	CF_SCRIPT14                    = 113,
	CF_SCRIPT15                    = 114,
	CF_SCRIPT16                    = 115,
	CF_SCRIPT17                    = 116,
	CF_SCRIPT18                    = 117,
	CF_SCRIPT19                    = 118,
	CF_SCRIPT20                    = 119,
	CF_SCRIPT_PIT                  = 120, // Pit or Hole (Scripted).
	CF_SCRIPT_PIT_FALL             = 121, // Pit or Hole, Fall Down Floor (Scripted).
	CF_SCRIPT_LAVA                 = 122, // Fire or Lava (Scripted).
	CF_SCRIPT_ICE                  = 123, // Ice (Scripted).
	CF_SCRIPT_ICE_DMG              = 124, // Ice, Damaging (Scripted).
	CF_SCRIPT_DAMAGE_1             = 125, // Damage-1 (Scripted).
	CF_SCRIPT_DAMAGE_2             = 126, // Damage-2 (Scripted).
	CF_SCRIPT_DAMAGE_4             = 127, // Damage-4 (Scripted).
	CF_SCRIPT_DAMAGE_8             = 128, // Damage-8 (Scripted).
	CF_SCRIPT_DAMAGE_16            = 129, // Damage-16 (Scripted).
	CF_SCRIPT_DAMAGE_32            = 130, // Damage-32 (Scripted).
	CF_SCRIPT_FREEZE_SCREEN        = 131, // Freeze Screen (Unimplemented).
	CF_SCRIPT_FREEZE_SCREEN_EXCEPT_FFCS = 132, // Freeze Screen, Except FFCs (Unimplemented).
	CF_SCRIPT_FREEZE_FFCS_ONLY     = 133, // Freeze FFCs Only (Unimplemented).
	CF_LW_SCRIPT1                  = 134, // Trigger LW_SCRIPT1 (Unimplemented).
	CF_LW_SCRIPT2                  = 135, // Trigger LW_SCRIPT2 (Unimplemented).
	CF_LW_SCRIPT3                  = 136, // Trigger LW_SCRIPT3 (Unimplemented).
	CF_LW_SCRIPT4                  = 137, // Trigger LW_SCRIPT4 (Unimplemented).
	CF_LW_SCRIPT5                  = 138, // Trigger LW_SCRIPT5 (Unimplemented).
	CF_LW_SCRIPT6                  = 139, // Trigger LW_SCRIPT6 (Unimplemented).
	CF_LW_SCRIPT7                  = 140, // Trigger LW_SCRIPT7 (Unimplemented).
	CF_LW_SCRIPT8                  = 141, // Trigger LW_SCRIPT8 (Unimplemented).
	CF_LW_SCRIPT9                  = 142, // Trigger LW_SCRIPT9 (Unimplemented).
	CF_LW_SCRIPT10                 = 143, // Trigger LW_SCRIPT10 (Unimplemented).
	CF_SCRIPT_DIG                  = 144, // Dig Spot (Scripted).
	CF_SCRIPT_DIG_NEXT             = 145, // Dig Spot, Next (Scripted).
	CF_SCRIPT_DIG_ITEM             = 146, // Dig Spot, Special Item (Scripted).
	CF_SCRIPT_POT_SLASH            = 147, // Pot, Slashable (Scripted).
	CF_SCRIPT_POT_LIFT             = 148, // Pot, Liftable (Scripted).
	CF_SCRIPT_POT_SLASH_OR_LIFT    = 149, // Pot, Slash or Lift (Scripted).
	CF_SCRIPT_LIFT_NORMAL          = 150, // Rock, Lift Normal (Scripted).
	CF_SCRIPT_LIFT_HEAVY           = 151, // Rock, Lift Heavy (Scripted).
	CF_SCRIPT_DROPSET_ITEM         = 152, // Dropset Item (Scripted).
	CF_SCRIPT_SPECIAL_ITEM         = 153, // Special Item (Scripted).
	CF_SCRIPT_DROP_KEY             = 154, // Drop Key (Scripted).
	CF_SCRIPT_DROP_LKEY            = 155, // Drop level-Specific Key (Scripted).
	CF_SCRIPT_DROP_COMPASS         = 156, // Drop Compass (Scripted).
	CF_SCRIPT_DROP_MAP             = 157, // Drop Map (Scripted).
	CF_SCRIPT_DROP_BOSS_KEY        = 158, // Drop Boss Key (Scripted).
	CF_SCRIPT_SPAWN_NPC            = 159, // Spawn NPC (Scripted).
	CF_SCRIPT_SWITCHHOOK           = 160, // SwitchHook Spot (Scripted).
	CF_SCRIPT21                    = 120,
	CF_SCRIPT22                    = 121,
	CF_SCRIPT23                    = 122,
	CF_SCRIPT24                    = 123,
	CF_SCRIPT25                    = 124,
	CF_SCRIPT26                    = 125,
	CF_SCRIPT27                    = 126,
	CF_SCRIPT28                    = 127,
	CF_SCRIPT29                    = 128,
	CF_SCRIPT30                    = 129,
	CF_SCRIPT31                    = 130,
	CF_SCRIPT32                    = 144,
	CF_SCRIPT33                    = 145,
	CF_SCRIPT34                    = 146,
	CF_SCRIPT35                    = 147,
	CF_SCRIPT36                    = 148,
	CF_SCRIPT37                    = 149,
	CF_SCRIPT38                    = 150,
	CF_SCRIPT39                    = 151,
	CF_SCRIPT40                    = 152,
	CF_SCRIPT41                    = 153,
	CF_SCRIPT42                    = 154,
	CF_SCRIPT43                    = 155,
	CF_SCRIPT44                    = 156,
	CF_SCRIPT45                    = 157,
	CF_SCRIPT46                    = 158,
	CF_SCRIPT47                    = 159,
	CF_SCRIPT48                    = 160,
	CF_SIDEVIEW_LADDER             = 161, // Sideview Ladder.
	CF_SIDEVIEW_PLATFORM           = 162, // Sideview Platform.
	CF_NO_ENEMIES_SPAWN            = 163, // No Enemies Spawn.
	CF_ALL_ENEMIES_SPAWN           = 164, // All Enemies Spawn.
	CF_SECRETS_NEXT                = 165, // Secrets->Next.
};

// Used with [ffc::Flags].
enum FFCFlag
{
	FFCF_OVERLAY                   = 0,  // Draw Over (draw between layers 4 and 5).
	FFCF_TRANS                     = 1,  // Translucent.
	FFCF_SOLID                     = 2,  // Solidity (Partially Implemented).
	FFCF_CARRYOVER                 = 3,  // Carry Over.
	FFCF_STATIONARY                = 4,  // Stationary.
	FFCF_CHANGER                   = 5,  // Is A Changer.
	FFCF_PRELOAD                   = 6,  // Run Script On Screen Init.
	FFCF_LENSVIS                   = 7,  // Only Visible to Lens of Truth.
	FFCF_RESET                     = 8,  // Script Resets When Carried Over.
	FFCF_ETHEREAL                  = 9,  // The FFC's Combo Type is ignored.
	FFCF_IGNOREHOLDUP              = 10, // The FFC is updated while Link is holding up an item.
	FFCF_IGNORECHANGER             = 11, // The FFC ignores changers.
	FFCF_IMPRECISIONCHANGER        = 12, // The FFC is affected by changers if it is within 1px on both axis, not subpixel alignment.
	FFCF_LENSINVIS                 = 13, // Not visible to the lens of truth.
};

// Used with [mapdata::FFCFlags].
enum FFCBitflags
{
	FFCBF_OVERLAY                  = 0x001,
	FFCBF_TRANS                    = 0x002,
	FFCBF_SOLID                    = 0x004,
	FFCBF_CARRYOVER                = 0x008,
	FFCBF_STATIONARY               = 0x010,
	FFCBF_CHANGER                  = 0x020,
	FFCBF_PRELOAD                  = 0x040,
	FFCBF_LENSVIS                  = 0x080,
	FFCBF_RESET                    = 0x100,
	FFCBF_ETHEREAL                 = 0x200,
	FFCBF_IGNOREHOLDUP             = 0x400,
	FFCBF_IGNORECHANGER            = 0x800,
	FFCBF_IMPRECISIONCHANGER       = 0x1000,
	FFCBF_LENSINVIS                = 0x2000,
};

// Used with [AimEWeapon].
enum AimType
{
	AT_NONE                        = 0,
	AT_4DIR                        = 1,
	AT_8DIR                        = 2,
	AT_ANGULAR                     = 3,
	AT_RAND4DIR                    = 4,
	AT_RAND8DIR                    = 5,
	AT_RANDANGULAR                 = 6,
};

// Used with [Game->GameOverScreen].
enum GameOverScreenElementIndex
{
	GOS_BACKGROUND                 = 0,
	GOS_TEXT_COLOUR                = 1,
	GOS_CURSOR_TILE                = 2,
	GOS_CURSOR_CSET                = 3,
	GOS_CURSOR_SOUND               = 4,
	GOS_TEXT_CONTINUE_COLOUR       = 5,
	GOS_TEXT_SAVE_COLOUR           = 6,
	GOS_TEXT_RETRY_COLOUR          = 7,
	GOS_TEXT_CONTINUE_FLASH        = 8,
	GOS_TEXT_SAVE_FLASH            = 9,
	GOS_TEXT_RETRY_FLASH           = 10,
	GOS_MIDI                       = 11,
	GOS_CUR_FLIP                   = 12,
	GOS_TEXT_DONTSAVE_COLOUR       = 13,
	GOS_TEXT_SAVEQUIT_COLOUR       = 14,
	GOS_TEXT_SAVE2_COLOUR          = 15,
	GOS_TEXT_QUIT_COLOUR           = 16,
	GOS_TEXT_DONTSAVE_FLASH        = 17,
	GOS_TEXT_SAVEQUIT_FLASH        = 18,
	GOS_TEXT_SAVE2_FLASH           = 19,
	GOS_TEXT_QUIT_FLASH            = 20,
	GOS_EXTRA1                     = 21,
	GOS_EXTRA2                     = 22,
	GOS_EXTRA3                     = 23,
};

// Used with [Game->GameOverStrings].
enum GameOverStringIndex
{
	GOSTR_CONTINUE                 = 0, // (Continue:Retry:Save) Screen.
	GOSTR_SAVE                     = 1, // (Continue:Retry:Save) Screen.
	GOSTR_RETRY                    = 2, // (Continue:Retry:Save) Screen.
	GOSTR_DONT_SAVE                = 3, // Savepoint Screen.
	GOSTR_SAVEANDQUIT              = 4, // Save and Quit Screen.
	GOSTR_SAVE2                    = 5, // Savepoint Screen.
	GOSTR_QUIT                     = 6, // Save and Quit Screen.
};

// Blit mode flags.
// Some modes cannot be combined. If a combination is not supported, an error
// detailing this will be shown in allegro.log.
enum BlitModeBitflags
{
	BITDX_NORMAL                   = 0,
	BITDX_TRANS                    = 1, // Translucent.
	BITDX_PIVOT                    = 2, // THe sprite will rotate at a specific point, instead of its center.
	BITDX_VFLIP                    = 4, // Vertical Flip.
	BITDX_HFLIP                    = 8, // Horizontal Flip.
};

// Used with [Hero->SetItemSlot].
enum ItemRequireBitflags
{
	ITM_REQUIRE_NONE               = 0b00,
	ITM_REQUIRE_INVENTORY          = 0b01,
	ITM_REQUIRE_A_SLOT_RULE        = 0b10,
};

// Input->Mouse[].
enum MouseIndex
{
	MOUSE_X                        = 0,
	MOUSE_Y                        = 1,
	MOUSE_Z                        = 2,
	MOUSE_LEFT                     = 3,
	MOUSE_RIGHT                    = 4,
	MOUSE_MIDDLE                   = 5,
};

// Screen->SecretCombo.
enum SecretComboIndex
{
	SECCMB_BCANDLE                 = 0,
	SECCMB_ARROW                   = 1,
	SECCMB_BOMB                    = 2,
	SECCMB_STAIRS                  = 3,
	SECCMB_SECRET01                = 4,
	SECCMB_SECRET02                = 5,
	SECCMB_SECRET03                = 6,
	SECCMB_SECRET04                = 7,
	SECCMB_SECRET05                = 8,
	SECCMB_SECRET06                = 9,
	SECCMB_SECRET07                = 10,
	SECCMB_SECRET08                = 11,
	SECCMB_SECRET09                = 12,
	SECCMB_SECRET10                = 13,
	SECCMB_SECRET11                = 14,
	SECCMB_SECRET12                = 15,
	SECCMB_SECRET13                = 16,
	SECCMB_SECRET14                = 17,
	SECCMB_SECRET15                = 18,
	SECCMB_SECRET16                = 19,
	SECCMB_RCANDLE                 = 20,
	SECCMB_WANDFIRE                = 21,
	SECCMB_DINSFIRE                = 22,
	SECCMB_SARROW                  = 23,
	SECCMB_GARROW                  = 24,
	SECCMB_SBOMB                   = 25,
	SECCMB_BRANG                   = 26,
	SECCMB_MBRANG                  = 27,
	SECCMB_FBRANG                  = 28,
	SECCMB_WANDMAGIC               = 29,
	SECCMB_REFMAGIC                = 30,
	SECCMB_REFFIREBALL             = 31,
	SECCMB_SWORD                   = 32,
	SECCMB_WSWORD                  = 33,
	SECCMB_MSWORD                  = 34,
	SECCMB_XSWORD                  = 35,
	SECCMB_SWORDBEAM               = 36,
	SECCMB_WSWORDBEAM              = 37,
	SECCMB_MSWORDBEAM              = 38,
	SECCMB_XSWORDBEAM              = 39,
	SECCMB_HOOKSHOT                = 40,
	SECCMB_WAND                    = 41,
	SECCMB_HAMMER                  = 42,
	SECCMB_STRIKE                  = 43,
	SECCMB_SECRETSNEXT             = 44, // Only ->SecretFlags[] has a value for this index.
	SECCMB_MAX                     = 45,
};

// Used with [Audio->Volume].
enum VolumeIndex
{
	VOL_MIDI                       = 0,
	VOL_DIGI                       = 1,
	VOL_MUSIC                      = 2,
	VOL_SFX                        = 3,
};

// Combo Quadrants used for Combo Solidity and CSet2vMasks.
enum ComboSolidityBitflags
{
	CMB_QUADRANT_UL                = 0001b,
	CMB_QUADRANT_UR                = 0100b,
	CMB_QUADRANT_DL                = 0010b,
	CMB_QUADRANT_DR                = 1000b,
	CMB_QUADRANT_UPLEFT            = 0001b,
	CMB_QUADRANT_UPRIGHT           = 0100b,
	CMB_QUADRANT_DOWNLEFT          = 0010b,
	CMB_QUADRANT_DOWNRIGHT         = 1000b,
	CMB_QUADRANT_LEFTUP            = 0001b,
	CMB_QUADRANT_RIGHTUP           = 0100b,
	CMB_QUADRANT_LEFTDOWN          = 0010b,
	CMB_QUADRANT_RIGHTDOWN         = 1000b,
};

// System Real Time Clock (RTC) categories for [GetSystemTime].
enum RealTimeClockCategory
{
	RTC_YEAR                       = 0,
	RTC_MONTH                      = 1,
	RTC_DAYOFMONTH                 = 2,
	RTC_DAYOFWEEK                  = 3,
	RTC_HOUR                       = 4,
	RTC_MINUTE                     = 5,
	RTC_SECOND                     = 6,
	RTC_DAYOFYEAR                  = 7,
	RTC_DAYLIGHTTIME               = 8,
	RTC_LAST                       = 9,
};

// Warp Effects for Link->WarpEx.
enum WarpEffect
{
	WARPEFFECT_NONE                = 0,
	WARPEFFECT_ZAP                 = 1,
	WARPEFFECT_WAVE                = 2,
	WARPEFFECT_INSTANT             = 3,
	WARPEFFECT_OPENWIPE            = 4,
};

// Warp Flags for [Hero->WarpEx].
enum WarpBitflags
{
	WARP_FLAG_SCRIPTDRAW           = 0x001,
	WARP_FLAG_PLAYSOUNDS           = 0x002,
	WARP_FLAG_FORCE_RESET_MUSIC    = 0x004,
	WARP_FLAG_SETENTRANCESCREEN    = 0x008,
	WARP_FLAG_SETENTRANCEDMAP      = 0x010,
	WARP_FLAG_SETCONTINUESCREEN    = 0x020,
	WARP_FLAG_SETCONTINUEDMAP      = 0x040,
	WARP_FLAG_DONT_RESET_DM_SCRIPT = 0x080,
	WARP_FLAG_DONT_CLEAR_SPRITES   = 0x100,
	WARP_FLAG_FORCE_CONTINUE_MUSIC = 0x200,
	WARP_FLAG_PLAYMUSIC            = WARP_FLAG_FORCE_RESET_MUSIC,
	WARP_FLAG_DONTCLEARSPRITES     = 0x100,
	WARP_FLAG_CLEARITEMS           = 0x200,
	WARP_FLAG_CLEARGUYS            = 0x400,
	WARP_FLAG_CLEARLWEAPONS        = 0x800,
	WARP_FLAG_CLEAREWEAPONS        = 0x1000,
	WARP_FLAG_CLEARHOOKSHOT        = 0x2000,
	WARP_FLAG_CLEARDECORATIONS     = 0x4000,
	WARP_FLAG_CLEARPARTICLES       = 0x8000,
	WARP_FLAG_NOSTEPFORWARD        = 0x10000,
};

// Flags for SaveSRAM() and LoadSRAM().
enum StoredMemoryBitflags
{
	SRAM_ALL                       = 0,
	SRAM_NPCDATA                   = 0x01,
	SRAM_ITEMDATA                  = 0x02,
	SRAM_SPRITEDATA                = 0x04,
	SRAM_COMBODATA                 = 0x08,
	SRAM_DMAPDATA                  = 0x10,
	SRAM_MAPDATA                   = 0x20,
};

// Used with [mapdata::NoCarry] and [screendata::NoCarry].
enum NoCarryBitflags
{
	NOCARRY_B_SECRET               = 0x2000,
	NOCARRY_B_ITEM                 = 0x0010,
	NOCARRY_B_SPECIALITEM          = 0x0020,
	NOCARRY_B_LOCKBLOCK            = 0x0100,
	NOCARRY_B_BOSSLOCKBLOCK        = 0x0200,
	NOCARRY_B_CHEST                = 0x0400,
	NOCARRY_B_LOCKEDCHEST          = 0x0800,
	NOCARRY_B_BOSSCHEST            = 0x1000,
};

// Used with [mapdata::NoReset] and [screendata::NoReset].
enum NoResetBitflags
{
	NORESET_B_SECRET               = 0x2000,
	NORESET_B_ITEM                 = 0x0010,
	NORESET_B_SPECIALITEM          = 0x0020,
	NORESET_B_LOCKBLOCK            = 0x0100,
	NORESET_B_BOSSLOCKBLOCK        = 0x0200,
	NORESET_B_CHEST                = 0x0400,
	NORESET_B_LOCKEDCHEST          = 0x0800,
	NORESET_B_BOSSCHEST            = 0x1000,
	NORESET_B_DOOR_B_UP            = 0x0001,
	NORESET_B_DOOR_B_DOWN          = 0x0002,
	NORESET_B_DOOR_B_LEFT          = 0x0004,
	NORESET_B_DOOR_B_RIGHT         = 0x0008,
};

enum DMapChartedBitflags
{
	CHRT_VISITED                   = 10000000b,
	CHRT_UP                        = 00000001b,
	CHRT_DOWN                      = 00000010b,
	CHRT_LEFT                      = 00000100b,
	CHRT_RIGHT                     = 00001000b,
};

enum UnblockableBitflags
{
	UNBLOCK_NONE                   = 0000b, // Not unblockable.
	UNBLOCK_NORM                   = 0001b, // Bypasses normal 'block' defenses.
	UNBLOCK_IGNR                   = 0010b, // Bypasses 'ignore' defenses.
	UNBLOCK_SHLD                   = 0100b, // Bypasses enemy/hero 'shields'.
	UNBLOCK_REFL                   = 1000b, // Bypasses hero 'reflect' on shields.
	UNBLOCK_ALL                    = 1111b, // All bits set.
};

// Used with [itemdata::Attributes].
// @deprecated Use [BlockBitflags] instead!
enum BlockBitflagsInt
{
	BLOCKFLAG_ROCK                 = 0x00001,
	BLOCKFLAG_ARROW                = 0x00002,
	BLOCKFLAG_BRANG                = 0x00004,
	BLOCKFLAG_FIREBALL             = 0x00008,
	BLOCKFLAG_SWORD                = 0x00010,
	BLOCKFLAG_MAGIC                = 0x00020,
	BLOCKFLAG_FLAME                = 0x00040,
	BLOCKFLAG_SCRIPT               = 0x00080, // Blocks or reflects ALL script weapons.
	BLOCKFLAG_FIREBALL2            = 0x00100,
	BLOCKFLAG_LIGHTBEAM            = 0x00200,
	BLOCKFLAG_SCRIPT1              = 0x00400,
	BLOCKFLAG_SCRIPT2              = 0x00800,
	BLOCKFLAG_SCRIPT3              = 0x01000,
	BLOCKFLAG_SCRIPT4              = 0x02000,
	BLOCKFLAG_SCRIPT5              = 0x04000,
	BLOCKFLAG_SCRIPT6              = 0x08000,
	BLOCKFLAG_SCRIPT7              = 0x10000,
};

// Used with [itemdata::LAttributes].
enum BlockBitflags
{
	L_BLOCKFLAG_ROCK               = 0x00000001L,
	L_BLOCKFLAG_ARROW              = 0x00000002L,
	L_BLOCKFLAG_BRANG              = 0x00000004L,
	L_BLOCKFLAG_FIREBALL           = 0x00000008L,
	L_BLOCKFLAG_SWORD              = 0x00000010L,
	L_BLOCKFLAG_MAGIC              = 0x00000020L,
	L_BLOCKFLAG_FLAME              = 0x00000040L,
	L_BLOCKFLAG_SCRIPT             = 0x00000080L, // Blocks or reflects ALL script weapons.
	L_BLOCKFLAG_FIREBALL2          = 0x00000100L,
	L_BLOCKFLAG_LIGHTBEAM          = 0x00000200L,
	L_BLOCKFLAG_SCRIPT1            = 0x00000400L,
	L_BLOCKFLAG_SCRIPT2            = 0x00000800L,
	L_BLOCKFLAG_SCRIPT3            = 0x00001000L,
	L_BLOCKFLAG_SCRIPT4            = 0x00002000L,
	L_BLOCKFLAG_SCRIPT5            = 0x00004000L,
	L_BLOCKFLAG_SCRIPT6            = 0x00008000L,
	L_BLOCKFLAG_SCRIPT7            = 0x00010000L,
	L_BLOCKFLAG_SCRIPT8            = 0x00020000L,
	L_BLOCKFLAG_SCRIPT9            = 0x00040000L,
	L_BLOCKFLAG_SCRIPT10           = 0x00080000L,
};

// Used with [Hero->HitBy] and [npc::HitBy].
enum HitIndex
{
	HIT_BY_NPC                     = 0,  // [Hero] only.
	HIT_BY_EWEAPON                 = 1,  // [Hero] only.
	HIT_BY_LWEAPON                 = 2,
	HIT_BY_FFC                     = 3,  // Unimplemented.
	HIT_BY_NPC_UID                 = 4,  // [Hero] only. The scripting UID of the enemy, used with [Screen->LoadNPCByUID].
	HIT_BY_EWEAPON_UID             = 5,  // [Hero] only.
	HIT_BY_LWEAPON_UID             = 6,
	HIT_BY_FFC_UID                 = 7,  // Unimplemented.
	HIT_BY_LWEAPON_PARENT_ID       = 8,  // The item id of the item that the weapon that hit came from. -1 if the lweapon is script created.
	HIT_BY_LWEAPON_PARENT_FAMILY   = 9,  // The item class of the item that the weapon that hit came from (see IC_ constants). -1 if the lweapon is script created.
	HIT_BY_NPC_TYPE                = 10, // [Hero] only. The enemy class of the enemy that hit the [Hero] (see [NpcType] constants).
	HIT_BY_EWEAPON_TYPE            = 11, // [Hero] only. The ID of the weapon that hit (see LW_ and EW_ constants).
	HIT_BY_LWEAPON_TYPE            = 12, // The internal UID used by the engine for the thing. Can case these to their respective types example: `npc n = <npc>(Hero->HitBy[HIT_BY_NPC_PTR])`.
	HIT_BY_NPC_PTR                 = 13,
	HIT_BY_EWEAPON_PTR             = 14,
	HIT_BY_LWEAPON_PTR             = 15,
	HIT_BY_NPC_ID                  = 16, // The ID of the enemy that did the hit.
};

enum AnimationBitflags
{
	AF_FRESH                       = 0x01,
	AF_CYCLE                       = 0x02,
	AF_CYCLENOCSET                 = 0x04,
	AF_TRANSPARENT                 = 0x08,
	AF_CYCLEUNDERCOMBO             = 0x10,
};

enum PickupStringBitflags
{
	IPSTR_ALWAYS                   = 0x01,
	IPSTR_ONLYHELD                 = 0x02,
};

enum ItemMiscBitflags
{
	IMISC_FLASH                    = 0x01,
	IMISC_TWOHAND                  = 0x02,
	IMISC_HFLIP                    = 0x04,
	IMISC_VFLIP                    = 0x08,
};

enum SizeOverrideBitflags
{
	SZFLAG_TILEWIDTH               = 0x0001,
	SZFLAG_TILEHEIGHT              = 0x0002,
	SZFLAG_HIT_WIDTH               = 0x0004,
	SZFLAG_HIT_HEIGHT              = 0x0008,
	SZFLAG_HIT_Z_HEIGHT            = 0x0010,
	SZFLAG_HIT_X_OFFSET            = 0x0020,
	SZFLAG_HIT_Y_OFFSET            = 0x0040,
	SZFLAG_DRAW_X_OFFSET           = 0x0080,
	SZFLAG_DRAW_Y_OFFSET           = 0x0100,
	SZFLAG_DRAW_Z_OFFSET           = 0x0200,
	SZFLAG_ALL                     = 0x03FF,
};

// Used with [Game->CurrentItemID].
enum CurrentItemIDBitflags
{
	CIID_FLAG_CHECKCOST            = 0x01, // Ignore items whose usecosts are currently not affordable.
	CIID_FLAG_CHECKJINX            = 0x02, // Ignore items which are currently disabled by jinxes.
	CIID_FLAG_CHECKBUNNY           = 0x04, // Ignore items which are currently disabled by BunnyClk.
};

// Used with [subscreenpage::SelectorMove].
enum MoveSubscreenSelectorBitflags
{
	SUBSEL_FLAG_NO_NONEQUIP        = 0x01, // Skip widgets that are "Non-equippable".
	SUBSEL_FLAG_NEED_ITEM          = 0x02, // Skip widgets that currently have no equippable item.
};
